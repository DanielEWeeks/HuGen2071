---
title: Loops in R, Part II
webr:
  packages: ['ggplot2','dplyr']
---

## Acknowledgment/License

The original source for this chapter was from the web site

<https://datacarpentry.org/semester-biology/>

which was built using this underlying code

<https://github.com/datacarpentry/semester-biology>

and is used under the

Attribution 4.0 International (CC BY 4.0)

license <https://creativecommons.org/licenses/by/4.0/>.

The material presented here has been modified from the original source.

Accordingly this chapter is made available under the same license terms.

## Source code 

If you'd like to work within R Studio using the source code of this chapter, you can obtain it from [here](https://github.com/DanielEWeeks/HuGen2071/blob/main/loops_part2.qmd).

## Looping with functions

-   It is common to combine loops with with functions by calling one or more functions as a step in our loop
-   For example, let's take the non-vectorized version of our `est_mass` function that returns an estimated mass if the `volume > 5` and `NA` if it's not.

```{webr-r}
est_mass <- function(volume, a, b){
  if (volume > 5) {
    mass <- a * volume ^ b
  } else {
    mass <- NA
  }
  return(mass)
}
class(est_mass)
```

-   We can't pass the vector to the function and get back a vector of results because of the `if` statements
-   So let's loop over the values
-   First we'll create an empty vector to store the results
-   And them loop by index, callling the function for each value of `volumes`

```{webr-r}
as <- c(2.65, 1.28, 3.29)
bs <- c(0.9, 1.1, 1.2)
volumes = c(1.6, 3, 8)
masses <- vector(mode="numeric", length=length(volumes))
for (i in 1:length(volumes)){
   mass <- est_mass(volumes[i], as[i], bs[i])
   masses[i] <- mass
}
masses
```

-   This is the for loop equivalent of an `mapply` statement

```{webr-r}
(masses_apply <- mapply(est_mass, volumes, as, bs))
```

::: callout-important
## Do \[Size Estimates By Name Loop\].

If `dinosaur_lengths.csv` is not already in your working directory download a copy of the [data on dinosaur lengths with species names](data/dinosaur_lengths.csv). Load it into R.

Write a function `mass_from_length()` that uses the equation `mass <- a * length^b` to estimate the size of a dinosaur from its length. This function should take two arguments, `length` and `species`. For each of the following inputs for `species`, use the given values of `a` and `b` for the calculation:

-   For `Stegosauria`: `a = 10.95` and `b = 2.64` ([Seebacher 2001](http://www.jstor.org/stable/4524171)).
-   For `Theropoda`: `a = 0.73` and `b = 3.63` ([Seebacher 2001](http://www.jstor.org/stable/4524171)).
-   For `Sauropoda`: `a` = `214.44` and `b = 1.46` ([Seebacher 2001](http://www.jstor.org/stable/4524171)).
-   For any other value of `species`: `a = 25.37` and `b = 2.49`.

1.  Use this function and a for loop to calculate the estimated mass for each dinosaur, store the masses in a vector, and after all of the calculations are complete show the first few items in the vector using `head()`.


```{webr-r}
# Edit/add/try out R code here
```

2.  Add the results in the vector back to the original data frame. Show the first few rows of the data frame using `head()`.


```{webr-r}
# Edit/add/try out R code here
```

3.  Calculate the mean mass for each `species` using `dplyr`.


```{webr-r}
# Edit/add/try out R code here
```


:::

## Looping over files

-   Repeat same actions on many similar files
-   Let's download some simulated satellite collar data

```{webr-r}
# Download files within the WebR environment
root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/locations.zip"),
              "locations.zip")
unzip("locations.zip")
```

-   Now we need to get the names of each of the files we want to loop over
-   We do this using `list.files()`
-   If we run it without arguments it will give us the names of all files in the directory

```{webr-r}
list.files()
```

-   But we just want the data files so we'll add the optional `pattern` argument to only get the files that start with `"locations-"`

```{webr-r}
(data_files = list.files(pattern = "locations-"))
```

-   Once we have this list we can loop over it count the number of observations in each file
-   First create an empty vector to store those counts

```{webr-r}
(n_files = length(data_files))
(results <- integer(n_files))
```

-   Then write our loop

```{webr-r}
for (i in 1:n_files){
  filename <- data_files[i]
  data <- read.csv(filename)
  count <- nrow(data)
  results[i] <- count
}
results
```

::: callout-important
## Do Task 1 of \[Multiple-file Analysis\].

**Exercise uses different collar data**

You have a satellite collars on a number of different individuals and want to be able to quickly look at all of their recent movements at once. The data is posted daily to a  zip file that contains one csv file for each individual: [data/individual_collar_data.zip](data/individual_collar_data.zip)

Start your solution by:

-   If `individual_collar_data.zip` is not already in your working directory download [the zip file](data/individual_collar_data.zip) using `download.file()`
-   Unzip it using `unzip()`
-   Obtain a list of all of the files with file names matching the pattern `"collar-data-.*.txt"` (using `list.files()`)

1.  Use a loop to load each of these files into R and make a line plot (using `geom_path()`) for each file with `long` on the `x` axis and `lat` on the `y` axis. Graphs, like other types of output, won't display inside a loop unless you explicitly display them, so you need put your `ggplot()` command inside a `print()` statement.

Include the name of the file in the graph as the graph title using `labs()`.


```{webr-r}
root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/individual_collar_data.zip"),
              "individual_collar_data.zip")
unzip("individual_collar_data.zip")
list.files()
# Edit/add/try out R code here
```

:::

## Storing loop results in a data frame

-   We often want to calculate multiple pieces of information in a loop making it useful to store results in things other than vectors
-   We can store them in a data frame instead by creating an empty data frame and storing the results in the `i`th row of the appropriate column
-   Associate the file name with the count
-   Also store the minimum latitude
-   Start by creating an empty data frame
-   Use the `data.frame` function
-   Provide one argument for each column
-   "Column Name" = "an empty vector of the correct type"

```{webr-r}
(results <- data.frame(file_name = character(n_files),
                      count = integer(n_files),
                      min_lat = numeric(n_files)))
```

-   Now let's modify our loop from last time
-   Instead of storing `count` in `results[i]` we need to first specify the `count` column using the `$`: `results$count[i]`
-   We also want to store the filename, which is `data_files[i]`

```{webr-r}
for (i in 1:n_files){
  filename <- data_files[i]
  data <- read.csv(filename)
  count <- nrow(data)
  min_lat = min(data$lat)
  results$file_name[i] <- filename
  results$count[i] <- count
  results$min_lat[i] <- min_lat
}
results
```

::: callout-important
## Do Task 2 of \[Multiple-file Analysis\].

**Exercise uses different collar data**

2.  Add code to the loop to calculate the minimum and maximum latitude in the file, and store these values, along with the name of the file, in a data frame. Show the data frame as output.


```{webr-r}
# Edit/add/try out R code here
```


If you're interested in seeing another application of for loops, check out the code below used to simulate the data for this exercise using for loops.

``` r
individuals = paste(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'), c(1:10), sep = "")
for (individual in individuals) {
    lat = vector("numeric", 24)
    long = vector("numeric", 24)
    lat[1] = rnorm(1, mean = 26, sd = 2)
    long[1] = rnorm(1, mean = -35, sd = 3)
    for (i in 2:24) {
        lat[i] = lat[i - 1] + rnorm(1, mean = 0, sd = 1)
        long[i] = long[i - 1] + rnorm(1, mean = 0, sd = 1)
    }
    times = seq(from=as.POSIXct("2016-02-26 00:00", tz="UTC"),
                to=as.POSIXct("2016-02-26 23:00", tz="UTC"),
                by="hour")  
    df = data.frame(date = "2016-02-26",
                    collar = individual,
                    time = times,
                    lat = lat,
                    long = long)
    write.csv(df, paste("collar-data-", individual, "-2016-02-26.txt", sep = ""))
}
zip("data/individual_collar_data.zip", list.files(pattern = "collar-data-[A-Z][0-9]+-.*"))
```
:::

## Subsetting Data 

-   Loops can subset in ways that are difficult with things like `group_by`
-   Look at some data on trees from the National Ecological Observatory Network

```{webr-r}
library(ggplot2)
library(dplyr)

root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/harv_034subplt.csv"),
              "harv_034subplt.csv")
neon_trees <- read.csv('harv_034subplt.csv')
head(neon_trees)
ggplot(neon_trees, aes(x = easting, y = northing)) +
  geom_point()
```

-   Look at a north-south gradient in number of trees
-   Need to know number of trees in each band of y values
-   Start by defining the size of the window we want to use
    -   Use the grid lines which are 2.5 m

```{webr-r}
(window_size <- 2.5)
```

-   Then figure out the edges for each window

```{webr-r}
(south_edges <- seq(4713095, 4713117.5, by = window_size))
(north_edges <- south_edges + window_size)
```

-   But we don't want to go all the way to the far edge

```{webr-r}
(south_edges <- seq(4713095, 4713117.5 - window_size, by = window_size))
(north_edges <- south_edges + window_size)
```

-   Set up an empty data frame to store the output

```{webr-r}
(counts <- vector(mode = "numeric", length = length(south_edges)))
```

-   Look over the left edges and subset the data occuring within each window

```{webr-r}
for (i in 1:length(south_edges)) {
  data_in_window <- filter(neon_trees, northing >= south_edges[i], northing < north_edges[i])
  counts[i] <- nrow(data_in_window)
}
counts

yedges <- unique(c(south_edges, north_edges))
ggplot(neon_trees, aes(x = easting, y = northing)) +
  geom_point() + 
  geom_hline(yintercept = yedges) +
  scale_y_reverse()
```

## Nested Loops 

-   Sometimes need to loop over multiple things in a coordinate fashion

-   Pass a window over some spatial data

-   Look at full spatial pattern not just east-west gradient

-   Basic nested loops work by putting one loop inside another one

```{webr-r}
for (i in 1:3) {
  for (j in 1:2) {
    print(paste("i = " , i, "; j = ", j))
  }
}
```

-   Loop over x and y coordinates to create boxes
-   Need top and bottom edges

```{webr-r}
(east_edges <- seq(731752.5, 731772.5 - window_size, by = window_size))
(west_edges <- east_edges + window_size)

```

-   Redefine out storage

```{webr-r}
(output <- matrix(nrow = length(south_edges), ncol = length(east_edges)))
```

```{webr-r}
for (i in 1:length(south_edges)) {
  for (j in 1:length(east_edges)) {
    data_in_window <- filter(neon_trees,
                            northing >= south_edges[i], northing < north_edges[i],
                            easting >= east_edges[j], easting < west_edges[j],)
    output[i, j] <- nrow(data_in_window)
  }
}
output

xedges <- unique(c(east_edges, west_edges))
yedges <- unique(c(south_edges, north_edges))
ggplot(neon_trees, aes(x = easting, y = northing)) +
  geom_point() + 
  geom_vline(xintercept=xedges) + 
  geom_hline(yintercept = yedges) +
  scale_y_reverse() 
```

## Sequence along 

-   `seq_along()` generates a vector of numbers from 1 to `length(volumes)`

```{webr-r}
1:length(east_edges)
seq_along(east_edges)
```
