---
webr:
  packages: ['tidyverse']
editor: 
  mode: source  
---

# R Reordering Exercise

```{r,echo=FALSE,message=FALSE,warning=FALSE}
require(knitr)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
```


## Create some example data

Here we set up a data dictionary `dd` and some corresponding data `ds`. However, it is better if the order of the rows in the data dictionary `dd` match the order of the columns in the data `ds`.

```{webr-r}
library(tidyverse)
# library(tidylog)
set.seed(1562345)
# Set up a data dictionary
dd <- data.frame(VARNAME = sample(letters,26), TYPE ="numeric")
# Set up data 
ds <- as.data.frame(t(dd %>% arrange(VARNAME)))
names(ds) <- letters
rownames(ds) <- NULL
ds[1,] <- rnorm(26)
ds[2,] <- runif(26)
ds$ID <- c(1,2)
ds <- ds %>% select(ID, everything())
# Randomly rearrange the columns
idx <- sample(letters,26)
idx <- c("ID",idx)
ds <- ds %>% select(all_of(idx))
dd <- bind_rows(dd,data.frame(VARNAME="ID", TYPE="string"))
ls()
```

Let's examine what we've created:

```{webr-r}
# dd is the data dictionary
dim(dd)
head(dd)

# ds is the data
dim(ds)
head(ds[1:5])
names(ds)
```

## Task: Reorder rows in `dd` in the order of `ds`'s columns

```{webr-r}
colnames(ds)
dd$VARNAME
```

This assumes that every row of `dd` is in `colnames(ds)` and every `colnames(ds)` value is represented in `dd`. Perhaps that should be checked first.

## Assumption Check Question

How would you check that every variable listed in the data dictionary `dd` is named in `colnames(ds)` and every `colnames(ds)` value is represented in the data dictionary `dd`?

```{webr-r}
# Edit/add/try out R code here
```

::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
table(dd$VARNAME %in% colnames(ds))
table(colnames(ds) %in% dd$VARNAME)
```

Note that we should also check to see if the `VARNAME`'s are unique and the `colnames` of `ds` are unique.

```{webr-r}
sum(duplicated(dd$VARNAME))
sum(duplicated(colnames(ds)))
```
:::

## Task: Reorder rows in `dd` to match the order of the columns in `ds`

Task: Reorder rows in the data dictionary `dd` to match the order of the columns in the data `ds`

-   What are various ways you could rearrange the rows of a data frame?

```{webr-r}
# Edit/add/try out R code here
```

::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
# Assign VARNAME to be the rownames of dd
rownames(dd) <- dd$VARNAME
# Rearrange by row names:
dd2 <- dd[colnames(ds),]
# Check if this worked:
all.equal(dd2$VARNAME, colnames(ds))
head(dd2)
head(ds[,1:6])
```

We can use `match` also:

```{webr-r}
# match returns a vector of the positions of (first) matches of its first argument in its second.
dd3 <- dd[match(colnames(ds), dd$VARNAME),]
# Check if this worked:
all.equal(dd3$VARNAME, colnames(ds))
```
:::

## Question: use `arrange`?

Question: Is there a way to do this using `arrange`?

```{webr-r}
# Edit/add/try out R code here
```

::: {.callout-tip collapse="true"}
## Expand to see the first attempt

This does not work, because `tidyverse` wants to work on columns of data within `dd`:

```{webr-r}
dd4 <- dd %>% arrange(colnames(ds))
# Check if this worked:
all.equal(dd4$VARNAME, colnames(ds))
```
:::

## Question: use `arrange`?

Question: Is there a way to do this using `arrange`?

`arrange()` orders the rows of a data frame by the values of selected columns.

::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
dd4 <- dd %>% 
  mutate(neworder = match(.$VARNAME, colnames(ds))) %>%
  arrange(neworder) %>% 
  select(-neworder)
all.equal(dd4$VARNAME, colnames(ds))
```
:::

## Question: use `slice`

Question: Is there a way to do this using the `slice` command?

The `slice()` function lets you index rows by their (integer) locations.

Hint: Combine `slice` with `match`.

```{webr-r}
# Edit/add/try out R code here
```

::: {.callout-tip collapse="true"}
## Expand to see solution

The `match` function returns a vector of the positions of (first) matches of its first argument in its second.  So if you have a data frame with row names, you can use `match` to get the positions of the row names you want to select.  You can then use `slice` to select the rows by position.

According to its documentation, `slice` lets you index rows by their (integer) locations. It allows you to select, remove, and duplicate rows. 
Here's an example combining `slice` and `match` where we have a data frame with row names and we want to select the rows in the order "A", "B", "C":
  
```
> df
  a b
B 1 3
C 2 2
A 3 1
> match(c("A","B","C"),rownames(df))
[1] 3 1 2
> df %>% slice(match(c("A","B","C"),rownames(df)))
  a b
A 3 1
B 1 3
C 2 2
```

Here the match vector of `3 1 2` tells us that row "A" is in position 3, row "B" is in position 1, and row "C" is in position 2. So when we do `slice(3,1,2)` that moves row 3 into position 1, row 1 into position 2, and row 2 into position 3, as desired.

```{webr-r}
dd6<- dd %>% slice(match(colnames(ds), .$VARNAME))
all.equal(dd6$VARNAME, colnames(ds))
```

:::

## Question: use `select`?

Question: Is there a way to do this by transposing and then using `select`?

The `t()` function transposes a matrix or data frame. It generates a new data frame where the rows are the columns of the original data frame and the columns are the rows of the original data frame.

```{webr-r}
# Edit/add/try out R code here
```

::: {.callout-tip collapse="true"}
## Expand to see solution

Here is an example of using `t()` to transpose a data frame:

```
> df
  a b
B 1 3
C 2 2
A 3 1
> t(df)
  B C A
a 1 2 3
b 3 2 1
```

When we use `t(df)` we get a new data frame where the rows are the columns of the original data frame and the columns are the rows of the original data frame. 

We can then use `select` to rearrange the columns, and then transpose back to get the original data frame with the columns in the desired order.

```{webr-r}
# Transpose so rows become columns, and then we can use 'select' to rearrange those columns,
# and then transpose back, and rename columns as needed. 
dd5 <- dd %>% t()  %>% 
  as_tibble(.name_repair = "unique") 
# Create a named vector to use in the `rename` command
lookup <-  names(dd5)
names(lookup) <- as.character(dd5[1,])
dd5 <- dd5 %>% 
  rename(all_of(lookup)) %>% 
  select(colnames(ds)) %>% 
  t() %>% as.data.frame() %>% 
  rename("VARNAME"="V1","TYPE" = "V2")
all.equal(dd5$VARNAME, colnames(ds))
```
:::

## Question: use row names

Question: What about using row names?

"While a tibble can have row names (e.g., when converting from a regular data frame), they are removed when subsetting with the \[ operator. A warning will be raised when attempting to assign non-NULL row names to a tibble. Generally, it is best to avoid row names, because they are basically a character column with different semantics than every other column."

From: https://tibble.tidyverse.org/reference/rownames.html
