---
webr:
  packages: ['tidyverse']
editor: 
  mode: source    
---  

# R Recoding Reshaping Exercise

```{r,echo=FALSE,message=FALSE,warning=FALSE}
require(knitr)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
```


## Key points

Here are some key points regarding recoding and reshaping data in R:

* Count the number of times `ID2` is duplicated
    - `sum(duplicated(b$ID2))`
* List all rows with a duplicated `c1` value
    - `f %>% group_by(c1) %>% filter(n()>1)`
* Recode data using `left_join`
* Pivot data from long to wide
    - `pivot_wider`
* Pivot data from wide to long
    - `pivot_longer`
* Useful table commands
    - `table()`
    - `addmargins(table())`
    - `prop.table(table(), margin)`

## Download example data

```{webr-r}
library(tidyverse)
# 'kable' is in the 'knitr' R package
library(knitr)
# library(tidylog)
# Download files within the WebR environment
root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/study2_key1.txt"),
              "study2_key1.txt")
download.file(paste0(root_srcfile,"data/study2_snp.txt"),
              "study2_snp.txt")
download.file(paste0(root_srcfile,"data/study2_pheno.txt"),
              "study2_pheno.txt")
```





## Recoding data  

- Different parts of the data may have different ID systems


- Clinical ID
- Laboratory ID
- Genotyping service ID
- Need a *dictionary* or key to translate one type of key into another
key

##  A dictionary

* A dictionary defines a one-to-one correspondence between keys and values
    - keys must be unique


## Recoding data


- Good practice to output old IDs as well as new IDs into the output files


- Permits checking
- Have to convey results back to your collaborators using their ID system

Suppose we have been given these data:

```
    ==> study2_ped.txt <== 
    ID1     sex     aff2
    1       M       1
    2       M       2
    ==> study2_pheno.txt <==
    ID2     sex     t
    E544    M       3.34263153909733
    E853    M       5.35786611210859
    ==> study2_snp.txt <==
    ID2     SNPID2          all1    all2
    E544    Aff-S-3212091   A       T
    E853    Aff-S-1032132   A       A
```



The clinicians used an integer for the Person IDs:
```
    ==> study2_ped.txt <== 
    ID1     sex     aff2
    1       M       1
    2       M       2
```

The serum assay laboratory used a different set of Person IDs starting with the letter ’E’:

```
    ==> study2_pheno.txt <==
    ID2     sex     t
    E544    M       3.34263153909733
    E853    M       5.35786611210859
```



While the genotyping lab also used ’E’ Person IDs, they did not use ’rs’ SNP IDs:

```
    ==> study2_snp.txt <==
    ID2     SNPID2          all1    all2
    E544    Aff-S-3212091   A       T
    E853    Aff-S-1032132   A       A
```

**Keys**

* To use these data together, we need to translate Person IDs and SNP IDs so that all of our files are using the same IDs (e.g. so they all speak the same language).
* To do this, we need translation keys:

```
==> study2_key1.txt <==
ID1     ID2
1       E544
2       E853

==> study2_key2.txt <==
rsID    SNPID2
rs35814900      Aff-S-3212091
rs28370510      Aff-S-1032132
```


## Duplicates

Note above that we said that the keys must be unique.

**Question:** How would you check in R that the keys are unique? For example,
how would you check for duplicates in the ID2 column of 'study2\_key1.txt'?

```{webr-r}
b <- read.table("study2_key1.txt",header=T)
head(b)
```


**Answer:** In R, the duplicated function can be used to check for duplicates

```{webr-r}
table(duplicated(b$ID2))
```


### Counting duplicates

To count the number of duplicated ID's, we can take advantage of the fact that a `TRUE` value behaves as a `1` and a `FALSE` value behaves as a `0` when a logicial variable is used in a numeric computation.

```{webr-r}
# Count the number of times ID2 is duplicated
sum(duplicated(b$ID2))
```


### Checking for duplicates

How do we return every row that contains a duplicate?

```{webr-r}
f <- data.frame(c1=c(1,1,2),c2=c(1,2,3))
f
f[duplicated(f$c1),]
```




```{webr-r}
f
f[duplicated(f$c1),]
f[f$c1 %in% f[duplicated(f$c1), ]$c1, ]
```

Another way to list all of the rows containing a duplicated 'c1' value:

```{webr-r}
f[duplicated(f$c1) | duplicated(f$c1, fromLast = TRUE),]
```

Yet another way to list all of the rows containing a duplicated 'c1' value using functions from the 'tidyverse' package:


```{webr-r}
f %>% group_by(c1) %>% filter(n()>1)
```

### Key points: Duplicates

Here are some key points regarding detecting duplicates:

* Count the number of times `ID2` is duplicated
    - `sum(duplicated(b$ID2))`
* List all rows with a duplicated `c1` value
    - `f %>% group_by(c1) %>% filter(n()>1)`

## Project 1 Data

In the `ds` data frame we have the synthetic yet realistic data we will be using in Project 1.

In the `dd` data frame we have the corresponding data dictionary.

```{webr-r}
# Download file within the WebR environment
root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/exercise.RData"),
              "exercise.RData")
load("exercise.RData", verbose = TRUE)
dim(ds)
names(ds)
dim(dd)
names(dd)
```


## Exercise 1: duplicated values

**Skill**: Checking for duplicated IDs

```{webr-r}
ds %>% select(subject_id, sample_id, height) %>% head(n=10) 
```

Using the `ds` data frame from Project 1, check if there are any duplicated `sample_id`'s using the `duplicated` command.  If so, count how many duplicated `sample_id`'s there are. 


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
sum(duplicated(ds$sample_id))
```
:::

Construct a table of the number of times each `sample_id` is duplicated:


```{webr-r}
# Edit/add/try out R code here
```


::: {.callout-tip collapse="true"}
## Expand to see solution

Note that it is important to be aware of missing IDs.  So when constructing tables of counts using the `table` command, the `useNA` argument controls if the table includes counts of `NA` values.

```{webr-r}
# Count how many times each sample_id occurs
# ignoring NA's
tail(table(ds$sample_id))
# Count how many times each sample_id occurs
# including NA's
tail(table(ds$sample_id, useNA="always"))
# Table of the different number of times sample_id's are repeated
table(table(ds$sample_id))
# But why do we get differing numbers here?
sum(duplicated(ds$sample_id))
35+13*2+2*3+1*4
sum(duplicated(ds$sample_id, incomparables = NA))
```

How many `sample_id`'s are `NA`'s?

```{webr-r}
sum(is.na(ds$sample_id))
```


```{webr-r}
table(table(ds$sample_id, useNA="always"))
36+13*2+2*3+1*4
```
:::

Check if there are any duplicated `subject_id`s


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

We can check if there are any duplicated `subject_id`'s by counting how many duplicates there are.  

```{webr-r}
sum(duplicated(ds$subject_id))
```
:::

## Checking for duplicates

How do we return every row that contains a duplicate?

This approach only does not return every row that contains a duplicated `ID`:

```{webr-r}
f <- data.frame(ID=c(1,1,2),c2=c(1,2,3))
f
f[duplicated(f$ID),]
```

## Counting the number of occurences of the ID

```{webr-r}
f %>% group_by(ID) %>% summarise(n=n())
f %>% group_by(ID) %>% count()
```

## Count `sample_id` duplicates

Using Tidyverse commands, count how many times each `sample_id` occcurs in the `ds` data frame, reporting the counts in descending order, from highest to lowest.


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
ds  %>% group_by(sample_id) %>% 
  summarise(n=n()) %>%  
  filter(n>1) %>% 
  arrange(desc(n)) %>%
  head()
```

```{webr-r}
ds  %>% group_by(sample_id) %>% 
  summarise(n = n()) %>%  filter(n > 1) %>% 
  arrange(desc(n)) %>% pull(n) %>% table()
```
:::

## Checking for duplicates

Here we list all of the rows containing a duplicated 'ID' value using functions from the 'tidyverse' package:

```{webr-r}
f %>% group_by(ID) %>% filter(n()>1)
```

### How to list all duplicates

Use Tidyverse commands to list (1) all duplicates for `sample_id` and (2) all duplicates for `subject_id`. Sort the results by the ID.


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

### Sample ID

```{webr-r}
ds  %>% group_by(sample_id) %>% 
        filter(n() > 1) %>% 
        select(sample_id, subject_id, Sample_trimester, Gestationalage_sample) %>% 
        arrange(sample_id, Sample_trimester, Gestationalage_sample) %>% 
        head()
```

### Subject ID

```{webr-r}
ds  %>% 
  group_by(subject_id) %>% 
  filter(n() > 1) %>% 
  select(subject_id,sample_id, Sample_trimester, Gestationalage_sample) %>% 
  arrange(subject_id,
          sample_id,
          Sample_trimester,
          Gestationalage_sample) %>% 
  head(10)
```
:::

## Reshaping data

### Download example data

```{webr-r}
library(tidyverse)
library(knitr)
# Download files within the WebR environment
root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/study2_snp.txt"),
              "study2_snp.txt")
```

### Long & wide PLINK data

* For large-scale data, PLINK is very useful for converting from 'long' to 'wide'

* Long: ped, per, rsID, allele 1, allele 2

* Wide: ped, per, SNP1 allele 1, SNP1 allele 2, SNP2 allele 1, SNP2 allele 2, ...

**CAUTION:** When reading long data, PLINK does not warn about multiple genotypes for the same person, but rather uses the final one read in.



Long format data: one row per genotype 

```{webr-r}
b <- read.table("study2_snp.txt",header=T)
b$g <- paste(b$all1,b$all2,sep="/")
f <- b[,c(-3,-4)]
kable(head(f))
```

### `reshape`

So here we have two SNPs typed per person, and we want to convert from ’long’ format to ’wide’ format:

Wide format data: one row per individual


```{webr-r}
g.wide <- reshape(f,idvar="ID2",timevar="SNPID2",
             v.names=c("g"),direction="wide")
```

Check that it worked correctly:

```{webr-r}
kable(head(g.wide))
kable(f[f$ID2=="E992",])
```


### `pivot_wider`

Using `pivot_wider` from `tidyverse`:

```{webr-r}
f %>% pivot_wider(id_cols = ID2, 
    names_from = SNPID2, 
    values_from = g) %>% 
  head() %>% 
  kable()
```

### Key points

Here are some key points regarding reshaping data in R:

* Pivot data from long to wide
    - `pivot_wider`
* Pivot data from wide to long
    - `pivot_longer`

## Exercise 2: Reshaping data

**Skill**: Reshaping data

Select only three columns "sample_id", "Sample_trimester", "Gestationalage_sample" from the `ds` data frame, and then reshape from 'long' format to 'wide' format using `pivot_wider`, taking time as the "Sample_trimester".


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
b <- ds %>% select(sample_id, Sample_trimester, Gestationalage_sample)

b2 <- b %>% pivot_wider(id_cols = sample_id, names_from = Sample_trimester, values_from = Gestationalage_sample)
head(b2)

# Trimester 1 Gestationalage_sample values for SAMP149
glimpse(b2[1,"1"])
```

### Comment

View `b2` via the `View(b2)` command in RStudio - it nicely put all the different gestational age observations into one list for each `sample_id` x `Sample_trimester` combination.
:::

## Exercise 3: Aggregating data

**Skill**: Aggregating data

Make a table showing the proportion of blacks and whites that are controls and cases.


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
prop.table(table(ds$case_control_status,ds$race), 
           margin = 2)
```

### Comment:

The `margin` parameter of the `prop.table` command has to be specified in order to get the desired answer: "1 indicates rows, 2 indicates columns.

```{webr-r}
prop.table(table(ds$case_control_status,ds$race), 
           margin = 1)
```

```{webr-r}
prop.table(table(ds$case_control_status,ds$race))
```
:::

Construct more readable tables with labels using `xtabs`


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

### `xtabs` table with labels

```{webr-r}
prop.table(xtabs( ~ case_control_status + race, data = ds), 
           margin = 1)
```
:::

Create a count cross table using Tidyverse commands


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
ds %>%
group_by(case_control_status, race)%>%
summarize(n=n())%>%
spread(race, n)
addmargins(xtabs( ~ case_control_status + race, data = ds))
```
:::

Create a proportion cross table using Tidyverse commands


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
ds %>%
group_by(case_control_status, race)%>%
summarize(n=n())%>%
mutate(prop=n/sum(n))%>%
select(-n) %>%
spread(race, prop)

```
:::

## Exercise 4: Summarizing within groups

**Skill**: Summarizing within groups

Apply the `summary` command to the "Gestationalage_sample" within each "Sample_trimester" group.


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
f <- split(ds[,"Gestationalage_sample"], ds$Sample_trimester)
sapply(f, summary)

# Or 'tapply' can be used:
tapply(ds$Gestationalage_sample, ds$Sample_trimester, summary)
```

Note: With `split(x, f)`, any missing values in `f` are dropped together with the corresponding values of `x`.
:::

## Recoding data

### Recoding data using look-up tables

**Approach 1**

* Implement our dictionaries using look-up tables
    - Use a named vector.

Here's an example of how to do this:

* Use the information in `study2_key1.txt` to set up a dictionary `dictPer` that maps 'E' person IDs to integer person IDs.

```{webr-r}
key1 <- read.table(file="study2_key1.txt", header=TRUE, 
                   stringsAsFactors = FALSE)
head(key1,2)
dictPer <- key1$ID1
names(dictPer) <- key1$ID2
head(dictPer,8)
```

* Read in study2_pheno.txt, and using `dictPer`, translate the person IDs and write it out again with the translated person IDs.

```{webr-r}
pheno <- read.table("study2_pheno.txt", header=TRUE, 
                    stringsAsFactors = FALSE)
pheno$ID1 <- dictPer[pheno$ID2]
kable(head(pheno,4))
```


# Recoding data using left joins

**Approach 2**

* Implement our dictionaries using left joins 

Here's an example of how to do this:

* Read in study2_pheno.txt, and using `dictPer`, translate the person IDs and write it out again with the translated person IDs.

```{webr-r}
pheno <- read.table("study2_pheno.txt", header=TRUE, 
                    stringsAsFactors = FALSE)
pheno <- left_join(pheno,key1, by=c("ID2"))
kable(head(pheno,4))
```


## Exercise 5: Recoding data

**Approach 1**

-   Implement our dictionaries using look-up tables
    -   Use a named vector.

**Skill:**: Recoding IDs using a dictionary

Create a new subject ID column named "subjectID" where you have used the `DictPer` named vector to recode the original "subject_id" IDs into integer IDs.

```{webr-r}
head(DictPer)
```


```{webr-r}
# Edit/add/try out R code here
```




::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
a5 <- ds
a5$ID <- DictPer[a5$subject_id]
a5 %>% select(subject_id, ID) %>%  head
head(DictPer)
```
:::



**Approach 2**

-   Implement our dictionaries using left joins

### Comment

I usually prefer to use a merge command like `left_join` to merge in the new IDs into my data frame.


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
key <- data.frame(SubjID=names(DictPer),ID=DictPer)
head(key)
b5 <- left_join(ds, key, by=c("subject_id" = "SubjID"))
b5 %>% select(subject_id,ID) %>%  head()
```
:::

## Exercise 6: Filtering rows

**Skill**: Filtering rows.

Create a data frame `tri1` containing the records for Trimester 1, and a second data frame `tri2` containing the records for Trimester 2.


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
tri1 <- ds %>% filter(Sample_trimester==1)
tri1 %>% select(subject_id, sample_id, Sample_trimester) %>%  head()
tri2 <- ds %>% filter(Sample_trimester==2)
tri2 %>% select(subject_id, sample_id, Sample_trimester) %>%  head()
```
:::

## Exercise 7

**Skill**: Selecting columns

Update `tri1` and `tri2` to only contain the three columns "sample_id", "Sample_trimester", "Gestationalage_sample"


```{webr-r}
# Edit/add/try out R code here
```



::: {.callout-tip collapse="true"}
## Expand to see solution

```{webr-r}
tri1 <- tri1 %>% select(sample_id, Sample_trimester, Gestationalage_sample)
head(tri1)
tri2 <- tri2 %>% select(sample_id, Sample_trimester, Gestationalage_sample)
head(tri2)
```
:::
