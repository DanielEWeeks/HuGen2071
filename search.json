[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HuGen2071 book",
    "section": "",
    "text": "This is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "preparation.html",
    "href": "preparation.html",
    "title": "1  Preparation",
    "section": "",
    "text": "The first part of our HuGen 2071 course aims to teach you R in the context of applied data wrangling in a genetic context. In our experience, if you have never programmed before, it moves kind of fast. As such, it would be useful to review these sources below."
  },
  {
    "objectID": "preparation.html#basic-programming-ideas",
    "href": "preparation.html#basic-programming-ideas",
    "title": "1  Preparation",
    "section": "1.1 Basic programming ideas",
    "text": "1.1 Basic programming ideas\n\n1.1.1 Introduction to Coding\nThis web page and two short videos discusses how computer programming is very similar to writing a recipe - you have to break a complex project down into precise smaller individual steps.\nhttps://subjectguides.york.ac.uk/coding/introduction"
  },
  {
    "objectID": "preparation.html#r",
    "href": "preparation.html#r",
    "title": "1  Preparation",
    "section": "1.2 R",
    "text": "1.2 R\n\n1.2.1 PhD Training Workshop: Statistics in R\nThis online book has a nice introduction to the concepts of programming, RStudio, and R\nhttps://bookdown.org/animestina/R_Manchester/\nSee Chapters 1, 2, and 3"
  },
  {
    "objectID": "preparation.html#r-and-rstudio",
    "href": "preparation.html#r-and-rstudio",
    "title": "1  Preparation",
    "section": "1.3 R and RStudio",
    "text": "1.3 R and RStudio\n\n1.3.1 R for the Rest of Us\nAcquaint or refresh yourself with R and RStudio — including installing them on your computer with this “R for the Rest of Us course” (24 min of videos + exercises):\nhttps://rfortherestofus.com/courses/getting-started/\nSlides: https://rfortherestofus.github.io/getting-started/slides/slides.html"
  },
  {
    "objectID": "preparation.html#github",
    "href": "preparation.html#github",
    "title": "1  Preparation",
    "section": "1.4 GitHub",
    "text": "1.4 GitHub\nTo introduce yourself to GitHub:\nhttps://guides.github.com/introduction/git-handbook/\nhttps://guides.github.com/activities/hello-world/"
  },
  {
    "objectID": "preparation.html#r-markdown",
    "href": "preparation.html#r-markdown",
    "title": "1  Preparation",
    "section": "1.5 R Markdown",
    "text": "1.5 R Markdown\nTo introduce yourself or refresh yourself on R Markdown:\nhttps://rmarkdown.rstudio.com/ (click on Get Started)"
  },
  {
    "objectID": "preparation.html#unix",
    "href": "preparation.html#unix",
    "title": "1  Preparation",
    "section": "1.6 Unix",
    "text": "1.6 Unix\nAnd finally, to introduce yourself or refresh yourself with Unix (well, Linux in this case, but close enough), try Lessons 1–11 here:\nhttps://www.webminal.org/"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "Book source code: https://github.com/DanielEWeeks/HuGen2071\nCreated by Daniel E. Weeks\nWebsite: https://www.publichealth.pitt.edu/home/directory/daniel-e-weeks"
  },
  {
    "objectID": "logistics.html",
    "href": "logistics.html",
    "title": "3  Logistics",
    "section": "",
    "text": "Please go to https://github.com and set up a GitHub account.\nChoose your GitHub user name carefully, as you may end up using it later in a professional context."
  },
  {
    "objectID": "logistics.html#github-classroom",
    "href": "logistics.html#github-classroom",
    "title": "3  Logistics",
    "section": "3.2 GitHub Classroom",
    "text": "3.2 GitHub Classroom\nAs GitHub Classroom will be used to distribute course materials and to submit assignments, it would be best if you get git working on your own computer. The easiest way to do this is to install RStudio, R, and git on your computer.\nPlease follow the detailed instructions in https://github.com/jfiksel/github-classroom-for-students\nIn particular, see Step 5 re generating an ssh key so you don’t need to login every time."
  },
  {
    "objectID": "Rbasics.html",
    "href": "Rbasics.html",
    "title": "4  R Basics Group Exercise",
    "section": "",
    "text": "a <- data.frame(n = 1:4)\ndim(a)\n\n[1] 4 1\n\na\n\n  n\n1 1\n2 2\n3 3\n4 4"
  },
  {
    "objectID": "Rbasics.html#exercise-1-recycling",
    "href": "Rbasics.html#exercise-1-recycling",
    "title": "4  R Basics Group Exercise",
    "section": "4.2 Exercise 1: recycling",
    "text": "4.2 Exercise 1: recycling\nThis exercise should help answer this question: ‘In what type of situations would “recycling” be useful?’\nUse recycling to insert into the data frame a a column named rowNum1 that contains a 1 in even rows and a 2 in odd rows.\n\n\n\n\n\n\nTip\n\n\n\nThe R command\na$rowNum1 <- NA\nwould insert a new row into the data frame a full of NA values.\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\na$rowNum1 <- c(1,2)\na\n\n  n rowNum1\n1 1       1\n2 2       2\n3 3       1\n4 4       2"
  },
  {
    "objectID": "Rbasics.html#exercise-2-vector-addition",
    "href": "Rbasics.html#exercise-2-vector-addition",
    "title": "4  R Basics Group Exercise",
    "section": "4.3 Exercise 2: vector addition",
    "text": "4.3 Exercise 2: vector addition\nUse vector addition to construct a vector of length 4 that contains a 1 in even rows and a 2 in odd rows. Then insert this vector into the data frame a into a column named rowNum6.\n\n\n\n\n\n\nTip\n\n\n\nWhat vector could you add to this vector so the sum is the vector (1, 2, 1, 2)?\n\nrep(1, 4)\n\n[1] 1 1 1 1\n\n\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\nr1 <- rep(1, times = 4)\nr2 <- rep(c(0,1), times = 2)\nr1\n\n[1] 1 1 1 1\n\nr2\n\n[1] 0 1 0 1\n\nr1 + r2\n\n[1] 1 2 1 2\n\na$rowNum6 <- r1 + r2\na\n\n  n rowNum1 rowNum6\n1 1       1       1\n2 2       2       2\n3 3       1       1\n4 4       2       2"
  },
  {
    "objectID": "Rbasics.html#exercise-3-for-loops",
    "href": "Rbasics.html#exercise-3-for-loops",
    "title": "4  R Basics Group Exercise",
    "section": "4.4 Exercise 3: for loops",
    "text": "4.4 Exercise 3: for loops\nLoops allow you to repeat actions on each item from a vector of items.\nHere is an example for loop, iterating through the values of i from 1 to 3:\n\nfor (i in 1:3) {\n  print(paste(\"i =\",i))\n}\n\n[1] \"i = 1\"\n[1] \"i = 2\"\n[1] \"i = 3\"\n\n\nThis does the same thing as this repetitive code:\n\ni.vector <- c(1,2,3)\ni <- i.vector[1]\nprint(paste(\"i =\",i))\n\n[1] \"i = 1\"\n\ni <- i.vector[2]\nprint(paste(\"i =\",i))\n\n[1] \"i = 2\"\n\ni <- i.vector[3]\nprint(paste(\"i =\",i))\n\n[1] \"i = 3\"\n\n\nUse a for loop to insert into the data frame a a column named rowNum2 that contains a 1 in even rows and a 2 in odd rows.\n\n\n\n\n\n\nTip\n\n\n\nThink about how as i increments from 1 to nrow(a), how could we map that sequence (e.g. 1, 2, 3, 4) to the desired sequence of 1, 2, 1, 2.\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\n# Set value that we want to iterate 1, 2, 1, 2, ...\nj <- 1\n# Initialize rowNum2 to all missing values\na$rowNum2 <- NA  \n# Start the for loop, looping over the number of rows in a\nfor (i in c(1:nrow(a))) {\n   # Assign value j to row i\n   a$rowNum2[i] <- j\n   # Increment j\n   j <- j + 1\n   # If j is greater than 2, set it back to 1\n   if (j > 2) {\n     j <- 1\n   }\n}\na\n\n  n rowNum1 rowNum6 rowNum2\n1 1       1       1       1\n2 2       2       2       2\n3 3       1       1       1\n4 4       2       2       2"
  },
  {
    "objectID": "Rbasics.html#exercise-4-while-loops",
    "href": "Rbasics.html#exercise-4-while-loops",
    "title": "4  R Basics Group Exercise",
    "section": "4.5 Exercise 4: while loops",
    "text": "4.5 Exercise 4: while loops\nHere’s an example while loop:\n\ni <- 1\nwhile (i < 4) {\n  print(paste(\"i =\",i))\n  i <- i + 1\n}\n\n[1] \"i = 1\"\n[1] \"i = 2\"\n[1] \"i = 3\"\n\n\nUse a while loop to insert into the data frame a a column named rowNum3 that contains a 1 in even rows and a 2 in odd rows.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\na$rowNum3 = NA\ni <- 1 #set index\nwhile(i <= nrow(a)){ #set conditions for while loop\n\n  if ((i %% 2)) { #if statement for when \"i\" is odd\n    a$rowNum3[i] <- 1\n  }\n  else #else statement for when \"i\" is even\n    a$rowNum3[i] <- 2\n  \n  i <- i + 1 #counter for \"i\", increments by 1 with each loop iteration\n} \na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3\n1 1       1       1       1       1\n2 2       2       2       2       2\n3 3       1       1       1       1\n4 4       2       2       2       2"
  },
  {
    "objectID": "Rbasics.html#exercise-5-repeat-loops",
    "href": "Rbasics.html#exercise-5-repeat-loops",
    "title": "4  R Basics Group Exercise",
    "section": "4.6 Exercise 5: repeat loops",
    "text": "4.6 Exercise 5: repeat loops\nHere’s an example repeat loop:\n\ni <- 1\nrepeat {\n  print(paste(\"i =\",i))\n  i <- i + 1\n  if (i > 3) break\n}\n\n[1] \"i = 1\"\n[1] \"i = 2\"\n[1] \"i = 3\"\n\n\nUse a repeat loop to insert into the data frame a a column named rowNum4 that contains a 1 in even rows and a 2 in odd rows.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\na$rowNum4 <- NA\ni <- 1 #set index\nrepeat { \n\n  if ((i %% 2)) { #if statement for when \"i\" is odd\n    a$rowNum4[i] <- 1\n  }\n  else #else statement for when \"i\" is even\n    a$rowNum4[i] <- 2\n  \n  i <- i + 1 #counter for \"i\", increments by 1 with each loop iteration\n  if (i > nrow(a)) {\n    break\n  }\n} \na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4\n1 1       1       1       1       1       1\n2 2       2       2       2       2       2\n3 3       1       1       1       1       1\n4 4       2       2       2       2       2"
  },
  {
    "objectID": "Rbasics.html#exercise-6-using-the-rep-function",
    "href": "Rbasics.html#exercise-6-using-the-rep-function",
    "title": "4  R Basics Group Exercise",
    "section": "4.7 Exercise 6: using the rep function",
    "text": "4.7 Exercise 6: using the rep function\nUse the rep command to insert into the data frame a a column named rowNum5 that contains a 1 in even rows and a 2 in odd rows.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\n# This will only work correctly if nrow(a) is even\na$rowNum5 <- rep(c(1,2), nrow(a)/2)\na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n1 1       1       1       1       1       1       1\n2 2       2       2       2       2       2       2\n3 3       1       1       1       1       1       1\n4 4       2       2       2       2       2       2"
  },
  {
    "objectID": "Rbasics.html#exercise-7",
    "href": "Rbasics.html#exercise-7",
    "title": "4  R Basics Group Exercise",
    "section": "4.8 Exercise 7",
    "text": "4.8 Exercise 7\nList all even rows of the data frame a.\nList rows 3 and 4 of the data frame a.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\n# All even rows\na[a$rowNum1==2,]\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n2 2       2       2       2       2       2       2\n4 4       2       2       2       2       2       2\n\n# All odd rows\na[a$rowNum1==1,]\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n1 1       1       1       1       1       1       1\n3 3       1       1       1       1       1       1"
  },
  {
    "objectID": "Rbasics.html#exercise-8",
    "href": "Rbasics.html#exercise-8",
    "title": "4  R Basics Group Exercise",
    "section": "4.9 Exercise 8",
    "text": "4.9 Exercise 8\n\n\n\n\n\n\nNote\n\n\n\nLearning objective: Learn how to alter the options of an R command to achieve your goals.\n\n\nThis exercise should help answer this question: “When reading a file, will missing data be automatically represented as NA values, or does that need to be coded/manually curated?”\nThe tab-delimited file in testdata.txt contains the following data:\n1       1       1\n2       2       2\n3       NA      99\n4       4       4\nYour collaborator who gave you these data informed you that in this file 99 stands for a missing value, as does NA.\nHowever if we use the read.table command with its default options to read this in, we fail to accomplish the desired task, as 99 is not reading as a missing value:\n\ninfile <- \"data/testdata.txt\"\n# Adjust the read.table options to read the file correctly as desired.\nb <- read.table(infile)\nb\n\n  V1 V2 V3\n1  1  1  1\n2  2  2  2\n3  3 NA 99\n4  4  4  4\n\nstr(b)\n\n'data.frame':   4 obs. of  3 variables:\n $ V1: int  1 2 3 4\n $ V2: int  1 2 NA 4\n $ V3: int  1 2 99 4\n\n\nUse the read.table command to read this file in while automatically setting both the ’NA” and the 99 to NA. This can be done by adjusting the various options of the read.table command.\n\n\n\n\n\n\nTip\n\n\n\nRead the help page for the read.table command\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\nTo read this in properly, we have to let ‘read.table’ know that there is no header and that which values should be mapped to the missing NA value:\n\nb <- read.table(infile, header = FALSE, na.strings = c(\"NA\",\"99\"))\nb\n\n  V1 V2 V3\n1  1  1  1\n2  2  2  2\n3  3 NA NA\n4  4  4  4\n\nstr(b)\n\n'data.frame':   4 obs. of  3 variables:\n $ V1: int  1 2 3 4\n $ V2: int  1 2 NA 4\n $ V3: int  1 2 NA 4\n\nsummary(b)\n\n       V1             V2              V3       \n Min.   :1.00   Min.   :1.000   Min.   :1.000  \n 1st Qu.:1.75   1st Qu.:1.500   1st Qu.:1.500  \n Median :2.50   Median :2.000   Median :2.000  \n Mean   :2.50   Mean   :2.333   Mean   :2.333  \n 3rd Qu.:3.25   3rd Qu.:3.000   3rd Qu.:3.000  \n Max.   :4.00   Max.   :4.000   Max.   :4.000  \n                NA's   :1       NA's   :1"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  Summary",
    "section": "",
    "text": "In summary, this book is a work in progress."
  }
]