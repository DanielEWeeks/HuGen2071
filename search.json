[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HuGen2071 book",
    "section": "",
    "text": "Preface\nThis is a Quarto book created from markdown and executable code using Quarto within RStudio.\nBook web site: https://danieleweeks.github.io/HuGen2071/\nBook source code: https://github.com/DanielEWeeks/HuGen2071\nCreated by Daniel E. Weeks and Jonathan Chernus\nWebsites:\nhttps://www.sph.pitt.edu/directory/daniel-weeks\nhttps://www.sph.pitt.edu/directory/jonathan-chernus\nTo learn more about Quarto books visit https://quarto.org/docs/books/.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "preparation.html",
    "href": "preparation.html",
    "title": "1  Preparation",
    "section": "",
    "text": "1.1 Basic programming ideas",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "preparation.html#basic-programming-ideas",
    "href": "preparation.html#basic-programming-ideas",
    "title": "1  Preparation",
    "section": "",
    "text": "1.1.1 Introduction to Coding\nThis web page and two short videos discusses how computer programming is very similar to writing a recipe - you have to break a complex project down into precise smaller individual steps.\nhttps://subjectguides.york.ac.uk/coding/introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "preparation.html#r",
    "href": "preparation.html#r",
    "title": "1  Preparation",
    "section": "1.2 R",
    "text": "1.2 R\n\n1.2.1 PhD Training Workshop: Statistics in R\nThis online book has a nice introduction to the concepts of programming, RStudio, and R\nhttps://bookdown.org/animestina/R_Manchester/\nSee Chapters 1, 2, and 3",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "preparation.html#r-and-rstudio",
    "href": "preparation.html#r-and-rstudio",
    "title": "1  Preparation",
    "section": "1.3 R and RStudio",
    "text": "1.3 R and RStudio\n\n1.3.1 R for the Rest of Us\nAcquaint or refresh yourself with R and RStudio — including installing them on your computer with this “R for the Rest of Us course” (24 min of videos + exercises):\nhttps://rfortherestofus.com/courses/getting-started/\nSlides: https://rfortherestofus.github.io/getting-started/slides/slides.html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "preparation.html#github",
    "href": "preparation.html#github",
    "title": "1  Preparation",
    "section": "1.4 GitHub",
    "text": "1.4 GitHub\nTo introduce yourself to GitHub:\nhttps://docs.github.com/en/get-started/using-git/about-git\nhttps://docs.github.com/en/get-started/quickstart/hello-world",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "preparation.html#r-markdown",
    "href": "preparation.html#r-markdown",
    "title": "1  Preparation",
    "section": "1.5 R Markdown",
    "text": "1.5 R Markdown\nTo introduce yourself or refresh yourself on R Markdown:\nhttps://rmarkdown.rstudio.com/\nScroll down and click on “Get Started”, which will take you to Lesson 1:\nhttps://rmarkdown.rstudio.com/lesson-1.html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "preparation.html#unix",
    "href": "preparation.html#unix",
    "title": "1  Preparation",
    "section": "1.6 Unix",
    "text": "1.6 Unix\nAnd finally, to introduce yourself or refresh yourself with Unix (well, Linux in this case, but close enough), try Lessons 1–11 here:\nhttps://www.webminal.org/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preparation</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code using Quarto within RStudio.\nBook web site: https://danieleweeks.github.io/HuGen2071/\nBook source code: https://github.com/DanielEWeeks/HuGen2071\nCreated by Daniel E. Weeks and Jonathan Chernus\nWebsites:\nhttps://www.sph.pitt.edu/directory/daniel-weeks\nhttps://www.sph.pitt.edu/directory/jonathan-chernus",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "logistics.html",
    "href": "logistics.html",
    "title": "3  Logistics",
    "section": "",
    "text": "3.1 GitHub: Set up an account\nPlease go to https://github.com and set up a GitHub account.\nChoose your GitHub user name carefully, as you may end up using it later in a professional context.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Logistics</span>"
    ]
  },
  {
    "objectID": "logistics.html#github-classroom",
    "href": "logistics.html#github-classroom",
    "title": "3  Logistics",
    "section": "3.2 GitHub Classroom",
    "text": "3.2 GitHub Classroom\nAs GitHub Classroom will be used to distribute course materials and to submit assignments, it would be best if you get git working on your own computer. The easiest way to do this is to install RStudio, R, and git on your computer.\nPlease follow the detailed instructions in https://github.com/jfiksel/github-classroom-for-students\nIn particular, see Step 5 re generating an ssh key so you don’t need to login every time.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Logistics</span>"
    ]
  },
  {
    "objectID": "Readings.html",
    "href": "Readings.html",
    "title": "4  Active Learning and Readings",
    "section": "",
    "text": "4.1 Introduction and Overview",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#introduction-and-overview",
    "href": "Readings.html#introduction-and-overview",
    "title": "4  Active Learning and Readings",
    "section": "",
    "text": "4.1.1 Learning Objectives\n\nReview the syllabus\nDescribe bioinformatics and genetic/genomic data\nDescribe dbGaP, an important genomic data repository\n\n\n\n4.1.2 Required Reading\nMailman MD, Feolo M, Jin Y, Kimura M, Tryka K, Bagoutdinov R, Hao L, Kiang A, Paschall J, Phan L, Popova N, Pretel S, Ziyabari L, Lee M, Shao Y, Wang ZY, Sirotkin K, Ward M, Kholodov M, Zbicz K, Beck J, Kimelman M, Shevelev S, Preuss D, Yaschenko E, Graeff A, Ostell J, Sherry ST. The NCBI dbGaP database of genotypes and phenotypes. Nat Genet. 2007 Oct;39(10):1181-6. doi: 10.1038/ng1007-1181. PMID: 17898773; PMCID: PMC2031016. https://pubmed.ncbi.nlm.nih.gov/17898773/\n\n\n4.1.3 Suggested Readings\nBarnes (2007) Chapter 1 Carey MA, Papin JA. Ten simple rules for biologists learning to program. PLoS Comput Biol. 2018;14(1):e1005871. https://doi.org/10.1371/journal.pcbi.1005871\nDudley JT, Butte AJ. A quick guide for developing effective bioinformatics programming skills. PLoS Comput Biol. 2009;5(12):e1000589. https://doi.org/10.1371/journal.pcbi.1000589",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#github",
    "href": "Readings.html#github",
    "title": "4  Active Learning and Readings",
    "section": "4.2 GitHub",
    "text": "4.2 GitHub\n\n4.2.1 Learning Objectives\n\nTo learn how to use GitHub\nTo learn how to use GitHub Classroom\nTo learn how to use GitHub within RStudio\n\n\n\n4.2.2 Online Lecture\nGitHub Introduction: https://danieleweeks.github.io/HuGen2071/gitIntro.html\n\n\n4.2.3 Active Learning\nVersion Control with git and GitHub (Sections 4.1 - 4.4): https://learning.nceas.ucsb.edu/2020-11-RRCourse/session-4-version-control-with-git-and-github.html\n\n\n4.2.4 Required Readings\nGitHub Classroom Guide for Students\nTo set up GitHub Classroom, please follow the steps to set up RStudio, R, and git in this detailed guide: https://github.com/jfiksel/github-classroom-for-students\nChoose your GitHub user name carefully, as later in your career you may end up using it in a professional context.\nBe sure to generate an SSH key so you don’t need to enter your password every time you interact with GitHub.\n\n\n\n\n\n\nWarning\n\n\n\nDo not clone your repository onto a OneDrive or other cloud folder, as git does not work properly on cloud drives. Cloud drive systems typically maintain their own backup copies and this confuses git.\n\n\n\n\n4.2.5 Suggested Readings\nHappy Git and GitHub for the useR. https://happygitwithr.com/\nPerez-Riverol Y, Gatto L, Wang R, et al. Ten Simple Rules for Taking Advantage of Git and GitHub. PLoS Comput Biol. 2016;12(7):e1004947. https://doi.org/10.1371/journal.pcbi.1004947\nVersion Control with Git: https://swcarpentry.github.io/git-novice/\nUsing Git from RStudio: https://ucsbcarpentry.github.io/2020-08-10-Summer-GitBash/24-supplemental-rstudio/index.html",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-basics",
    "href": "Readings.html#r-basics",
    "title": "4  Active Learning and Readings",
    "section": "4.3 R: Basics",
    "text": "4.3 R: Basics\n\n4.3.1 Learning Objectives\n\nTo become familiar with the R language and concepts\nTo learn how to read and write data with R\nTo learn control flow: choices and loops\n\n\n\n4.3.2 Online Lectures\nR Basics: https://danieleweeks.github.io/HuGen2071/RBasicsLecture.html\n\n\n4.3.3 Active Learning:\nhttps://datacarpentry.org/genomics-r-intro/01-r-basics.html\n\n\n4.3.4 Suggested Readings\nBuffalo (2015) Chapter 8 ‘R Language Basics’ (Available online through PittCat+)\nRead the first four sections, up to the end of ‘Vectors, Vectorization, and Indexing’\nhttps://pitt.primo.exlibrisgroup.com/permalink/01PITT_INST/i25aoe/cdi_askewsholts_vlebooks_9781449367510\nhttps://datacarpentry.org/R-genomics/01-intro-to-R.html\nSupplementary Reading: Spector (2008) Chapters 1 & 2 (Available online through PittCat+; link in syllabus)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-factors-dates-subscripting",
    "href": "Readings.html#r-factors-dates-subscripting",
    "title": "4  Active Learning and Readings",
    "section": "4.4 R: Factors, Dates, Subscripting",
    "text": "4.4 R: Factors, Dates, Subscripting\n\n4.4.1 Learning Objectives\n\nTo learn how to subset data with R\nTo learn how to handle factors and dates with R\nTo learn how to manipulate characters with R\n\n\n\n4.4.2 Online Lecture\nR: factors, subscripting: https://danieleweeks.github.io/HuGen2071/RFactors.html\n\n\n4.4.3 Active Learning:\nSubsetting: https://swcarpentry.github.io/r-novice-gapminder/06-data-subsetting.html. This uses the gapminder data from here.\nFactors: https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html. This uses data from this Zip file.\n\n\n4.4.4 Suggested Readings\nBuffalo (2015) Chapter 8 ‘R Language Basics’ (Available online through PittCat+)\nRead the ‘Factors and classes in R’ subsection at the end of the ‘Vectors, Vectorization, and Indexing’ section.\nRead the ‘Exploring Data Through Slicing and Dicing: Subsetting Dataframes’ section.\nRead the ‘Working with Strings’ section.\nhttps://pitt.primo.exlibrisgroup.com/permalink/01PITT_INST/i25aoe/cdi_askewsholts_vlebooks_9781449367510\nhttps://datacarpentry.org/R-ecology-lesson/02-starting-with-data.html\nSupplementary Readings: Spector (2008) Chapters 4, 5, 6",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-character-manipulation",
    "href": "Readings.html#r-character-manipulation",
    "title": "4  Active Learning and Readings",
    "section": "4.5 R: Character Manipulation",
    "text": "4.5 R: Character Manipulation\n\n4.5.1 Learning Objectives\n\nTo learn how to handle character data in R\nTo learn how to use regular expressions in R\n\n\n\n4.5.2 Active Learning\nRegular expressions: https://csiro-data-school.github.io/regex/08-r-regexs/index.html\n\n\n4.5.3 Required Readings\nRead the chapter on “Strings” in “R for Data Science”: https://r4ds.hadley.nz/strings\n\n\n4.5.4 Suggested Readings\nSee the “String manipulation with stringr cheatsheet” at https://rstudio.github.io/cheatsheets/html/strings.html\nBuffalo (2015) Chapter 8 ‘R Language Basics’ (Available online through PittCat+)\nRead the ‘Working with Strings’ section at the end of the “Working with and Visualizing Data in R” section.\nhttps://pitt.primo.exlibrisgroup.com/permalink/01PITT_INST/i25aoe/cdi_askewsholts_vlebooks_9781449367510\nRead the chapter on “Strings” in “R for Data Science”: https://r4ds.hadley.nz/strings\nRead the chapter on “Regular expressions” in “R for Data Science”: https://r4ds.hadley.nz/regexps\nSupplementary Reading: Spector (2008) Chapter 7",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-loops-and-flow-control",
    "href": "Readings.html#r-loops-and-flow-control",
    "title": "4  Active Learning and Readings",
    "section": "4.6 R: Loops and Flow Control",
    "text": "4.6 R: Loops and Flow Control\n\n4.6.1 Learning Objectives\n\nTo learn how to implement loops in R\nTo learn how to control flow in R\nTo learn how to vectorize operations\n\n\n\n4.6.2 Online Lectures\nLoops in R: https://danieleweeks.github.io/HuGen2071/RLoops.html\n\n\n4.6.3 Active Learning:\nFlow control and loops: https://swcarpentry.github.io/r-novice-gapminder/07-control-flow.html\nLoops in R, Part I: https://danieleweeks.github.io/HuGen2071/loops.html\nVectorization: https://swcarpentry.github.io/r-novice-gapminder/09-vectorization.html",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-functions-and-packages-debugging-r",
    "href": "Readings.html#r-functions-and-packages-debugging-r",
    "title": "4  Active Learning and Readings",
    "section": "4.7 R: Functions and Packages, Debugging R",
    "text": "4.7 R: Functions and Packages, Debugging R\n\n4.7.1 Learning Objectives\n\nTo learn how to write R functions and packages\nTo learn how to debug R code\n\n\n\n4.7.2 Active Learning:\nhttps://swcarpentry.github.io/r-novice-gapminder/10-functions.html\n\n\n4.7.3 Suggested Readings\nFunctions Explained: https://swcarpentry.github.io/r-novice-gapminder/10-functions.html\nBuffalo (2015) Chapter 8: Read the section ‘Digression: Debugging R Code’",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-tidyverse",
    "href": "Readings.html#r-tidyverse",
    "title": "4  Active Learning and Readings",
    "section": "4.8 R: Tidyverse",
    "text": "4.8 R: Tidyverse\n\n4.8.1 Learning Objectives\n\nTo learn how to use the pipe operator\nTo learn how to use Tidyverse functions\n\n\n\n4.8.2 Active Learning:\nhttps://datacarpentry.org/genomics-r-intro/05-dplyr.html\nThe data file used in this is the combined_tidy_vcf.csv file that can be downloaded from here.\n\n\n4.8.3 Suggested Readings\nIntroduction to the Tidyverse: Manipulating tibbles with dplyr https://uomresearchit.github.io/r-day-workshop/04-dplyr/\nSupplementary Reading: Buffalo (2015) Chapter 8: section ‘Exploring Dataframes with dplyr’",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-recoding-and-reshaping-data",
    "href": "Readings.html#r-recoding-and-reshaping-data",
    "title": "4  Active Learning and Readings",
    "section": "4.9 R: Recoding and Reshaping Data",
    "text": "4.9 R: Recoding and Reshaping Data\n\n4.9.1 Learning Objectives\n\nTo learn how to reformat and reshape data in R\n\n\n\n4.9.2 Active Learning:\nReshaping data https://sscc.wisc.edu/sscc/pubs/dwr/reshape-tidy.html\nRecoding data: Pay particular attention to the Recoding values and Creating new variables sections\nhttps://librarycarpentry.org/lc-r/03-data-cleaning-and-transformation.html\n\n\n4.9.3 Suggested Readings\nSupplementary Reading: Spector (2008) Chapters 8 & 9",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-merging-data",
    "href": "Readings.html#r-merging-data",
    "title": "4  Active Learning and Readings",
    "section": "4.10 R: Merging Data",
    "text": "4.10 R: Merging Data\n\n4.10.1 Learning Objectives\n\nTo learn how to use the R ‘merge’ command\nTo learn how to use the R Tidyverse join commands\n\n\n\n4.10.2 Active Learning:\nhttps://mikoontz.github.io/data-carpentry-week/lesson_joins.html\ncontinents.RDA data set used near the end of this Active Learning exercise: https://mikoontz.github.io/data-carpentry-week/data/continents.RDA\n\n\n4.10.3 Required Reading\nTidy Animated Verbs https://www.garrickadenbuie.com/project/tidyexplain/\n\n\n4.10.4 Suggested Readings\nhttps://mikoontz.github.io/data-carpentry-week/lesson_joins.html#practice_with_joins_using_gapminder\nSupplementary Reading: Buffalo (2015) Chapter 8 ‘Merging and Combining Data’. Spector (2008) Chapter 9.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-traditional-graphics-advanced-graphics",
    "href": "Readings.html#r-traditional-graphics-advanced-graphics",
    "title": "4  Active Learning and Readings",
    "section": "4.11 R: Traditional Graphics & Advanced Graphics",
    "text": "4.11 R: Traditional Graphics & Advanced Graphics\n\n4.11.1 Learning Objectives\n\nTo learn the basic graphics commands of R\nTo learn the R graphing package ggplot2\n\n\n\n4.11.2 Active Learning:\nData visualization with ggplot2: https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html\nTo create the required data for this “Data visualization with ggplot2” exercise, run this code:\nlibrary(tidyverse)\ndownload.file(url = \"https://ndownloader.figshare.com/files/2292169\",\n              destfile = \"portal_data_joined.csv\")\nsurveys &lt;- read_csv(\"portal_data_joined.csv\")              \nsurveys_complete &lt;- surveys %&gt;%\n  filter(!is.na(weight),           # remove missing weight\n         !is.na(hindfoot_length),  # remove missing hindfoot_length\n         !is.na(sex))\n\n\n4.11.3 Suggested Readings\nPlotting with ggplot2 https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html\nSupplementary Reading: Wickham (2009) Chapters 2 & 3",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-exploratory-data-analysis",
    "href": "Readings.html#r-exploratory-data-analysis",
    "title": "4  Active Learning and Readings",
    "section": "4.12 R: Exploratory Data Analysis",
    "text": "4.12 R: Exploratory Data Analysis\n\n4.12.1 Learning Objectives\n\nTo learn how to summarize data frames\nTo learn how to visualize missing data patterns\nTo learn how to visualize covariation\n\n\n\n4.12.2 Active Learning\nExploratory analysis of RNAseq count data https://tavareshugo.github.io/data-carpentry-rnaseq/02_rnaseq_exploratory.html\n\n\n4.12.3 Readings\nMissing value visualization with tidyverse in R https://towardsdatascience.com/missing-value-visualization-with-tidyverse-in-r-a9b0fefd2246\nSuggested Reading: Buffalo (2015) Chapter 8 Sections: Exploring Data Visually with ggplot2 I: Scatterplots and Densities Exploring Data Visually with ggplot2 II: Smoothing Binning Data with cut() and Bar Plots with ggplot2 Using ggplot2 Facets.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#r-genomic-ranges-interactive-graphics",
    "href": "Readings.html#r-genomic-ranges-interactive-graphics",
    "title": "4  Active Learning and Readings",
    "section": "4.13 R: Genomic Ranges; Interactive Graphics",
    "text": "4.13 R: Genomic Ranges; Interactive Graphics\n\n4.13.1 Learning Objectives - Genomic Ranges\n\nTo learn about Genomic Ranges\nTo learn to use Genomic Ranges to annotate SNPs of interest\n\n\n\n4.13.2 Preparation - Genomic Ranges\nBefore class, install these BioConductor packages: (1) TxDb.Hsapiens.UCSC.hg19.knownGene, and (2) org.Hs.eg.db\nTo install these, use these commands:\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"TxDb.Hsapiens.UCSC.hg19.knownGene\")\n\nBiocManager::install(\"org.Hs.eg.db\")\n\n\n4.13.3 Required Reading - Genomic Ranges\nAn Introduction to Bioconductor’s Packages for Working with Range Data\nhttps://github.com/vsbuffalo/genomicranges-intro/blob/master/notes.md\n\n\n4.13.4 Active Learning - Genomic Ranges\nWorking with genomics ranges\nhttps://carpentries-incubator.github.io/bioc-project/07-genomic-ranges.html\n\n\n4.13.5 Suggested Readings - Genomic Ranges\nIn “Bioinformatics Data Skills”, see Chapter 9 “Working with Range Data”\nBioinformatics Data Skills\nEditor: Vince Buffalo\nPublisher: O’Reilly\nWeb access: link\nHello Ranges: An Introduction to Analyzing Genomic Ranges in R.\nlink\n\n\n4.13.6 Learning Objectives - Interactive Graphics\n\nTo learn how to use interactive and dynamic graphics to explore your data more thoroughly\nTo learn to use plotly\n\n\n\n4.13.7 Required Reading - Interactive Graphics\nCreate interactive ggplot2 graphs with plotly https://www.littlemissdata.com/blog/interactiveplots",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#suggested-reading---interactive-graphics",
    "href": "Readings.html#suggested-reading---interactive-graphics",
    "title": "4  Active Learning and Readings",
    "section": "4.14 Suggested Reading - Interactive Graphics",
    "text": "4.14 Suggested Reading - Interactive Graphics\nWickham (2009) Chapters 2 & 3",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#data-quality-checking-and-filters",
    "href": "Readings.html#data-quality-checking-and-filters",
    "title": "4  Active Learning and Readings",
    "section": "4.15 Data Quality Checking and Filters",
    "text": "4.15 Data Quality Checking and Filters\n\n4.15.1 Learning Objectives\n\nTo learn the principles of data cleaning\nTo practice applying data cleaning principles\nTo learn how to check genotype data for quality\n\n\n\n4.15.2 Active Learning\nTo see an example of quality control for SNP genotyping using Illumina genotyping microarrays, please read through this example report:\nhttps://khp-informatics.github.io/COPILOT/README_summary_report.html\nFor more details, see this Current Protocols paper, which is long and detailed, but you can get most of the main points by concentrating on the Figures:\nPatel H, Lee S-H, Breen G, Menzel S, Ojewunmi O, Dobson RJB. The COPILOT Raw Illumina Genotyping QC Protocol. Current Protocols. 2022;2(4):e373. PMID: 35452565 DOI: https://doi.org/10.1002/cpz1.373\n\n\n4.15.3 Suggested Readings\nKässens JC, Wienbrandt L, Ellinghaus D. BIGwas: Single-command quality control and association testing for multi-cohort and biobank-scale GWAS/PheWAS data. GigaScience. 2021 Jun 1;10(6):giab047. PMID: 34184051 PMCID: PMC8239664 DOI: https://doi.org/10.1093/gigascience/giab047\nBrandenburg J-T, Clark L, Botha G, Panji S, Baichoo S, Fields C, Hazelhurst S. H3AGWAS: a portable workflow for genome wide association studies. BMC Bioinformatics. 2022 Nov 19;23(1):498. PMID: 36402955 PMCID: PMC9675212 DOI: https://doi.org/10.1186/s12859-022-05034-w\nAnderson CA, Pettersson FH, Clarke GM, Cardon LR, Morris AP, Zondervan KT. Data quality control in genetic case-control association studies. Nat Protoc. 2010 Sep;5(9):1564–1573. DOI: https://doi.org/10.1038/nprot.2010.116\nLaurie CC, Doheny KF, Mirel DB, Pugh EW, Bierut LJ, Bhangale T, Boehm F, Caporaso NE, Cornelis MC, Edenberg HJ, Gabriel SB, Harris EL, Hu FB, Jacobs KB, Kraft P, Landi MT, Lumley T, Manolio TA, McHugh C, Painter I, Paschall J, Rice JP, Rice KM, Zheng X, Weir BS, GENEVA Investigators. Quality control and quality assurance in genotypic data for genome-wide association studies. Genetic epidemiology. 2010 Sep;34(6):591–602. PMID: 20718045 DOI: https://doi.org/10.1002/gepi.20516",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#unix-basics",
    "href": "Readings.html#unix-basics",
    "title": "4  Active Learning and Readings",
    "section": "4.16 Unix: Basics",
    "text": "4.16 Unix: Basics\n\n4.16.1 Learning Objectives - Unix: Basics\n\nTo learn basic Unix commands\n\n\n\n4.16.2 Preparation - Unix: Basics\n\nDo the Active Learning before class - the lecture will assume you have; otherwise you will have difficulty with the in-class exercises\nMake sure you’ve done the Unix setup homework assignment; for the in-class exercises you will need to connect to htc and use git there\n\n\n\n4.16.3 Active Learning - Unix: Basics\nSoftware Carpentry Unix Shell intro parts 1-3 https://swcarpentry.github.io/shell-novice/\n\n\n4.16.4 Required Reading - Unix: Basics\nSee Active Learning.\n\n\n4.16.5 Suggested Reading - Unix: Basics\nBuffalo (2015) Chapter 2. Setting up and managing a bioinformatics project.\nBuffalo (2015)Chapter 3. Remedial Unix Shell (beginning of chapter up to and not including “working with streams and redirection”)\nTerminus, a web-based game for learning and practicing basic Unix commands https://web.mit.edu/mprat/Public/web/Terminus/Web/main.html\n“Chapter 43: Redirecting Input and Output” in Unix Power Tools, 3rd Edition by Jerry Peek, Shelley Powers, Tim O’Reilly, Mike Loukides. Published by O’Reilly Media, Inc. https://pitt.primo.exlibrisgroup.com/permalink/01PITT_INST/e8h8hp/alma9998520758606236",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#unix-streams-pipes-scripts",
    "href": "Readings.html#unix-streams-pipes-scripts",
    "title": "4  Active Learning and Readings",
    "section": "4.17 Unix: Streams, Pipes, Scripts",
    "text": "4.17 Unix: Streams, Pipes, Scripts\n\n4.17.1 Learning Objectives - Unix: Streams, Pipes, Scripts\n\nTo learn how streams operate in Unix\nTo learn out to pass streamed data from program to program in Unix\nTo learn how to interact with running processes\nTo learn how to write a script that can run in Unix\nTo learn about the cluster and how to submit jobs there\n\n\n\n4.17.2 Preparation - Unix: Streams, Pipes, Scripts\n\nDo the Active Learning before class - the lecture will assume you have; otherwise you will have difficulty with the in-class exercises\n\n\n\n4.17.3 Active Learning - Unix: Streams, Pipes, Scripts\nSoftware Carpentry Unix Shell intro parts 4 and 6 https://swcarpentry.github.io/shell-novice/\n\n\n4.17.4 Required Reading - Unix: Streams, Pipes, Scripts\nSee Active Learning.\n\n\n4.17.5 Suggested Reading - Unix: Streams, Pipes, Scripts\nBuffalo (2015)Chapter 3. Remedial Unix Shell (from “working with streams and redirection” to and not including “command substitution”)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#genetic-data-structures",
    "href": "Readings.html#genetic-data-structures",
    "title": "4  Active Learning and Readings",
    "section": "4.18 Genetic Data Structures",
    "text": "4.18 Genetic Data Structures\n\n4.18.1 Learning Objectives\n\nTo learn about what genetic data is stored and principles for storing it\n\n\n\n4.18.2 Readings\nIntroduction to PLINK (22n14-rlm-Introduction_to_PLINK.pdf, included in this lecture’s folder)\nBennett RL, Steinhaus KA, Uhrich SB, O’Sullivan CK, Resta RG, Lochner-Doyle D, Markel DS, Vincent V, Hamanishi J. Recommendations for standardized human pedigree nomenclature. J Genet Couns. 1995 Dec;4(4):267-79. https://doi.org/10.1007/BF01408073. PMID: 24234481.\nBennett RL, French KS, Resta RG, Doyle DL. Standardized human pedigree nomenclature: update and assessment of the recommendations of the National Society of Genetic Counselors. J Genet Couns. 2008 Oct;17(5):424-33. https://doi.org/10.1007/s10897-008-9169-9. Epub 2008 Sep 16. PMID: 18792771.\nBennett RL, French KS, Resta RG, Austin J. Practice resource-focused revision: Standardized pedigree nomenclature update centered on sex and gender inclusivity: A practice resource of the National Society of Genetic Counselors. J Genet Couns. 2022 Sep 15. https://doi.org/10.1002/jgc4.1621. Epub ahead of print. PMID: 36106433.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#plink-i",
    "href": "Readings.html#plink-i",
    "title": "4  Active Learning and Readings",
    "section": "4.19 PLINK I",
    "text": "4.19 PLINK I\n\n4.19.1 Learning Objectives\n\nDescribe PLINK formats\nCreate PLINK datafiles\nUse PLINK to perform genetic association testing\n\n\n\n4.19.2 Readings\nMarees AT, de Kluiver H, Stringer S, Vorspan F, Curis E, Marie-Claire C, Derks EM. A tutorial on conducting genome-wide association studies: Quality control and statistical analysis. Int J Methods Psychiatr Res. 2018 Jun;27(2):e1608. PMID: 29484742 PMCID: PMC6001694 DOI: https://doi.org/10.1002/mpr.1608\nhttps://github.com/MareesAT/GWA_tutorial/",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#plink-ii",
    "href": "Readings.html#plink-ii",
    "title": "4  Active Learning and Readings",
    "section": "4.20 PLINK II",
    "text": "4.20 PLINK II\n\n4.20.1 Learning Objectives\n\nTo learn how to use PLINK to manipulate data files",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#plink-computer-lab",
    "href": "Readings.html#plink-computer-lab",
    "title": "4  Active Learning and Readings",
    "section": "4.21 PLINK Computer Lab",
    "text": "4.21 PLINK Computer Lab\n\n4.21.1 Learning Objectives\n\nTo practice using PLINK to manipulate data files",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#unix-data-manipulation",
    "href": "Readings.html#unix-data-manipulation",
    "title": "4  Active Learning and Readings",
    "section": "4.22 Unix: Data Manipulation",
    "text": "4.22 Unix: Data Manipulation\n\n4.22.1 Learning Objectives - Unix: Data Manipulation\n\nTo learn Unix tools like sed and awk that can be used to manipulate data\n\n\n\n4.22.2 Preparation - Unix: Data Manipulation\nSee Required Reading.\n\n\n4.22.3 Active Learning - Unix: Data Manipulation\nSee Required Reading.\n\n\n4.22.4 Required Reading - Unix: Data Manipulation\nBuffalo (2015)Chapter 7. Unix Data Tools (Beginning of chapter up to and including “Finding Unique values in Uniq”)\n\n\n4.22.5 Suggested Reading - Unix: Data Manipulation\nNone.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#unix-miscellaneous",
    "href": "Readings.html#unix-miscellaneous",
    "title": "4  Active Learning and Readings",
    "section": "4.23 Unix: Miscellaneous",
    "text": "4.23 Unix: Miscellaneous\n\n4.23.1 Learning Objectives - Unix: Miscellaneous\n\nTo learn to string programs together to process data\nTo learn how to parallelize functions in Unix\n\n\n\n4.23.2 Preparation - Unix: Miscellaneous\nSee Required Reading.\n\n\n4.23.3 Active Learning - Unix: Miscellaneous\nSee Required Reading.\n\n\n4.23.4 Required Reading - Unix: Miscellaneous\nBuffalo (2015)Chapter 7. Unix Data Tools (“Join” through the end of the chapter)\n\n\n4.23.5 Suggested Reading - Unix: Miscellaneous\nNone.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#unix-scripting",
    "href": "Readings.html#unix-scripting",
    "title": "4  Active Learning and Readings",
    "section": "4.24 Unix: Scripting",
    "text": "4.24 Unix: Scripting\n\n4.24.1 Learning Objectives - Unix: Scripting\n\nTo learn how to use control structures in Unix scripting\nTo learning how to use variables in Unix\n\n\n\n4.24.2 Preparation - Unix: Scripting\n\nDo the Active Learning before class - the lecture will assume you have; otherwise you will have difficulty with the in-class exercises\n\n\n\n4.24.3 Active Learning - Unix: Scripting\nSoftware Carpentry Unix Shell intro parts 5 and 7 https://swcarpentry.github.io/shell-novice/\n\n\n4.24.4 Required Reading - Unix: Scripting\nSee Active Learning.\n\n\n4.24.5 Suggested Reading - Unix: Scripting\nBuffalo (2015)Chapter 3. Remedial Unix Shell (“command substitution” through the end of the chapter.)\nBuffalo (2015)Chapter 12. Bioinformatics Shell Scripting (entire chapter)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#vcf-bcftools-vcftools",
    "href": "Readings.html#vcf-bcftools-vcftools",
    "title": "4  Active Learning and Readings",
    "section": "4.25 VCF, bcftools, vcftools",
    "text": "4.25 VCF, bcftools, vcftools\n\n4.25.1 Learning Objectives\n\nTo learn about VCF data format\nTo learn about bcftools and vcftools for manipulating VCF files",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#sam-samtools",
    "href": "Readings.html#sam-samtools",
    "title": "4  Active Learning and Readings",
    "section": "4.26 SAM & samtools",
    "text": "4.26 SAM & samtools\n\n4.26.1 Learning Objectives\n\nTo learn about SAM data format for sequence data\nTo learn about samtools to manipulate SAM data files\n\n\n\n4.26.2 Readings\nBuffalo Chapter 11 “Working with Alignment Data”\nData Wrangling and Processing for Genomics https://data-lessons.github.io/wrangling-genomics/\nRelevant links: The Sequence Alignment/Map Format Specification http://samtools.github.io/hts-specs/",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "Readings.html#genetic-data-in-r-gds",
    "href": "Readings.html#genetic-data-in-r-gds",
    "title": "4  Active Learning and Readings",
    "section": "4.27 Genetic Data in R, GDS",
    "text": "4.27 Genetic Data in R, GDS\n\n4.27.1 Learning Objectives - Genetic Data in R, GDS\n\nTo learn about data structures in R for storing genetic data\nTo learn about the GDS format\n\n\n\n4.27.2 Preparation - Genetic Data in R, GDS\nSee Required Reading.\n\n\n4.27.3 Active Learning - Genetic Data in R, GDS\nNone. See Required Reading.\n\n\n4.27.4 Required Reading - Genetic Data in R, GDS\nZheng X, Gogarten SM, Lawrence M, Stilp A, Conomos MP, Weir BS, Laurie C, Levine D. SeqArray-a storage-efficient high-performance data format for WGS variant calls. Bioinformatics. 2017 Aug 1;33(15):2251-2257. doi: 10.1093/bioinformatics/btx145. PMID: 28334390; PMCID: PMC5860110. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5860110/\n\n\n4.27.5 Suggested Reading - Genetic Data in R, GDS\nNone",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Active Learning and Readings</span>"
    ]
  },
  {
    "objectID": "gitIntro.html",
    "href": "gitIntro.html",
    "title": "5  GitHub",
    "section": "",
    "text": "5.1 GitHub Introduction lecture\nHere’s a recording of this lecture (32 minutes 8 seconds):\nRecording",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>GitHub</span>"
    ]
  },
  {
    "objectID": "gitIntro.html#github-introduction-slides",
    "href": "gitIntro.html#github-introduction-slides",
    "title": "5  GitHub",
    "section": "5.2 GitHub Introduction slides",
    "text": "5.2 GitHub Introduction slides\nPDF slide set",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>GitHub</span>"
    ]
  },
  {
    "objectID": "gitIntro.html#questions",
    "href": "gitIntro.html#questions",
    "title": "5  GitHub",
    "section": "5.3 Questions",
    "text": "5.3 Questions\n\n5.3.1 Question 1\nWhich of the following benefits does version control offer over emailing files back and forth?\nPlease select the correct options (more than one may be correct).\n\n It provides a complete history of file changes, including who made them and when It eliminates the need for collaboration on projects It prevents accidental overwrites and lost files It automatically detects and resolves all conflicts between users It makes it easy to revert to previous versions of files\n\n\n\n5.3.2 Question 2\nWhich Git command is used to obtain a complete copy of a remote repository for the first time?\nPlease select the correct option.\n\n git pull git fetch git clone git push\n\n\n\n5.3.3 Question 3\nWhich of the following Git workflows is generally considered best practice for efficient and collaborative development?\nPlease select the correct option.\n\n Pull, commit, push Pull, work, commit, pull, push Commit, push, pull Pull, work, commit, push\n\n\n\n5.3.4 Question 4\nWhat typically causes a Git conflict?\nPlease select the correct option.\n\n When two people make different changes to the same line in a file When you forget to commit your changes before pushing to a remote repository When you accidentally delete a file from your local repository When you try to merge two completely unrelated projects",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>GitHub</span>"
    ]
  },
  {
    "objectID": "Git_commands.html",
    "href": "Git_commands.html",
    "title": "6  Git Commands",
    "section": "",
    "text": "6.1 git - best practices\npull - work - commit - pull - push\nPay attention to any error messages.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git Commands</span>"
    ]
  },
  {
    "objectID": "Git_commands.html#git---best-practices",
    "href": "Git_commands.html#git---best-practices",
    "title": "6  Git Commands",
    "section": "",
    "text": "git pull\nMake changes\ngit commit your changes to your local repository\ngit pull the latest remote changes to your local repository\ngit push your changes.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git Commands</span>"
    ]
  },
  {
    "objectID": "Git_commands.html#outline-of-essential-git-commands",
    "href": "Git_commands.html#outline-of-essential-git-commands",
    "title": "6  Git Commands",
    "section": "6.2 Outline of essential Git commands",
    "text": "6.2 Outline of essential Git commands\nHere’s an outline of essential Git commands, initially created by ChatGPT:\n\n6.2.1 Initialization and Configuration\n\ngit init: Initializes a new Git repository in the current directory.\ngit config: Configure Git settings.\n\n\n\n6.2.2 Basic Workflow\n\ngit add: Stage changes.\ngit commit -m \"message\": Commits staged changes with a descriptive message.\n\n\n\n6.2.3 Remote Repositories\n\ngit clone: Clones a remote repository to your local machine.\ngit push: Send local changes to remote repository.\ngit pull: Retrieve changes from remote.\ngit remote: Manage remote repositories.\n\n\n\n6.2.4 Status and Changes\n\ngit status: Shows the current state of your working directory.\ngit diff: Displays changes between working directory and the last commit.\n\n\n\n6.2.5 History and Logs\n\ngit log: View commit history.\ngit log --oneline: Compact commit history.\n\n\n\n6.2.6 Ignoring Files\n\nCreate .gitignore file.\n\n\n\n6.2.7 Branching\n\ngit branch: List/create branches.\ngit checkout: Switch branches.\ngit merge: Merge branches.\n\n\n\n6.2.8 Undoing Changes\n\ngit reset: Unstage or reset changes.\ngit revert: Create undoing commits.\n\n\n\n6.2.9 Tagging\n\ngit tag: Create and manage tags.\n\n\n\n6.2.10 Stashing\n\ngit stash: Temporarily store changes.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Git Commands</span>"
    ]
  },
  {
    "objectID": "RBasicsLecture.html",
    "href": "RBasicsLecture.html",
    "title": "7  Lecture: R Basics",
    "section": "",
    "text": "7.1 R Basics lecture\nHere’s a recording of this lecture (48 minutes 14 seconds):\nRecording",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Lecture: R Basics</span>"
    ]
  },
  {
    "objectID": "RBasicsLecture.html#r-basics-slides",
    "href": "RBasicsLecture.html#r-basics-slides",
    "title": "7  Lecture: R Basics",
    "section": "7.2 R Basics slides",
    "text": "7.2 R Basics slides\nPDF slide set",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Lecture: R Basics</span>"
    ]
  },
  {
    "objectID": "RBasicsLecture.html#questions",
    "href": "RBasicsLecture.html#questions",
    "title": "7  Lecture: R Basics",
    "section": "7.3 Questions",
    "text": "7.3 Questions\n\n7.3.1 Question 1\nWhat does a &lt;- 9; a &lt; - 9 do?\n\n TRUE 9 FALSE -9\n\n\n\n7.3.2 Question 2\nGiven a vector x of length 10, which of the following R code snippets would remove the third element from the vector and assign the result to a new vector y? More than one option may be correct.\n\n y &lt;- x[-3] y &lt;- x[3] &lt;- NULL y &lt;- x[c(1:2, 4:10)] y &lt;- x[1:2, 4:10]\n\n\n\n7.3.3 Question 3\nGiven the following vector:\nx &lt;- c(a = 1, b = 2, c = 3)\nWhich of the following R code snippets will extract only the element corresponding to the name “b”?\n\n x[2] x[“b”] x[x == “b”] x[x &gt; 1]\n\n\n\n7.3.4 Question 4\nGiven the following R code:\nx &lt;- 1:6\ndim(x) &lt;- c(2, 3)\nWhich of the following options correctly extracts the second column of the matrix x as a column vector?\n\n x[2, ] x[, 2] x[2] x[, 2, drop = FALSE]\n\n\n\n7.3.5 Question 5\nWhich of the following statements are true about data frames in R?\n\n A data frame is a type of list where all elements must be of the same data type. A data frame is a list where elements can be of different data types. A data frame is a matrix where elements must be of the same data type. A data frame is a list where all elements of the list must be of the same length.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Lecture: R Basics</span>"
    ]
  },
  {
    "objectID": "Rbasics.html",
    "href": "Rbasics.html",
    "title": "8  R Basics Group Exercise",
    "section": "",
    "text": "8.1 Question: Recycling in a dataframe\nSuppose you have a dataframe df with three columns, A, B, and C, as follows:\ndf &lt;- data.frame(\nA = c(1, 2, 3, 4),\nB = c(5, 6, 7, 8),\nC = c(9, 10, 11, 12)\n)\ndf\n\n  A B  C\n1 1 5  9\n2 2 6 10\n3 3 7 11\n4 4 8 12\nNow, you want to insert a shorter vector D into the df dataframe:\ndf$D &lt;- c(13,14)\nWhat will be the D column of df after the operation?\nPlease select the correct option.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#question-recycling-in-a-dataframe",
    "href": "Rbasics.html#question-recycling-in-a-dataframe",
    "title": "8  R Basics Group Exercise",
    "section": "",
    "text": "c(13, 14, NA, NA) c(13, 14, 11, 12) c(13, 14, 13, 14) c(13, 14)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-1-recycling",
    "href": "Rbasics.html#exercise-1-recycling",
    "title": "8  R Basics Group Exercise",
    "section": "8.2 Exercise 1: recycling",
    "text": "8.2 Exercise 1: recycling\nThis exercise should help answer this question: ‘In what type of situations would “recycling” be useful?’\nFirst, let’s set up the data frame a\n\na &lt;- data.frame(n = 1:4)\ndim(a)\n\n[1] 4 1\n\na\n\n  n\n1 1\n2 2\n3 3\n4 4\n\n\n\n\n\n\n\n\nTask\n\n\n\nUse recycling to insert into the data frame a a column named rowNum1 that contains a 1 in odd rows and a 2 in even rows.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIf the following WebR chunk is working properly, you should see an editor window below the Run code tab displaying this line of R code: (a &lt;- data.frame(n = 1:4)).\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nThe R command\na$rowNum1 &lt;- NA\nwould insert a new row into the data frame a full of NA values.\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\na$rowNum1 &lt;- c(1,2)\na\n\n  n rowNum1\n1 1       1\n2 2       2\n3 3       1\n4 4       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#question-vector-addition-and-recycling",
    "href": "Rbasics.html#question-vector-addition-and-recycling",
    "title": "8  R Basics Group Exercise",
    "section": "8.3 Question: Vector addition and recycling",
    "text": "8.3 Question: Vector addition and recycling\nSuppose you have two vectors in R:\nVector A: c(1, 2, 3)\nVector B: c(4, 5)\nIf you perform the operation A + B, what will be the result of vector recycling?\n\n c(5, 7, 3) c(5, 7, 8) c(5, 7, 7) c(5, 5, 3)\n\nPlease select the correct option.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-2-vector-addition",
    "href": "Rbasics.html#exercise-2-vector-addition",
    "title": "8  R Basics Group Exercise",
    "section": "8.4 Exercise 2: vector addition",
    "text": "8.4 Exercise 2: vector addition\n\n\n\n\n\n\nTask\n\n\n\nUse vector addition to construct a vector of length 4 that contains a 1 in odd positions and a 2 in even positions. Then insert this vector into the data frame a into a column named rowNum6.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nWhat vector could you add to this vector so the sum is the vector (1, 2, 1, 2)?\n\nrep(1, 4)\n\n[1] 1 1 1 1\n\n\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\nr1 &lt;- rep(1, times = 4)\nr2 &lt;- rep(c(0,1), times = 2)\nr1\n\n[1] 1 1 1 1\n\nr2\n\n[1] 0 1 0 1\n\nr1 + r2\n\n[1] 1 2 1 2\n\na$rowNum6 &lt;- r1 + r2\na\n\n  n rowNum1 rowNum6\n1 1       1       1\n2 2       2       2\n3 3       1       1\n4 4       2       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-3-for-loops",
    "href": "Rbasics.html#exercise-3-for-loops",
    "title": "8  R Basics Group Exercise",
    "section": "8.5 Exercise 3: for loops",
    "text": "8.5 Exercise 3: for loops\nLoops allow you to repeat actions on each item from a vector of items.\nHere is an example for loop, iterating through the values of i from 1 to 3:\n\nfor (i in 1:3) {\n  print(paste(\"i =\",i))\n}\n\n[1] \"i = 1\"\n[1] \"i = 2\"\n[1] \"i = 3\"\n\n\nThis does the same thing as this repetitive code:\n\ni.vector &lt;- c(1,2,3)\ni &lt;- i.vector[1]\nprint(paste(\"i =\",i))\n\n[1] \"i = 1\"\n\ni &lt;- i.vector[2]\nprint(paste(\"i =\",i))\n\n[1] \"i = 2\"\n\ni &lt;- i.vector[3]\nprint(paste(\"i =\",i))\n\n[1] \"i = 3\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you know in advance how many loops you’ll need, use a for loop.\n\n\n\n\n\n\n\n\nTask\n\n\n\nUse a for loop to insert into the data frame a a column named rowNum2 that contains a 1 in odd rows and a 2 in even rows.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nThink about how as i increments from 1 to nrow(a), how could we map that sequence (e.g. 1, 2, 3, 4) to the desired sequence of 1, 2, 1, 2.\nAn if statement might be useful here.\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\n# Set value that we want to iterate 1, 2, 1, 2, ...\nj &lt;- 1\n# Initialize rowNum2 to all missing values\na$rowNum2 &lt;- NA  \n# Start the for loop, looping over the number of rows in a\nfor (i in c(1:nrow(a))) {\n   # Assign value j to row i\n   a$rowNum2[i] &lt;- j\n   # Increment j\n   j &lt;- j + 1\n   # If j is greater than 2, set it back to 1\n   if (j &gt; 2) {\n     j &lt;- 1\n   }\n}\na\n\n  n rowNum1 rowNum6 rowNum2\n1 1       1       1       1\n2 2       2       2       2\n3 3       1       1       1\n4 4       2       2       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-4-while-loops",
    "href": "Rbasics.html#exercise-4-while-loops",
    "title": "8  R Basics Group Exercise",
    "section": "8.6 Exercise 4: while loops",
    "text": "8.6 Exercise 4: while loops\nHere’s an example while loop:\n\ni &lt;- 1\nwhile (i &lt; 4) {\n  print(paste(\"i =\",i))\n  i &lt;- i + 1\n}\n\n[1] \"i = 1\"\n[1] \"i = 2\"\n[1] \"i = 3\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you know the loop exit criterion but not how many loops, use a while loop or a repeat loop.\nwhile: tests the condition at the start of the loop\n\n\n\n\n\n\n\n\nTask\n\n\n\nUse a while loop to insert into the data frame a a column named rowNum3 that contains a 1 in odd rows and a 2 in even rows.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nThe modulo operator %% might be helpful here.\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\na$rowNum3 &lt;- NA\ni &lt;- 1 #set index\nwhile(i &lt;= nrow(a)){ #set conditions for while loop\n\n  if ((i %% 2)) { #if statement for when \"i\" is odd\n    a$rowNum3[i] &lt;- 1\n  }\n  else #else statement for when \"i\" is even\n    a$rowNum3[i] &lt;- 2\n  \n  i &lt;- i + 1 #counter for \"i\", increments by 1 with each loop iteration\n} \na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3\n1 1       1       1       1       1\n2 2       2       2       2       2\n3 3       1       1       1       1\n4 4       2       2       2       2\n\n\nOr we can do this more concisely using an ifelse statement:\n\na$rowNum3 &lt;- NA\ni &lt;- 1 #set index\nwhile(i &lt;= nrow(a)){ #set conditions for while loop\n  a$rowNum3[i] &lt;- ifelse(i %% 2, 1, 2)\n  i &lt;- i + 1 #counter for \"i\", increments by 1 with each loop iteration\n} \na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3\n1 1       1       1       1       1\n2 2       2       2       2       2\n3 3       1       1       1       1\n4 4       2       2       2       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-5-repeat-loops",
    "href": "Rbasics.html#exercise-5-repeat-loops",
    "title": "8  R Basics Group Exercise",
    "section": "8.7 Exercise 5: repeat loops",
    "text": "8.7 Exercise 5: repeat loops\nHere’s an example repeat loop:\n\ni &lt;- 1\nrepeat {\n  print(paste(\"i =\",i))\n  i &lt;- i + 1\n  if (i &gt; 3) break\n}\n\n[1] \"i = 1\"\n[1] \"i = 2\"\n[1] \"i = 3\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you know the loop exit criterion but not how many loops, use a while loop or a repeat loop.\nrepeat: tests the condition at the end of the loop\n\n\n\n\n\n\n\n\nTask\n\n\n\nUse a repeat loop to insert into the data frame a a column named rowNum4 that contains a 1 in odd rows and a 2 in even rows.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\na$rowNum4 &lt;- NA\ni &lt;- 1 #set index\nrepeat { \n\n  if ((i %% 2)) { #if statement for when \"i\" is odd\n    a$rowNum4[i] &lt;- 1\n  }\n  else #else statement for when \"i\" is even\n    a$rowNum4[i] &lt;- 2\n  \n  i &lt;- i + 1 #counter for \"i\", increments by 1 with each loop iteration\n  if (i &gt; nrow(a)) {\n    break\n  }\n} \na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4\n1 1       1       1       1       1       1\n2 2       2       2       2       2       2\n3 3       1       1       1       1       1\n4 4       2       2       2       2       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-6-using-the-rep-function",
    "href": "Rbasics.html#exercise-6-using-the-rep-function",
    "title": "8  R Basics Group Exercise",
    "section": "8.8 Exercise 6: using the rep function",
    "text": "8.8 Exercise 6: using the rep function\n\n\n\n\n\n\nTask\n\n\n\nUse the rep command to insert into the data frame a a column named rowNum5 that contains a 1 in odd rows and a 2 in even rows.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\n# This will only work correctly if nrow(a) is even\na$rowNum5 &lt;- rep(c(1,2), nrow(a)/2)\na\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n1 1       1       1       1       1       1       1\n2 2       2       2       2       2       2       2\n3 3       1       1       1       1       1       1\n4 4       2       2       2       2       2       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-7",
    "href": "Rbasics.html#exercise-7",
    "title": "8  R Basics Group Exercise",
    "section": "8.9 Exercise 7",
    "text": "8.9 Exercise 7\n\n\n\n\n\n\nTasks\n\n\n\nTask 1: List all even rows of the data frame a.\nTask 2: List rows 3 and 4 of the data frame a.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\n\n# All even rows\na[a$rowNum1==2,]\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n2 2       2       2       2       2       2       2\n4 4       2       2       2       2       2       2\n\n# All odd rows\na[a$rowNum1==1,]\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n1 1       1       1       1       1       1       1\n3 3       1       1       1       1       1       1\n\n# List rows 3 and 4\na[c(3,4),]\n\n  n rowNum1 rowNum6 rowNum2 rowNum3 rowNum4 rowNum5\n3 3       1       1       1       1       1       1\n4 4       2       2       2       2       2       2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "Rbasics.html#exercise-8",
    "href": "Rbasics.html#exercise-8",
    "title": "8  R Basics Group Exercise",
    "section": "8.10 Exercise 8",
    "text": "8.10 Exercise 8\n\n\n\n\n\n\nNote\n\n\n\nLearning objective: Learn how to alter the options of an R command to achieve your goals.\n\n\nThis exercise should help answer this question: “When reading a file, will missing data be automatically represented as NA values, or does that need to be coded/manually curated?”\nThe tab-delimited file in testdata.txt contains the following data:\n1       1       1\n2       2       2\n3       NA      99\n4       4       4\nYour collaborator who gave you these data informed you that in this file 99 stands for a missing value, as does NA.\nHowever if we use the read.table command with its default options to read this in, we fail to accomplish the desired task, as 99 is not reading as a missing value:\n\ninfile &lt;- \"data/testdata.txt\"\n# Adjust the read.table options to read the file correctly as desired.\nb &lt;- read.table(infile)\nb\n\n  V1 V2 V3\n1  1  1  1\n2  2  2  2\n3  3 NA 99\n4  4  4  4\n\nstr(b)\n\n'data.frame':   4 obs. of  3 variables:\n $ V1: int  1 2 3 4\n $ V2: int  1 2 NA 4\n $ V3: int  1 2 99 4\n\n\n\n\n\n\n\n\nTask\n\n\n\nUse the read.table command to read this file in while automatically setting both the ’NA” and the 99 to NA. This should be done by adjusting the various options of the read.table command.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nRead the help page for the read.table command\n\n\n\n\n\n\n\n\nExpand to see the answer\n\n\n\n\n\nTo read this in properly, we have to let ‘read.table’ know that there is no header and that which values should be mapped to the missing NA value:\n\nb &lt;- read.table(infile, header = FALSE, na.strings = c(\"NA\",\"99\"))\nb\n\n  V1 V2 V3\n1  1  1  1\n2  2  2  2\n3  3 NA NA\n4  4  4  4\n\nstr(b)\n\n'data.frame':   4 obs. of  3 variables:\n $ V1: int  1 2 3 4\n $ V2: int  1 2 NA 4\n $ V3: int  1 2 NA 4\n\nsummary(b)\n\n       V1             V2              V3       \n Min.   :1.00   Min.   :1.000   Min.   :1.000  \n 1st Qu.:1.75   1st Qu.:1.500   1st Qu.:1.500  \n Median :2.50   Median :2.000   Median :2.000  \n Mean   :2.50   Mean   :2.333   Mean   :2.333  \n 3rd Qu.:3.25   3rd Qu.:3.000   3rd Qu.:3.000  \n Max.   :4.00   Max.   :4.000   Max.   :4.000  \n                NA's   :1       NA's   :1",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>R Basics Group Exercise</span>"
    ]
  },
  {
    "objectID": "RFactors.html",
    "href": "RFactors.html",
    "title": "9  Lecture: R: factors, subscripting",
    "section": "",
    "text": "9.1 R: factors, subscripting lecture\nHere’s a recording of this lecture (43 minutes 25 seconds):\nRecording",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lecture: R: factors, subscripting</span>"
    ]
  },
  {
    "objectID": "RFactors.html#r-factors-subscripting-slides",
    "href": "RFactors.html#r-factors-subscripting-slides",
    "title": "9  Lecture: R: factors, subscripting",
    "section": "9.2 R: factors, subscripting slides",
    "text": "9.2 R: factors, subscripting slides\nPDF slide set",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lecture: R: factors, subscripting</span>"
    ]
  },
  {
    "objectID": "RFactors.html#questions",
    "href": "RFactors.html#questions",
    "title": "9  Lecture: R: factors, subscripting",
    "section": "9.3 Questions",
    "text": "9.3 Questions\n\n9.3.1 Question 1\nWhich of the following statements about factors in R is correct?\n\n Factors can only use values that are among the initially specified levels, and cannot have new levels added later. Factors are primarily used for numerical calculations rather than categorical data. Ordinal data can be coded using ordinal factors to represent the order of categories. Factors can be used to add more understandable labels to data, but they do not support ordinal data.\n\n\n\n9.3.2 Question 2\nWhich of the following R code snippets correctly demonstrates valid methods for subsetting data?\n\n x[2], x[“name”], x[x &gt; 5] x[2], x[“name”], x[grep(“pattern”, x)] x[2], x[“name”], x[!is.na(x)] x[“name”], x[TRUE], x[order(x)]\n\n\n\n9.3.3 Question 3\nWhich of the following R code snippets best illustrates how NA values can interfere with subsetting, where x is c(1, 6, NA, 8)?\n\n x[!is.na(x)] x[2] x[1:3] x[x &gt; 5]",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Lecture: R: factors, subscripting</span>"
    ]
  },
  {
    "objectID": "R_char_exer.html",
    "href": "R_char_exer.html",
    "title": "10  R Character Exercise",
    "section": "",
    "text": "10.1 Load Libraries\nlibrary(tidyverse)\n# library(tidylog)\nlibrary(knitr)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R Character Exercise</span>"
    ]
  },
  {
    "objectID": "R_char_exer.html#useful-rstudio-cheatsheet",
    "href": "R_char_exer.html#useful-rstudio-cheatsheet",
    "title": "10  R Character Exercise",
    "section": "10.2 Useful RStudio cheatsheet",
    "text": "10.2 Useful RStudio cheatsheet\nSee the “String manipulation with stringr cheatsheet” at\nhttps://rstudio.github.io/cheatsheets/html/strings.html",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R Character Exercise</span>"
    ]
  },
  {
    "objectID": "R_char_exer.html#scenario-1",
    "href": "R_char_exer.html#scenario-1",
    "title": "10  R Character Exercise",
    "section": "10.3 Scenario 1",
    "text": "10.3 Scenario 1\nYou are working with three different sets of collaborators: 1) the clinical group that did the field work and generated the anthropometric measurements; 2) the medical laboratory that measured blood pressure in a controlled environment; and 3) the molecular laboratory that generated the genotypes.\n\nclin &lt;- read.table(file = \"data/clinical_data.txt\", header=TRUE)\nkable(clin)\n\n\n\n\nID\nheight\n\n\n\n\n1\n152\n\n\n104\n172\n\n\n2112\n180\n\n\n2543\n163\n\n\n\n\nlab &lt;- read.table(file = \"data/lab_data.txt\", header = TRUE)\nkable(lab)\n\n\n\n\nID\nSBP\n\n\n\n\nSG0001\n120\n\n\nSG0104\n111\n\n\nSG2112\n125\n\n\nSG2543\n119\n\n\n\n\ngeno &lt;- read.table(file = \"data/genotype_data.txt\", header = TRUE)\nkable(geno)\n\n\n\n\nSample\nrs1212\n\n\n\n\nTaqMan-SG0001-190601\nG/C\n\n\nTaqMan-SG0104-190602\nG/G\n\n\nTaqMan-SG2112-190603\nC/C\n\n\nTaqMan-Sg2543-190603\nC/G",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R Character Exercise</span>"
    ]
  },
  {
    "objectID": "R_char_exer.html#discussion-questions",
    "href": "R_char_exer.html#discussion-questions",
    "title": "10  R Character Exercise",
    "section": "10.4 Discussion Questions",
    "text": "10.4 Discussion Questions\n\n10.4.1 Question 1\nThe clinical group, which measured height, used integer IDs, but the medical group, which measured the blood pressure, decided to prefix the integer IDs with the string ‘SG’ (so as to distinguish them from other studies that were also using integer IDs). So ID ‘1’ was mapped to ID ‘SG0001’.\n\n\n\nThe clin data frame\n\n\nID\nheight\n\n\n\n\n1\n152\n\n\n104\n172\n\n\n2112\n180\n\n\n2543\n163\n\n\n\n\n\nDiscuss how, using R commands, you would reformat the integer IDs to be in the format “SGXXXX”. Write down your ideas in the next section, and, if you have time, try them out within an R chunk.\nHint: Use the formatC function.\n\n10.4.1.1 Interactive WebR chunk\nYou can interactively run R within this WebR chunk by clicking the Run code tab. Note that this is a limited version of R which runs within your web browser.\n\n\n\n\n\n\nNote\n\n\n\nThis Run code WebR chunk needs to be run first, before the later ones, as it downloads and reads in the required data files. The WebR chunks should be run in order, as you encounter them, from beginning to end.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n10.4.2 Answer 1\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nclin$SUBJECT_ID &lt;- paste0(\"SG\", formatC(clin$ID, width = 4, flag = \"0000\"))\nkable(clin)\n\n\n\n\nID\nheight\nSUBJECT_ID\n\n\n\n\n1\n152\nSG0001\n\n\n104\n172\nSG0104\n\n\n2112\n180\nSG2112\n\n\n2543\n163\nSG2543\n\n\n\n\n# Or here's an alternative using the 'sub' command:\nsub(\"00\",\"SG\",formatC(clin$ID, flag=\"0000\", width=6)) \n\n[1] \"SG0001\" \"SG0104\" \"SG2112\" \"SG2543\"\n\n# Or can be done using a `case_when`: \ncase_when(\n  clin$ID &lt; 10 ~ paste0(\"SG000\",clin$ID),\n  clin$ID &lt; 100 ~ paste0(\"SG00\",clin$ID),\n  clin$ID &lt; 1000 ~ paste0(\"SG0\",clin$ID),\n  clin$ID &lt; 10000 ~ paste0(\"SG\",clin$ID)\n)\n\n[1] \"SG0001\" \"SG0104\" \"SG2112\" \"SG2543\"\n\n\n\n\n\n\n\n10.4.3 Question 2\nDiscuss how, using R commands, you would reformat the “SGXXXX” IDs to be integer IDs. Write down your ideas in the next section, and, if you have time, try them out within an R chunk.\n\n\n\nThe lab data frame\n\n\nID\nSBP\n\n\n\n\nSG0001\n120\n\n\nSG0104\n111\n\n\nSG2112\n125\n\n\nSG2543\n119\n\n\n\n\n\nHint: Use either the gsub command or the str_replace_all command from the stringr package.\n\n\n\n\n\n\nWarning\n\n\n\nTo read in and load the data within the WebR environment, be sure to run all of the WebR chunks in order. For example, to usefully run R code in this WebR chunk here, you first need to run the WebR chunk above in Question 1.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.4.4 Answer 2\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nlab$ID2 &lt;- as.numeric(gsub(\"SG\",\"\",lab$ID))\nkable(lab)\n\n\n\n\nID\nSBP\nID2\n\n\n\n\nSG0001\n120\n1\n\n\nSG0104\n111\n104\n\n\nSG2112\n125\n2112\n\n\nSG2543\n119\n2543\n\n\n\n\n\n\nlab$ID2 &lt;- NA\nlab$ID2 &lt;- str_replace_all(lab$ID, pattern = \"SG\", replacement = \"\") %&gt;% as.numeric()\nkable(lab)\n\n\n\n\nID\nSBP\nID2\n\n\n\n\nSG0001\n120\n1\n\n\nSG0104\n111\n104\n\n\nSG2112\n125\n2112\n\n\nSG2543\n119\n2543\n\n\n\n\n\n\n\n\n\n\n10.4.5 Question 3\nThe genotype group used IDs in the style “TaqMan-SG0001-190601”, where the first string is “TaqMan” and the ending string is the date of the genotyping experiment.\nDiscuss how, using R commands, you would extract an “SGXXXX” style ID from the “TaqMan-SG0001-190601” style IDs. Write down your ideas in the next section, and, if you have time, try them out within an R chunk.\nNote that one of the IDs has a lower case ‘g’ in it - how would you correct this, using R commands?\n\n\n\nThe geno data frame\n\n\nSample\nrs1212\n\n\n\n\nTaqMan-SG0001-190601\nG/C\n\n\nTaqMan-SG0104-190602\nG/G\n\n\nTaqMan-SG2112-190603\nC/C\n\n\nTaqMan-Sg2543-190603\nC/G\n\n\n\n\n\nHint: Use either the str_split_fixed function from the stringr package or the separate function from the tidyr package.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.4.6 Answer 3\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\na &lt;- str_split_fixed(geno$Sample, pattern = \"-\",n=3)\na\n\n     [,1]     [,2]     [,3]    \n[1,] \"TaqMan\" \"SG0001\" \"190601\"\n[2,] \"TaqMan\" \"SG0104\" \"190602\"\n[3,] \"TaqMan\" \"SG2112\" \"190603\"\n[4,] \"TaqMan\" \"Sg2543\" \"190603\"\n\ngeno$ID &lt;- toupper(a[,2])\nkable(geno)\n\n\n\n\nSample\nrs1212\nID\n\n\n\n\nTaqMan-SG0001-190601\nG/C\nSG0001\n\n\nTaqMan-SG0104-190602\nG/G\nSG0104\n\n\nTaqMan-SG2112-190603\nC/C\nSG2112\n\n\nTaqMan-Sg2543-190603\nC/G\nSG2543\n\n\n\n\n\nThe separate function from the tidyr package is also useful:\n\ngeno %&gt;% \n  separate(Sample, into=c(\"Tech\",\"ID2\",\"Suffix\"), sep=\"-\") %&gt;% \n  mutate(ID2=toupper(ID2))\n\n    Tech    ID2 Suffix rs1212     ID\n1 TaqMan SG0001 190601    G/C SG0001\n2 TaqMan SG0104 190602    G/G SG0104\n3 TaqMan SG2112 190603    C/C SG2112\n4 TaqMan SG2543 190603    C/G SG2543\n\n\nThe separate function is being superseded in favor of separate_wider_delim and separate_wider_position. In this case, separate_wider_delim is applicable.\n\ngeno %&gt;% \n  separate_wider_delim(cols=Sample, delim = \"-\", names=c(\"Tech\",\"ID2\",\"Suffix\")) %&gt;% \n  mutate(ID2=toupper(ID2))\n\n# A tibble: 4 × 5\n  Tech   ID2    Suffix rs1212 ID    \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; \n1 TaqMan SG0001 190601 G/C    SG0001\n2 TaqMan SG0104 190602 G/G    SG0104\n3 TaqMan SG2112 190603 C/C    SG2112\n4 TaqMan SG2543 190603 C/G    SG2543",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R Character Exercise</span>"
    ]
  },
  {
    "objectID": "R_char_exer.html#scenario-2",
    "href": "R_char_exer.html#scenario-2",
    "title": "10  R Character Exercise",
    "section": "10.5 Scenario 2",
    "text": "10.5 Scenario 2\nA replication sample has been measured, and that is using IDs in the style “RP5XXX”.\n\njoint &lt;- read.table(file = \"data/joint_data.txt\", header = TRUE)\nkable(joint)\n\n\n\n\nID\nSBP\n\n\n\n\nSG0001\n120\n\n\nSG0104\n111\n\n\nSG2112\n125\n\n\nSG2543\n119\n\n\nRP5002\n121\n\n\nRP5012\n118\n\n\nRP5113\n112\n\n\nRP5213\n142\n\n\n\n\n\n\n10.5.1 Question 4\nDiscuss how you would use R commands to split the ‘joint’ data frame into an ‘SG’ and ‘RP’ specific piece? Write down your ideas in the next section, and, if you have time, try them out within an R chunk.\n\n\n\nThe joint data frame\n\n\nID\nSBP\n\n\n\n\nSG0001\n120\n\n\nSG0104\n111\n\n\nSG2112\n125\n\n\nSG2543\n119\n\n\nRP5002\n121\n\n\nRP5012\n118\n\n\nRP5113\n112\n\n\nRP5213\n142\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n10.5.2 Answer 4\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\ngrep(pattern = \"SG\",joint$ID)\n\n[1] 1 2 3 4\n\ngrep(pattern = \"RP\", joint$ID)\n\n[1] 5 6 7 8\n\njoint.SG &lt;- joint[grep(pattern = \"SG\",joint$ID), ]\njoint.RP &lt;- joint[grep(pattern = \"RP\", joint$ID), ]\nkable(joint.SG)\n\n\n\n\nID\nSBP\n\n\n\n\nSG0001\n120\n\n\nSG0104\n111\n\n\nSG2112\n125\n\n\nSG2543\n119\n\n\n\n\nkable(joint.RP)\n\n\n\n\n\nID\nSBP\n\n\n\n\n5\nRP5002\n121\n\n\n6\nRP5012\n118\n\n\n7\nRP5113\n112\n\n\n8\nRP5213\n142\n\n\n\n\n# Reset row names\nrownames(joint.RP) &lt;- NULL\nkable(joint.RP)\n\n\n\n\nID\nSBP\n\n\n\n\nRP5002\n121\n\n\nRP5012\n118\n\n\nRP5113\n112\n\n\nRP5213\n142",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>R Character Exercise</span>"
    ]
  },
  {
    "objectID": "RLoops.html",
    "href": "RLoops.html",
    "title": "11  Lecture: Loops in R",
    "section": "",
    "text": "11.1 Loops in R lecture\nHere’s a recording of this lecture (8 minutes 11 seconds):\nRecording",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lecture: Loops in R</span>"
    ]
  },
  {
    "objectID": "RLoops.html#loops-in-r-slides",
    "href": "RLoops.html#loops-in-r-slides",
    "title": "11  Lecture: Loops in R",
    "section": "11.2 Loops in R slides",
    "text": "11.2 Loops in R slides\nPDF slide set",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lecture: Loops in R</span>"
    ]
  },
  {
    "objectID": "RLoops.html#questions",
    "href": "RLoops.html#questions",
    "title": "11  Lecture: Loops in R",
    "section": "11.3 Questions",
    "text": "11.3 Questions\n\n11.3.1 Question 1\nWhich of the following is NOT a common technique for improving the efficiency of loops in R?\n\n Using vectorized operations instead of loops whenever possible. Pre-allocating memory for the result of a loop to avoid repeated memory allocations. Using a for loop instead of a while loop for most iterative tasks. Avoiding unnecessary calculations within the loop.",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lecture: Loops in R</span>"
    ]
  },
  {
    "objectID": "loops.html",
    "href": "loops.html",
    "title": "12  Loops in R, Part I",
    "section": "",
    "text": "12.1 Acknowledgment/License\nThe original source for this chapter was from the web site\nhttps://datacarpentry.org/semester-biology/\nwhich was built using this underlying code\nhttps://github.com/datacarpentry/semester-biology\nand is used under the\nAttribution 4.0 International (CC BY 4.0)\nlicense https://creativecommons.org/licenses/by/4.0/.\nThe material presented here has been modified from the original source.\nAccordingly this chapter is made available under the same license terms.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops in R, Part I</span>"
    ]
  },
  {
    "objectID": "loops.html#source-code",
    "href": "loops.html#source-code",
    "title": "12  Loops in R, Part I",
    "section": "12.2 Source code",
    "text": "12.2 Source code\nIf you’d like to work within R Studio using the source code of this chapter, you can obtain it from here.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops in R, Part I</span>"
    ]
  },
  {
    "objectID": "loops.html#basic-for-loop",
    "href": "loops.html#basic-for-loop",
    "title": "12  Loops in R, Part I",
    "section": "12.3 Basic for loop",
    "text": "12.3 Basic for loop\n\nLoops are the fundamental structure for repetition in programming\nfor loops perform the same action for each item in a list of things\n\nfor (item in list_of_items) {\n  do_something(item)\n}\n\nTo see an example of this let’s calculate masses from volumes using a loop\nNeed print() to display values inside a loop or function\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCode in the loop will run once for each value in volumes\nEverything between the curly brackets is executed each time through the loop\nCode takes the first value from volumes and assigns it to volume and does the calculation and prints it\nThen it takes the second value from volumes and assigns it to volume and does the calculation and prints it\nAnd so on\nSo, this loop does the same exact thing as\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Tasks 1 & 2 in Basic For Loops\n\n\n\n1. The code below prints the numbers 1 through 5 one line at a time. Modify it to print each of these numbers multiplied by 3.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n2. Write a for loop that loops over the following vector and prints out the mass in kilograms (mass_kg = 2.2 * mass_lb)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops in R, Part I</span>"
    ]
  },
  {
    "objectID": "loops.html#looping-with-an-index-storing-results",
    "href": "loops.html#looping-with-an-index-storing-results",
    "title": "12  Loops in R, Part I",
    "section": "12.4 Looping with an index & storing results",
    "text": "12.4 Looping with an index & storing results\n\nR loops iterate over a series of values in a vector or other list like object\nWhen we use that value directly this is called looping by value\nBut there is another way to loop, which is called looping by index\nLooping by index loops over a list of integer index values, typically starting at 1\nThese integers are then used to access values in one or more vectors at the position inicated by the index\nIf we modified our previous loop to use an index it would look like this\nWe often use i to stand for “index” as the variable we update with each step through the loop\n\nvolumes = c(1.6, 3, 8)\nfor (i ...)\n\nWe then create a vector of position values starting at 1 (for the first value) and ending with the length of the object we are looping over\n\nvolumes = c(1.6, 3, 8)\nfor (i in 1:3)\n\nWe don’t want to have to know the length of the vector and it might change in the future, so we’ll look it up using the length() function\n\nvolumes = c(1.6, 3, 8)\nfor (i in 1:length(volumes)){\n\n}\n\nThen inside the loop instead of doing the calculation on the index (which is just a number between 1 and 3 in our case)\nWe use square brackets and the index to get the appropriate value out of our vector\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis gives us the same result, but it’s more complicated to understand\nSo why would we loop by index?\nThe advantage to looping by index is that it lets us do more complicated things\nOne of the most common things we use this for are storing the results we calculated in the loop\nTo do this we start by creating an empty object the same length as the results will be before the loop starts\nTo store results in a vector we use the function vector to create an empty vector of the right length\nmode is the type of data we are going to store\nlength is the length of the vector\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen add each result in the right position in this vector\nFor each trip through the loop put the output into the empty vector at the ith position\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Tasks 3-4 in Basic For Loops.\n\n\n\n3. Complete the code below so that it prints out the name of each bird one line at a time.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n4. Complete the code below so that it stores one area for each radius.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops in R, Part I</span>"
    ]
  },
  {
    "objectID": "loops.html#looping-over-multiple-values",
    "href": "loops.html#looping-over-multiple-values",
    "title": "12  Loops in R, Part I",
    "section": "12.5 Looping over multiple values",
    "text": "12.5 Looping over multiple values\n\nLooping with an index also allows us to access values from multiple vectors\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Task 5 in Basic For Loops.\n\n\n\n5. Complete the code below to calculate an area for each pair of lengths and widths, store the areas in a vector, and after they are all calculated print them out:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Loops in R, Part I</span>"
    ]
  },
  {
    "objectID": "conditionals.html",
    "href": "conditionals.html",
    "title": "13  Conditionals in R",
    "section": "",
    "text": "13.1 Acknowledgment/License\nThe original source for this chapter was from the web site\nhttps://datacarpentry.org/semester-biology/\nwhich was built using this underlying code\nhttps://github.com/datacarpentry/semester-biology\nand is used under the\nAttribution 4.0 International (CC BY 4.0)\nlicense https://creativecommons.org/licenses/by/4.0/.\nThe material presented here has been modified from the original source.\nAccordingly this chapter is made available under the same license terms.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#source-code",
    "href": "conditionals.html#source-code",
    "title": "13  Conditionals in R",
    "section": "13.2 Source code",
    "text": "13.2 Source code\nIf you’d like to work within R Studio using the source code of this chapter, you can obtain it from here.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#conditionals",
    "href": "conditionals.html#conditionals",
    "title": "13  Conditionals in R",
    "section": "13.3 Conditionals",
    "text": "13.3 Conditionals\n\nConditional statements are when we check to see if some condition is true or not\nWe used these for filtering data in dplyr\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThese statements generate a value is of type \"logical\"\nThe value is TRUE if the condition is satisfied\nThe value is FALSE if the condition is not satisfied\nThese aren’t the strings “TRUE” and “FALSE”\nThey are a special type of value\nConditional statements are made with a range of operators\nWe’ve seen\n\n== for equals\n!= for not equals\n&lt;, &gt; for less than and greater than\n&lt;=, &gt;= for less than or equal to and greater than or equal to\nis.na() for is this value null\n\nThere are others, including %in%, which checks to see if a value is present in a vector of possible values\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe can combine conditions using “and” and “or”\nWe use the & for “and”\nWhich means if both conditions are TRUE return TRUE\nIf one of the contions is FALSE then return FALSE\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe use the | for “or”\nWhich means if either or both of the conditions are TRUE return TRUE\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nVectors of values compared to a single value return one logical per value\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nChecks each value to see if equal to 1\nThis is what subsetting approaches use to subset\nThey keep the values where the value in this condition vector is equal to TRUE\nLet’s look at an example where we have a vector of sites and a vector the the states they occur in\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nA conditional statement checking if the state is 'FL' returns a vector of TRUE’s and FALSEs\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSo when we filter the site vector to only return values where the state is equal to 'FL'\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nIt is the same as pass a vector of TRUE and FALSE values inside the square brackets\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis keeps the first and second values in site because the values in the vector are TRUE\nThis is how dplyr::filter() and other methods for subsetting data work\n\n\n13.3.1 Tasks: Choice Operators\n\n\n\n\n\n\nImportant\n\n\n\nDo Tasks 1-4 in Choice Operators\nCreate the following variables.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse them to print whether or not the following statements are TRUE or FALSE.\n\nw is greater than 10\n\"green\" is in colors\nx is greater than y\nEach value in masses is greater than 40.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#if-statements",
    "href": "conditionals.html#if-statements",
    "title": "13  Conditionals in R",
    "section": "13.4 if statements",
    "text": "13.4 if statements\n\nConditional statements generate logical values to filter inputs.\nif statements use conditional statements to control flow of the program.\n\nif (the conditional statement is TRUE ) {\n  do something\n}\n\nExample\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nx &gt; 5 is TRUE, so the code in the if runs\nx is now 6^2 or 36\nChange x to 4\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nx &gt; 5 is FALSE, so the code in the if doesn’t run\nx is still 4\nThis is not a function, so everything that happens in the if statement influences the global environment\nDifferent mass calculations for different vegetation types\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n13.4.1 Task 1: Basic If Statements\n\n\n\n\n\n\nImportant\n\n\n\nDo Task 1 in Basic If Statements\n1. Complete (i.e., copy into your code and them modify) the following if statement so that if age_class is equal to “sapling” it sets y &lt;- 10.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nOften want to chose one of several options\nCan add more conditions and associated actions with else if\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nChecks the first condition\nIf TRUE runs that condition’s code and skips the rest\nIf not it checks the next one until it runs out of conditions\nCan specify what to do if none of the conditions is TRUE using else on its own\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n13.4.2 Tasks 2-3: Basic If Statements\n\n\n\n\n\n\nImportant\n\n\n\nDo Tasks 2-3 in Basic If Statements\n2. Complete the following if statement so that if age_class is equal to “sapling” it sets y &lt;- 10 and if age_class is equal to “seedling” it sets y &lt;- 5.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n3. Complete the following if statement so that if age_class is equal to “sapling” it sets y &lt;- 10 and if age_class is equal to “seedling” it sets y &lt;- 5 and if age_class is something else then it sets the value of y &lt;- 0.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#multiple-ifs-vs-else-if",
    "href": "conditionals.html#multiple-ifs-vs-else-if",
    "title": "13  Conditionals in R",
    "section": "13.5 Multiple ifs vs else if",
    "text": "13.5 Multiple ifs vs else if\n\nMultiple ifs check each conditional separately\nExecutes code of all conditions that are TRUE\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nelse if checks each condition sequentially\nExecutes code for the first condition that is TRUE\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#using-conditionals-inside-functions",
    "href": "conditionals.html#using-conditionals-inside-functions",
    "title": "13  Conditionals in R",
    "section": "13.6 Using Conditionals Inside Functions",
    "text": "13.6 Using Conditionals Inside Functions\n\nWe’ve used a conditional to estimate mass differently for different types of vegetation\nThis is the kind of code we are going to want to reuse, so let’s move it into a function\nWe do this by placing the same code inside of a function\nAnd making sure that the function takes all required variables as input\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe can then run this function with different vegetation types and get different estimates for mass\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLet’s walk through how this code executes using the debugger\nWhen we call the function the first thing that happens is that 1.6 gets assigned to volume and \"tree\" gets assigned to veg_type\nThe code then checks to see if veg_type is equal to \"shrub\"\nIt isn’t so the code then checks to see if veg_type is equal to \"grass\"\nIt isn’t so the code then hits the else statement and executes the code in the else block\nIt assigns NA to mass\nIt then finishes the if/else if/else statement and returns the value for mass, which is NA to the global environment\n\n\n13.6.1 Task: Size Estimates by Name\n\n\n\n\n\n\nImportant\n\n\n\nDo Size Estimates by Name\n\n13.6.1.1 Part I\nThe length of an organism is typically strongly correlated with its body mass. This is useful because it allows us to estimate the mass of an organism even if we only know its length. This relationship generally takes the form:\n\nmass = a * length^b\n\nWhere the parameters a and b vary among groups. This allometric approach is regularly used to estimate the mass of dinosaurs since we cannot weigh something that is only preserved as bones.\nThe following function estimates the mass of an organism in kg based on its length in meters for a particular set of parameter values, those for Theropoda (where a has been estimated as 0.73 and b has been estimated as 3.63; Seebacher 2001).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nUse this function to print out the mass of a Theropoda that is 16 m long based on its reassembled skeleton.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a new version of this function called get_mass_from_length() that takes length, a and b as arguments and uses the following code to estimate the mass mass &lt;- a * length ^ b. Use this function to estimate the mass of a Sauropoda (a = 214.44, b = 1.46) that is 26 m long.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n13.6.1.2 Part II\nTo make it even easier to work with your dinosaur size estimation functions you decide to create a function that lets you specify which dinosaur group you need to estimate the size of by name and then have the function automatically choose the right parameters.\nCreate a new function get_mass_from_length_by_name() that takes two arguments, the length and the name of the dinosaur group. Inside this function use if/else if/else statements to check to see if the name is one of the following values and if so use the associated a and b values to estimate the species mass.\n\nStegosauria: a = 10.95 and b = 2.64 (Seebacher 2001).\nTheropoda: a = 0.73 and b = 3.63 (Seebacher 2001).\nSauropoda: a = 214.44 and b = 1.46 (Seebacher 2001).\n\nIf the name is not any of these values the function should return NA.\nRun the function for: 1. A Stegosauria that is 10 meters long. 2. A Theropoda that is 8 meters long. 3. A Sauropoda that is 12 meters long. 4. A Ankylosauria that is 13 meters long.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nChallenge (optional): If the name is not one of values that have a and b values print out a message that it doesn’t know how to convert that group that includes that groups name in a message like “No known estimation for Ankylosauria”. (the function paste() will be helpful here). Doing this successfully will modify your answer to (4), which is fine.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nChallenge (optional): Change your function so that it uses two different values of a and b for Stegosauria. When Stegosauria is greater than 8 meters long use the equation above. When it is less than 8 meters long use a = 8.5 and b = 2.8. Run the function for a Stegosauria that is 6 meters long.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nChallenge (optional): Rewrite your function so that instead of calculating mass directly it sets the values of a and b to the values for the species (or to NA if the species doesn’t have an equation) and then calls another function to do the basic mass = a * length ^ b calculation.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#automatically-extracting-functions",
    "href": "conditionals.html#automatically-extracting-functions",
    "title": "13  Conditionals in R",
    "section": "13.7 Automatically extracting functions",
    "text": "13.7 Automatically extracting functions\n\nCan pull code out into functions\nHighlight the code\nCode -&gt; Extract Function\nProvide a name for the function",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "conditionals.html#nested-conditionals",
    "href": "conditionals.html#nested-conditionals",
    "title": "13  Conditionals in R",
    "section": "13.8 Nested conditionals",
    "text": "13.8 Nested conditionals\n\nSometimes decisions are more complicated\nFor example we might have different equations for some vegetation types based on the age of the plant\nCan “nest” conditionals inside of one another\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nFirst checks if the vegetation type is “shrub”\nIf it is checks to see if it is &lt; 5 years old\nIf so does one calculation, if not does another\nBut nesting can be difficult to follow so try to minimize it\n\n\n13.8.1 Task 4: Basic If Statements\n\n\n\n\n\n\nImportant\n\n\n\nDo Task 4 in Basic If Statements\n4. Convert your conditional statement from Task 3 in Section 13.4.2 into a function that takes age_class as an argument and returns y. Call this function 5 times, once with each of the following values for age_class: “sapling”, “seedling”, “adult”, “mature”, “established”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Conditionals in R</span>"
    ]
  },
  {
    "objectID": "loops_part2.html",
    "href": "loops_part2.html",
    "title": "14  Loops in R, Part II",
    "section": "",
    "text": "14.1 Acknowledgment/License\nThe original source for this chapter was from the web site\nhttps://datacarpentry.org/semester-biology/\nwhich was built using this underlying code\nhttps://github.com/datacarpentry/semester-biology\nand is used under the\nAttribution 4.0 International (CC BY 4.0)\nlicense https://creativecommons.org/licenses/by/4.0/.\nThe material presented here has been modified from the original source.\nAccordingly this chapter is made available under the same license terms.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#source-code",
    "href": "loops_part2.html#source-code",
    "title": "14  Loops in R, Part II",
    "section": "14.2 Source code",
    "text": "14.2 Source code\nIf you’d like to work within R Studio using the source code of this chapter, you can obtain it from here.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#looping-with-functions",
    "href": "loops_part2.html#looping-with-functions",
    "title": "14  Loops in R, Part II",
    "section": "14.3 Looping with functions",
    "text": "14.3 Looping with functions\n\nIt is common to combine loops with with functions by calling one or more functions as a step in our loop\nFor example, let’s take the non-vectorized version of our est_mass function that returns an estimated mass if the volume &gt; 5 and NA if it’s not.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe can’t pass the vector to the function and get back a vector of results because of the if statements\nSo let’s loop over the values\nFirst we’ll create an empty vector to store the results\nAnd them loop by index, callling the function for each value of volumes\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThis is the for loop equivalent of an mapply statement\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Size Estimates By Name Loop.\n\n\n\nIf dinosaur_lengths.csv is not already in your working directory download a copy of the data on dinosaur lengths with species names. Load it into R.\nWrite a function mass_from_length() that uses the equation mass &lt;- a * length^b to estimate the size of a dinosaur from its length. This function should take two arguments, length and species. For each of the following inputs for species, use the given values of a and b for the calculation:\n\nFor Stegosauria: a = 10.95 and b = 2.64 (Seebacher 2001).\nFor Theropoda: a = 0.73 and b = 3.63 (Seebacher 2001).\nFor Sauropoda: a = 214.44 and b = 1.46 (Seebacher 2001).\nFor any other value of species: a = 25.37 and b = 2.49.\n\n\nUse this function and a for loop to calculate the estimated mass for each dinosaur, store the masses in a vector, and after all of the calculations are complete show the first few items in the vector using head().\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nAdd the results in the vector back to the original data frame. Show the first few rows of the data frame using head().\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCalculate the mean mass for each species using dplyr.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#looping-over-files",
    "href": "loops_part2.html#looping-over-files",
    "title": "14  Loops in R, Part II",
    "section": "14.4 Looping over files",
    "text": "14.4 Looping over files\n\nRepeat same actions on many similar files\nLet’s download some simulated satellite collar data\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow we need to get the names of each of the files we want to loop over\nWe do this using list.files()\nIf we run it without arguments it will give us the names of all files in the directory\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nBut we just want the data files so we’ll add the optional pattern argument to only get the files that start with \"locations-\"\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nOnce we have this list we can loop over it count the number of observations in each file\nFirst create an empty vector to store those counts\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen write our loop\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Task 1 of Multiple-file Analysis.\n\n\n\nExercise uses different collar data\nYou have a satellite collars on a number of different individuals and want to be able to quickly look at all of their recent movements at once. The data is posted daily to a zip file that contains one csv file for each individual: data/individual_collar_data.zip\nStart your solution by:\n\nIf individual_collar_data.zip is not already in your working directory download the zip file using download.file()\nUnzip it using unzip()\nObtain a list of all of the files with file names matching the pattern \"collar-data-.*.txt\" (using list.files())\n\n\nUse a loop to load each of these files into R and make a line plot (using geom_path()) for each file with long on the x axis and lat on the y axis. Graphs, like other types of output, won’t display inside a loop unless you explicitly display them, so you need put your ggplot() command inside a print() statement.\n\nInclude the name of the file in the graph as the graph title using labs().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#storing-loop-results-in-a-data-frame",
    "href": "loops_part2.html#storing-loop-results-in-a-data-frame",
    "title": "14  Loops in R, Part II",
    "section": "14.5 Storing loop results in a data frame",
    "text": "14.5 Storing loop results in a data frame\n\nWe often want to calculate multiple pieces of information in a loop making it useful to store results in things other than vectors\nWe can store them in a data frame instead by creating an empty data frame and storing the results in the ith row of the appropriate column\nAssociate the file name with the count\nAlso store the minimum latitude\nStart by creating an empty data frame\nUse the data.frame function\nProvide one argument for each column\n“Column Name” = “an empty vector of the correct type”\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nNow let’s modify our loop from last time\nInstead of storing count in results[i] we need to first specify the count column using the $: results$count[i]\nWe also want to store the filename, which is data_files[i]\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Task 2 of Multiple-file Analysis.\n\n\n\nExercise uses different collar data\n\nAdd code to the loop to calculate the minimum and maximum latitude in the file, and store these values, along with the name of the file, in a data frame. Show the data frame as output.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you’re interested in seeing another application of for loops, check out the code below used to simulate the data for this exercise using for loops.\nindividuals = paste(c('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'), c(1:10), sep = \"\")\nfor (individual in individuals) {\n    lat = vector(\"numeric\", 24)\n    long = vector(\"numeric\", 24)\n    lat[1] = rnorm(1, mean = 26, sd = 2)\n    long[1] = rnorm(1, mean = -35, sd = 3)\n    for (i in 2:24) {\n        lat[i] = lat[i - 1] + rnorm(1, mean = 0, sd = 1)\n        long[i] = long[i - 1] + rnorm(1, mean = 0, sd = 1)\n    }\n    times = seq(from=as.POSIXct(\"2016-02-26 00:00\", tz=\"UTC\"),\n                to=as.POSIXct(\"2016-02-26 23:00\", tz=\"UTC\"),\n                by=\"hour\")  \n    df = data.frame(date = \"2016-02-26\",\n                    collar = individual,\n                    time = times,\n                    lat = lat,\n                    long = long)\n    write.csv(df, paste(\"collar-data-\", individual, \"-2016-02-26.txt\", sep = \"\"))\n}\nzip(\"data/individual_collar_data.zip\", list.files(pattern = \"collar-data-[A-Z][0-9]+-.*\"))",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#subsetting-data",
    "href": "loops_part2.html#subsetting-data",
    "title": "14  Loops in R, Part II",
    "section": "14.6 Subsetting Data",
    "text": "14.6 Subsetting Data\n\nLoops can subset in ways that are difficult with things like group_by\nLook at some data on trees from the National Ecological Observatory Network\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLook at a north-south gradient in number of trees\nNeed to know number of trees in each band of y values\nStart by defining the size of the window we want to use\n\nUse the grid lines which are 2.5 m\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nThen figure out the edges for each window\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nBut we don’t want to go all the way to the far edge\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nSet up an empty data frame to store the output\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLook over the left edges and subset the data occuring within each window\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#nested-loops",
    "href": "loops_part2.html#nested-loops",
    "title": "14  Loops in R, Part II",
    "section": "14.7 Nested Loops",
    "text": "14.7 Nested Loops\n\nSometimes need to loop over multiple things in a coordinate fashion\nPass a window over some spatial data\nLook at full spatial pattern not just east-west gradient\nBasic nested loops work by putting one loop inside another one\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nLoop over x and y coordinates to create boxes\nNeed top and bottom edges\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nRedefine out storage\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "loops_part2.html#sequence-along",
    "href": "loops_part2.html#sequence-along",
    "title": "14  Loops in R, Part II",
    "section": "14.8 Sequence along",
    "text": "14.8 Sequence along\n\nseq_along() generates a vector of numbers from 1 to length(volumes)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Loops in R, Part II</span>"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "15  Functions",
    "section": "",
    "text": "15.1 Acknowledgment/License\nThe original source for this chapter was from the web site\nhttps://datacarpentry.org/semester-biology/\nwhich was built using this underlying code\nhttps://github.com/datacarpentry/semester-biology\nand is used under the\nAttribution 4.0 International (CC BY 4.0)\nlicense https://creativecommons.org/licenses/by/4.0/.\nThe material presented here has been modified from the original source.\nAccordingly this chapter is made available under the same license terms.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#source-code",
    "href": "functions.html#source-code",
    "title": "15  Functions",
    "section": "15.2 Source code",
    "text": "15.2 Source code\nIf you’d like to work within R Studio using the source code of this chapter, you can obtain it from here.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#understandable-and-reusable-code",
    "href": "functions.html#understandable-and-reusable-code",
    "title": "15  Functions",
    "section": "15.3 Understandable and reusable code",
    "text": "15.3 Understandable and reusable code\n\nWrite code in understandable chunks.\nWrite reusable code.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#understandable-chunks",
    "href": "functions.html#understandable-chunks",
    "title": "15  Functions",
    "section": "15.4 Understandable chunks",
    "text": "15.4 Understandable chunks\n\nHuman brain can only hold limited number of things in memory\nWrite programs that don’t require remembering all of the details at once\nTreat functions as a single conceptual chunk.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#reuse",
    "href": "functions.html#reuse",
    "title": "15  Functions",
    "section": "15.5 Reuse",
    "text": "15.5 Reuse\n\nWant to do the same thing repeatedly?\n\nInefficient & error prone to copy code\nIf it occurs in more than one place, it will eventually be wrong somewhere.\n\nFunctions are written to be reusable.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#function-basics",
    "href": "functions.html#function-basics",
    "title": "15  Functions",
    "section": "15.6 Function basics",
    "text": "15.6 Function basics\nfunction_name &lt;- function(inputs) {\n  output_value &lt;- do_something(inputs)\n  return(output_value)\n}\n\nThe braces indicate that the lines of code are a group that gets run together\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPressing run anywhere in this group runs all the lines in that group\nA function runs all of the lines of code in the braces\nUsing the arguments provided\nAnd then returns the output\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreating a function doesn’t run it.\nCall the function with some arguments.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nStore the output to use it later in the program\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Writing Functions\n\n\n\nEdit the following function to replace the ________ with variables names for the input and output.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse the function to calculate how many grams there are in 3.75 pounds.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nTreat functions like a black box\n\nDraw a box on board showing inputs-&gt;function-&gt;outputs\nThe only things the function knows about are the inputs we pass it\nThe only thing the program knows about the function is the output it produces\n\n\n\n\n\n\n\n\nDo Function Execution\n\n\n\n\nWalk through function execution (using debugger)\n\nCall function\nAssign 0.8 to length, 1.6 to width, and 2.0 to height inside function\nCalculate the area and assign it to area\nCalculate volume and assign it to volume\nSend volume back as output\nStore it in shrub_vol\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTreat functions like a black box.\n\nCan’t access a variable that was created in a function\n\n&gt; volume\nError: object 'volume' not found\n\nOr an argument by name\n\n&gt; width\nError: object 'width' not found\n\n‘Global’ variables can influence function, but should not.\n\nVery confusing and error prone to use a variable that isn’t passed in as an argument\n\n\n\n\n\n\n\n\n\nDo Use and Modify.\n\n\n\nThe length of an organism is typically strongly correlated with its body mass. This is useful because it allows us to estimate the mass of an organism even if we only know its length. This relationship generally takes the form:\n\nmass = a * length^b\n\nWhere the parameters a and b vary among groups. This allometric approach is regularly used to estimate the mass of dinosaurs since we cannot weigh something that is only preserved as bones.\nThe following function estimates the mass of an organism in kg based on its length in meters for a particular set of parameter values, those for Theropoda (where a has been estimated as 0.73 and b has been estimated as 3.63; Seebacher 2001).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nUse this function to print out the mass of a Theropoda that is 16 m long based on its reassembled skeleton.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCreate a new version of this function called get_mass_from_length() that takes length, a and b as arguments and uses the following code to estimate the mass mass &lt;- a * length ^ b.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse this function to estimate the mass of a Sauropoda (a = 214.44, b = 1.46) that is 26 m long.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#default-arguments",
    "href": "functions.html#default-arguments",
    "title": "15  Functions",
    "section": "15.7 Default arguments",
    "text": "15.7 Default arguments\n\nDefaults can be set for common inputs.\nFor example, many of our shrubs are the same height so for those shrubs we only measure the length and width.\nSo we want a default value for the height for cases where we don’t measure it\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Default Arguments.\n\n\n\nThis is a follow up to the Use and Modify exercise above.\nAllowing a and b to be passed as arguments to get_mass_from_length() made the function more flexible, but for some types of dinosaurs we don’t have specific values of a and b and so we have to use general values that can be applied to a number of different species.\nRewrite your get_mass_from length() function from Use and Modify so that its arguments have default values of a = 39.9 and b = 2.6 (the average values from Seebacher 2001).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nUse this function to estimate the mass of a Sauropoda (a = 214.44, b = 1.46) that is 22 m long (by setting a and b when calling the function).\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nUse this function to estimate the mass of a dinosaur from an unknown taxonomic group that is 16m long. Only pass the function length, not a and b, so that the default values are used.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nDiscuss why passing a and b in is more useful than having them fixed",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#named-vs-unnamed-arguments",
    "href": "functions.html#named-vs-unnamed-arguments",
    "title": "15  Functions",
    "section": "15.8 Named vs unnamed arguments",
    "text": "15.8 Named vs unnamed arguments\n\nWhen to use or not use argument names\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOr\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nYou can always use names\n\nValue gets assigned to variable of that name\n\nIf not using names then order determines naming\n\nFirst value is length, second value is width, third value is height\nIf order is hard to remember use names\n\nIn many cases there are a lot of optional arguments\n\nConvention to always name optional argument\n\nSo, in our case, the most common approach would be\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#combining-functions",
    "href": "functions.html#combining-functions",
    "title": "15  Functions",
    "section": "15.9 Combining Functions",
    "text": "15.9 Combining Functions\n\nEach function should be single conceptual chunk of code\nFunctions can be combined to do larger tasks in two ways\nCalling multiple functions in a row\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe can also use pipes with our own functions\nThe output from the first function becomes the first argument for the second function\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nDo Combining Functions.\n\n\n\nThis is a follow up to the Default Argument exercise above.\nMeasuring things using the metric system is the standard approach for scientists, but when communicating your results more broadly it may be useful to use different units (at least in some countries). Write a function called convert_kg_to_pounds that converts kilograms into pounds (pounds = 2.205 * kg).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUse that function and your get_mass_from_length() function from Default Arguments to estimate the weight, in pounds, of a 12 m long Stegosaurus with a = 10.95 and b = 2.64 (The estimated a and b values for Stegosauria from Seebacher 2001).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nWe can nest functions\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nBut we careful with this because it can make code difficult to read\nDon’t nest more than two functions\nCan also call functions from inside other functions\nAllows organizing function calls into logical groups\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nWe don’t need to pass the function name into the function\nThat’s the one violation of the black box rule",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#using-dplyr-ggplot-in-functions",
    "href": "functions.html#using-dplyr-ggplot-in-functions",
    "title": "15  Functions",
    "section": "15.10 Using dplyr & ggplot in functions",
    "text": "15.10 Using dplyr & ggplot in functions\n\nThere is an extra step we need to take when working with functions from dplyr and ggplot that work with “data variables”, i.e., names of columns that are not in quotes\nThese functions use tidy evaluation, a special type of non-standard evaluation\nThis basically means they do fancy things under the surface to make them easier to work with\nBut it means they don’t work if we just pass things to functions in the most natural way\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nTo fix this we have to tell our code which inputs/arguments are this special type of data variable\nWe do this by “embracing” them in double braces\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#code-design-with-functions",
    "href": "functions.html#code-design-with-functions",
    "title": "15  Functions",
    "section": "15.11 Code design with functions",
    "text": "15.11 Code design with functions\n\nFunctions let us break code up into logical chunks that can be understood in isolation\nWrite functions at the top of your code then call them at the bottom\nThe functions hold the details\nThe function calls show you the outline of the code execution\n\nclean_data &lt;- function(data){\n  do_stuff(data)\n}\n\nprocess_data &lt;- function(cleaned_data){\n  do_dplyr_stuff(cleaned_data)\n}\n\nmake_graph &lt;- function(processed_data){\n  do_ggplot_stuff(processed_data)\n}\n\nraw_data &lt;- read.csv('mydata.csv')\ncleaned_data &lt;- clean_data(raw_data)\nprocessed_data &lt;- process_data(cleaned_data)\nmake_graph(processed_data)",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#documentation-comments",
    "href": "functions.html#documentation-comments",
    "title": "15  Functions",
    "section": "15.12 Documentation & Comments",
    "text": "15.12 Documentation & Comments\n\nDocumentation\n\nHow to use code\nUse Roxygen comments for functions\n\nComments\n\nWhy & how code works\nOnly if it code is confusing to read",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#working-with-functions-in-rstudio",
    "href": "functions.html#working-with-functions-in-rstudio",
    "title": "15  Functions",
    "section": "15.13 Working with functions in RStudio",
    "text": "15.13 Working with functions in RStudio\n\nIt is possible to find and jump between functions\nClick on list of functions at bottom of editor and select\nCan be helpful to clearly see what is a function\nCan have RStudio highlight them\nGlobal Options -&gt; Code -&gt; Display -&gt; Highlight R function calls",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "R_Functions.html",
    "href": "R_Functions.html",
    "title": "16  R Functions Excercise",
    "section": "",
    "text": "16.1 Load Libraries\nlibrary(tidyverse)\n# library(tidylog)",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>R Functions Excercise</span>"
    ]
  },
  {
    "objectID": "R_Functions.html#data-set-creation-code",
    "href": "R_Functions.html#data-set-creation-code",
    "title": "16  R Functions Excercise",
    "section": "16.2 Data set creation code",
    "text": "16.2 Data set creation code\ni &lt;- 6\nfor (i in 1:10) {\nfl &lt;- data.frame(name=rep(paste0(\"name\",i),26))\nb &lt;- data.frame(name = rep(NA, 26))\nb$name &lt;- paste0(fl$name,\"_\",letters)\nb$trait &lt;- rnorm(26)\nwrite_tsv(b,paste0(\"data/dataset\",i,\".txt\"))\n}",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>R Functions Excercise</span>"
    ]
  },
  {
    "objectID": "R_Functions.html#example",
    "href": "R_Functions.html#example",
    "title": "16  R Functions Excercise",
    "section": "16.3 Example",
    "text": "16.3 Example\nHere we have been sent three data sets in the files that contain the trait quantitative values for each person in the data set:\n“dataset1.txt” “dataset2.txt” “dataset3.txt”\nAnd we’ve been asked to make a table that gives, for each dataset, the sample size (N), the mean of the trait, the median, and the variance.\nWe could do this by reading in each data set, one by one, as follows:\n\nresults &lt;- data.frame(dataset=rep(NA,3),N=NA, mean=NA, median=NA, var=NA)\nfl1 &lt;- read.table(\"data/dataset1.txt\",sep=\"\\t\",header=TRUE)\nresults$dataset[1] &lt;- \"dataset1\"\nresults$N &lt;- nrow(fl1)\nresults$mean[1] &lt;- mean(fl1$trait)\nresults$median[1] &lt;- median(fl1$trait)\nresults$var[1] &lt;- var(fl1$trait)\nresults\n\n   dataset  N       mean    median       var\n1 dataset1 26 0.09762111 0.2198957 0.5974116\n2     &lt;NA&gt; 26         NA        NA        NA\n3     &lt;NA&gt; 26         NA        NA        NA\n\n\n\nfl2 &lt;- read.table(\"data/dataset2.txt\",sep=\"\\t\",header=TRUE)\nresults$dataset[2] &lt;- \"dataset2\"\nresults$N &lt;- nrow(fl2)\nresults$mean[2] &lt;- mean(fl2$trait)\nresults$median[2] &lt;- median(fl2$trait)\nresults$var[2] &lt;- var(fl2$trait)\nresults\n\n   dataset  N       mean    median       var\n1 dataset1 26 0.09762111 0.2198957 0.5974116\n2 dataset2 26 0.43486401 0.3558736 1.0936651\n3     &lt;NA&gt; 26         NA        NA        NA\n\n\n\nfl3 &lt;- read.table(\"data/dataset3.txt\",sep=\"\\t\",header=TRUE)\nresults$dataset[3] &lt;- \"dataset3\"\nresults$N &lt;- nrow(fl3)\nresults$mean[3] &lt;- mean(fl3$trait)\nresults$median[3] &lt;- median(fl3$trait)\nresults$var[3] &lt;- var(fl3$trait)\nresults\n\n   dataset  N       mean    median       var\n1 dataset1 26 0.09762111 0.2198957 0.5974116\n2 dataset2 26 0.43486401 0.3558736 1.0936651\n3 dataset3 26 0.07508335 0.0445614 0.7950574\n\n\nYour colleague initially sent you the three data sets above, but now your colleague has sent you three more data sets and asked you to update the ‘results’ table.\nAs you can see, the code above is very repetitive. So let’s automate this by writing a function that loops through a list of data set files named “dataset1.txt”, “dataset2.txt”, “dataset3.txt”, etc., building up the results table as above.\n\n16.3.1 Question: How could we construct a list of file names?\n\n\n\n\n\n\nNote\n\n\n\nThis Run code WebR chunk needs to be run first, before the later ones, as it downloads and reads in the required data files. The WebR chunks should be run in order, as you encounter them, from beginning to end.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe now have the files “dataset1.txt”, “dataset2.txt”, “dataset3.txt”, …, “dataset6.txt” in the ‘data’ directory.\nQuestion: How could we construct a list of file names?\nHint: Use the list.files command\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nHint: the list.files command provides a handy way to get a list of the input files:\n\nfls &lt;- list.files(path=\"data\",pattern=\"dataset*\")\nfls\n\n[1] \"dataset1.txt\" \"dataset2.txt\" \"dataset3.txt\" \"dataset4.txt\" \"dataset5.txt\"\n[6] \"dataset6.txt\"\n\n\n\n\n\n\n\n16.3.2 Question: Outline a possible algorithm\nOutline a possible algorithm that loops through a list of input data set files named “dataset1.txt”, “dataset2.txt”, “dataset3.txt”, etc., building up the results table as above.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nRead in the input file names into a list\nSet up an empty results table\nFor each file in our file name list\n\nRead the file\nCompute the statistics\nInsert the information into the results table\nReturn the filled-in results table\n\n\n\n\n\n\n\n16.3.3 Question: Construct a more detailed step-by-step algorithm.\nConstruct a more detailed step-by-step algorithm.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nInput the path to the folder containing the data files\nRead in the input file names into a list fls\nCount the number of input files N\nSet up an empty results table with N rows\nFor each file in our file name list fls\n\nRead the file\nCompute the statistics\nInsert the information into the correct row of the results table\n\nReturn the filled-in results table\n\n\n\n\n\n\n16.3.4 Task: Write a read_data_file function.\nWrite a read_data_file function to accomplish the required steps for a single input data file.\n\nMake the number in the data file name an argument.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nHere we make the number in the data file name an argument\n\nresults &lt;- data.frame(dataset=rep(NA,6),N=NA, mean=NA, median=NA, var=NA)\nread_data_file &lt;- function(n=1, results) {\n  fl1 &lt;- read.table(paste0(\"data/dataset\",n,\".txt\"),sep=\"\\t\",header=TRUE)\n  results$dataset[n] &lt;- paste0(\"dataset\",n,\".txt\")\n  results$N &lt;- nrow(fl1)\n  results$mean[n] &lt;- mean(fl1$trait)\n  results$median[n] &lt;- median(fl1$trait)\n  results$var[n] &lt;- var(fl1$trait)\n  results\n}\n(results &lt;- read_data_file(n=1, results))\n\n       dataset  N       mean    median       var\n1 dataset1.txt 26 0.09762111 0.2198957 0.5974116\n2         &lt;NA&gt; 26         NA        NA        NA\n3         &lt;NA&gt; 26         NA        NA        NA\n4         &lt;NA&gt; 26         NA        NA        NA\n5         &lt;NA&gt; 26         NA        NA        NA\n6         &lt;NA&gt; 26         NA        NA        NA\n\n(results &lt;- read_data_file(n=2, results))\n\n       dataset  N       mean    median       var\n1 dataset1.txt 26 0.09762111 0.2198957 0.5974116\n2 dataset2.txt 26 0.43486401 0.3558736 1.0936651\n3         &lt;NA&gt; 26         NA        NA        NA\n4         &lt;NA&gt; 26         NA        NA        NA\n5         &lt;NA&gt; 26         NA        NA        NA\n6         &lt;NA&gt; 26         NA        NA        NA\n\n\n\n\n\n\nMake the path to the input file an argument to your read_data_file function.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nHere we make the path to the input file an argument.\n\nread_data_file_v2 &lt;- function(n=1, flnm=\"dataset1.txt\", results) {\n  fl1 &lt;- read.table(paste0(\"data/\",flnm),sep=\"\\t\",header=TRUE)\n  results$dataset[n] &lt;- flnm\n  results$N &lt;- nrow(fl1)\n  results$mean[n] &lt;- mean(fl1$trait)\n  results$median[n] &lt;- median(fl1$trait)\n  results$var[n] &lt;- var(fl1$trait)\n  results\n}\n(results &lt;- read_data_file_v2(n=1, flnm = \"dataset1.txt\", results))\n\n       dataset  N       mean    median       var\n1 dataset1.txt 26 0.09762111 0.2198957 0.5974116\n2 dataset2.txt 26 0.43486401 0.3558736 1.0936651\n3         &lt;NA&gt; 26         NA        NA        NA\n4         &lt;NA&gt; 26         NA        NA        NA\n5         &lt;NA&gt; 26         NA        NA        NA\n6         &lt;NA&gt; 26         NA        NA        NA\n\n(results &lt;- read_data_file_v2(n=2, flnm = \"dataset2.txt\", results))\n\n       dataset  N       mean    median       var\n1 dataset1.txt 26 0.09762111 0.2198957 0.5974116\n2 dataset2.txt 26 0.43486401 0.3558736 1.0936651\n3         &lt;NA&gt; 26         NA        NA        NA\n4         &lt;NA&gt; 26         NA        NA        NA\n5         &lt;NA&gt; 26         NA        NA        NA\n6         &lt;NA&gt; 26         NA        NA        NA\n\n\n\n\n\n\n\n16.3.5 Question: What does the above code assume?\nWhat does the above code assume?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nAssumes a file naming style of ‘dataset*.txt’ where the asterisk represents 1, 2, 3, …\nAssumes the files are in the “data” folder.\n\n\n\n\n\n16.3.6 Question: Extend your function to process all of the files\nThe above function read_data_file processes one file at a time. How would you write a function to loop this over to process all of our files?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nfls &lt;- list.files(path=\"data\",pattern=\"dataset*\")\n\nloop_over_dataset &lt;- function(fls) {\n  # Input: the list of file names\n  # Output: the 'results table\n  # Count the number of data set file names in fls\n  n_datasets &lt;- length(fls)\n  # Set up a results dataframe with n_datasets rows\n  results &lt;- data.frame(dataset=rep(NA,n_datasets),N=NA, mean=NA, median=NA, var=NA)\n  for (n in 1:n_datasets) {\n    results &lt;- read_data_file(n=n, results=results)\n  }\n  return(results)\n}\n\nloop_over_dataset(fls = fls)\n\n       dataset  N        mean      median       var\n1 dataset1.txt 26  0.09762111  0.21989574 0.5974116\n2 dataset2.txt 26  0.43486401  0.35587359 1.0936651\n3 dataset3.txt 26  0.07508335  0.04456140 0.7950574\n4 dataset4.txt 26  0.06259720  0.04813915 0.9186042\n5 dataset5.txt 26 -0.09288522 -0.19155759 0.9978161\n6 dataset6.txt 26 -0.20266667 -0.23845426 1.5605823\n\n\n\n\n\n\n\n16.3.7 Bonus questions\n\nCan you find a subtle mistake in the read_data_file function?\n\nresults &lt;- data.frame(dataset=rep(NA,6),N=NA, mean=NA, median=NA, var=NA)\nread_data_file &lt;- function(n=1, results) {\n  fl1 &lt;- read.table(paste0(\"data/dataset\",n,\".txt\"),sep=\"\\t\",header=TRUE)\n  results$dataset[n] &lt;- paste0(\"dataset\",n,\".txt\")\n  results$N &lt;- nrow(fl1)\n  results$mean[n] &lt;- mean(fl1$trait)\n  results$median[n] &lt;- median(fl1$trait)\n  results$var[n] &lt;- var(fl1$trait)\n  invisible(results)\n}\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nIf N varies across the data sets, then this line will not do the right thing:\nresults$N &lt;- nrow(fl1)\nInstead this line should be\nresults$N[n] &lt;- nrow(fl1)\n\nresults &lt;- data.frame(dataset=rep(NA,6),N=NA, mean=NA, median=NA, var=NA)\nread_data_file &lt;- function(n=1, results) {\n  fl1 &lt;- read.table(paste0(\"data/dataset\",n,\".txt\"),sep=\"\\t\",header=TRUE)\n  results$dataset[n] &lt;- paste0(\"dataset\",n,\".txt\")\n  results$N[n] &lt;- nrow(fl1)\n  results$mean[n] &lt;- mean(fl1$trait)\n  results$median[n] &lt;- median(fl1$trait)\n  results$var[n] &lt;- var(fl1$trait)\n  invisible(results)\n}\n\n\n\n\n\nWhy does this end in an error?\n\n\nread_data_file_v2(\"dataset1.txt\",results)\n\nError in file(file, \"rt\"): invalid 'description' argument\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nThe read_data_file_v2 function’s arguments are n, flnm, and results.\nWhen we call it in this manner:\nread_data_file_v2(\"dataset1.txt\",results)\nwe are calling it using unamed arguments, so they are interpreted by position. That means it is assigning the string “dataset1.txt” to the n argument, and the results R object to the flnm argument, but this is not what was intended.\nIf we use named arguments, then this runs without any errors:\n\nread_data_file_v2(flnm = \"dataset1.txt\",results = results)\n\n       dataset  N       mean    median       var\n1 dataset1.txt 26 0.09762111 0.2198957 0.5974116\n2         &lt;NA&gt; 26         NA        NA        NA\n3         &lt;NA&gt; 26         NA        NA        NA\n4         &lt;NA&gt; 26         NA        NA        NA\n5         &lt;NA&gt; 26         NA        NA        NA\n6         &lt;NA&gt; 26         NA        NA        NA\n\n\nIn this case, note that n took on the default value of 1.",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>R Functions Excercise</span>"
    ]
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "17  Tidyverse",
    "section": "",
    "text": "17.1 Acknowledgment/License\nThe original source for this chapter was from the web site\nhttps://github.com/UoMResearchIT/r-day-workshop/\nwhich was used to build this web page:\nhttps://uomresearchit.github.io/r-day-workshop/04-dplyr/\nand is used under the\nAttribution 4.0 International (CC BY 4.0)\nlicense https://creativecommons.org/licenses/by/4.0/.\nThe material presented here has been modified from the original source.\nAccordingly this chapter is made available under the same license terms.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#load-gapminder-data",
    "href": "tidyverse.html#load-gapminder-data",
    "title": "17  Tidyverse",
    "section": "17.2 Load gapminder data",
    "text": "17.2 Load gapminder data\nIn the previous episode we used the readr package to load the gapminder data into a tibble within R.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this episode we’ll use the dplyr package to manipulate the data we loaded, and calculate some summary statistics. We’ll also introduce the concept of “pipes”.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#manipulating-tibbles",
    "href": "tidyverse.html#manipulating-tibbles",
    "title": "17  Tidyverse",
    "section": "17.3 Manipulating tibbles",
    "text": "17.3 Manipulating tibbles\nManipulation of tibbles means many things to many researchers. We often select only certain observations (rows) or variables (columns). We often group the data by a certain variable(s), or calculate summary statistics.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#the-dplyr-package",
    "href": "tidyverse.html#the-dplyr-package",
    "title": "17  Tidyverse",
    "section": "17.4 The dplyr package",
    "text": "17.4 The dplyr package\nThe dplyr package is part of the tidyverse. It provides a number of very useful functions for manipulating tibbles (and their base-R cousin, the data.frame) in a way that will reduce repetition, reduce the probability of making errors, and probably even save you some typing.\nWe will cover:\n\nselecting variables with select()\nsubsetting observations with filter()\ngrouping observations with group_by()\ngenerating summary statistics using summarize()\ngenerating new variables using mutate()\nSorting tibbles using arrange()\nchaining operations together using pipes %&gt;%",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#using-select",
    "href": "tidyverse.html#using-select",
    "title": "17  Tidyverse",
    "section": "17.5 Using select()",
    "text": "17.5 Using select()\nIf, for example, we wanted to move forward with only a few of the variables in our tibble we use the select() function. This will keep only the variables you select.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSelect will select columns of data. What if we want to select rows that meet certain criteria?",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#other-ways-of-selecting",
    "href": "tidyverse.html#other-ways-of-selecting",
    "title": "17  Tidyverse",
    "section": "17.6 Other ways of selecting",
    "text": "17.6 Other ways of selecting\nInstead of saying what columns we do want, we can tell R which columns we don’t want by prefixing the column name with a -. For example to select everything except year we would use select(gapminder, -year).\nThere are also other ways of selecting columns based on parts of their names (such as starts_with() and ends_with()) - see ?select_helpers for more information.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#using-filter",
    "href": "tidyverse.html#using-filter",
    "title": "17  Tidyverse",
    "section": "17.7 Using filter()",
    "text": "17.7 Using filter()\nThe filter() function is used to select rows of data. For example, to select only countries in Europe:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOnly rows of the data where the condition (i.e. continent==\"Europe\") is TRUE are kept.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#using-pipes-and-dplyr",
    "href": "tidyverse.html#using-pipes-and-dplyr",
    "title": "17  Tidyverse",
    "section": "17.8 Using pipes and dplyr",
    "text": "17.8 Using pipes and dplyr\nWe’ve now seen how to choose certain columns of data (using select()) and certain rows of data (using filter()). In an analysis we often want to do both of these things (and many other things, like calculating summary statistics, which we’ll come to shortly). How do we combine these?\nThere are several ways of doing this; the method we will learn about today is using pipes.\nThe pipe operator %&gt;% lets us pipe the output of one command into the next. This allows us to build up a data-processing pipeline. This approach has several advantages:\n\nWe can build the pipeline piecemeal - building the pipeline step-by-step is easier than trying to perform a complex series of operations in one go\nIt is easy to modify and reuse the pipeline\nWe don’t have to make temporary tibbles as the analysis progresses\n\n\n\n\n\n\n\nNote\n\n\n\nNote that R now has a native pipe operator |&gt; which is very similar (but not identical) to the pipe operator %&gt;% used here. The pipe operator %&gt;% is defined by the magrittr R package, which is loaded when we load dplyr or tidyverse.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#pipelines-and-the-shell",
    "href": "tidyverse.html#pipelines-and-the-shell",
    "title": "17  Tidyverse",
    "section": "17.9 Pipelines and the shell",
    "text": "17.9 Pipelines and the shell\nIf you’re familiar with the Unix shell, you may already have used pipes to pass the output from one command to the next. The concept is the same, except the shell uses the | character rather than R’s pipe operator %&gt;%",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#keyboard-shortcuts-and-getting-help",
    "href": "tidyverse.html#keyboard-shortcuts-and-getting-help",
    "title": "17  Tidyverse",
    "section": "17.10 Keyboard shortcuts and getting help",
    "text": "17.10 Keyboard shortcuts and getting help\nThe pipe operator can be tedious to type. In Rstudio pressing Ctrl + Shift+M under Windows / Linux will insert the pipe operator. On the mac, use ⌘ + Shift+M.\nWe can use tab completion to complete variable names when entering commands. This saves typing and reduces the risk of error.\nRStudio includes a helpful “cheat sheet”, which summarises the main functionality and syntax of dplyr. This can be accessed via the help menu –&gt; cheatsheets –&gt; data transformation with dplyr.\nLet’s rewrite the select command example using the pipe operator:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo help you understand why we wrote that in that way, let’s walk through it step by step. First we summon the gapminder tibble and pass it on, using the pipe symbol %&gt;%, to the next step, which is the select() function. In this case we don’t specify which data object we use in the select() function since in gets that from the previous pipe.\nWhat if we wanted to combine this with the filter example? I.e. we want to select year, country and GDP per capita, but only for countries in Europe? We can join these two operations using a pipe; feeding the output of one command directly into the next:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the order of these operations matters; if we reversed the order of the select() and filter() functions, the continent variable wouldn’t exist in the data-set when we came to apply the filter.\nWhat about if we wanted to match more than one item? To do this we use the %in% operator:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#another-way-of-thinking-about-pipes",
    "href": "tidyverse.html#another-way-of-thinking-about-pipes",
    "title": "17  Tidyverse",
    "section": "17.11 Another way of thinking about pipes",
    "text": "17.11 Another way of thinking about pipes\nIt might be useful to think of the statement\n  gapminder %%\n     filter(continent==\"Europe\") %%\n     select(year,country,gdpPercap)\nas a sentence, which we can read as “take the gapminder data and then filter records where continent == Europe and then select the year, country and gdpPercap\nWe can think of the filter() and select() functions as verbs in the sentence; they do things to the data flowing through the pipeline.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#splitting-your-commands-over-multiple-lines",
    "href": "tidyverse.html#splitting-your-commands-over-multiple-lines",
    "title": "17  Tidyverse",
    "section": "17.12 Splitting your commands over multiple lines",
    "text": "17.12 Splitting your commands over multiple lines\nIt’s generally a good idea to put one command per line when writing your analyses. This makes them easier to read. When doing this, it’s important that the %% goes at the end of the line, as in the example above. If we put it at the beginning of a line, e.g.:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nthe first line makes a valid R command. R will then treat the next line as a new command, which won’t work.\n\n\n\n\n\n\nChallenge 1\n\n\n\nWrite a single command (which can span multiple lines and includes pipes) that will produce a tibble that has the values of lifeExp, country and year, for the countries in Africa, but not for other Continents. How many rows does your tibble have? (You can use the nrow() function to find out how many rows are in a tibble.)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nSolution to Challenge 1\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAs with last time, first we pass the gapminder tibble to the filter() function, then we pass the filtered version of the gapminder tibble to the select() function. Note: The order of operations is very important in this case. If we used ‘select’ first, filter would not be able to find the variable continent since we would have removed it in the previous step.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#sorting-tibbles",
    "href": "tidyverse.html#sorting-tibbles",
    "title": "17  Tidyverse",
    "section": "17.13 Sorting tibbles",
    "text": "17.13 Sorting tibbles\nThe arrange() function will sort a tibble by one or more of the variables in it:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can use the desc() function to sort a variable in reverse order:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#generating-new-variables",
    "href": "tidyverse.html#generating-new-variables",
    "title": "17  Tidyverse",
    "section": "17.14 Generating new variables",
    "text": "17.14 Generating new variables\nThe mutate() function lets us add new variables to our tibble. It will often be the case that these are variables we derive from existing variables in the data-frame.\nAs an example, the gapminder data contains the population of each country, and its GDP per capita. We can use this to calculate the total GDP of each country:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also use functions within mutate to generate new variables. For example, to take the log of gdpPercap we could use:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe dplyr cheat sheet contains many useful functions which can be used with dplyr. This can be found in the help menu of RStudio. You will use one of these functions in the next challenge.\n\n\n\n\n\n\nChallenge 2\n\n\n\nCreate a tibble containing each country in Europe, its life expectancy in 2007 and the rank of the country’s life expectancy. (note that ranking the countries will not sort the table; the row order will be unchanged. You can use the arrange() function to sort the table).\nHint: First filter() to get the rows you want, and then use mutate() to create a new variable with the rank in it. The cheat-sheet contains useful functions you can use when you make new variables (the cheat-sheets can be found in the help menu in RStudio).\nThere are several functions for ranking observations, which handle tied values differently. For this exercise it doesn’t matter which function you choose.\nCan you reverse the ranking order so that the country with the longest life expectancy gets the lowest rank? Hint: This is similar to sorting in reverse order\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nSolution to challenge 2\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo reverse the order of the ranking, use the desc function, i.e. mutate(rank = min_rank(desc(lifeExp)))\nThere are several functions for calculating ranks; you may have used, e.g. dense_rank() The functions handle ties differently. The help file for dplyr’s ranking functions explains the differences, and can be accessed with ?ranking",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#calculating-summary-statistics",
    "href": "tidyverse.html#calculating-summary-statistics",
    "title": "17  Tidyverse",
    "section": "17.15 Calculating summary statistics",
    "text": "17.15 Calculating summary statistics\nWe often wish to calculate a summary statistic (the mean, standard deviation, etc.) for a variable. We frequently want to calculate a separate summary statistic for several groups of data (e.g. the experiment and control group). We can calculate a summary statistic for the whole data-set using the dplyr’s summarise() function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo generate summary statistics for each value of another variable we use the group_by() function:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#aside",
    "href": "tidyverse.html#aside",
    "title": "17  Tidyverse",
    "section": "17.16 Aside",
    "text": "17.16 Aside\nIn the examples above it would be preferable to calculate the weighted mean (to reflect the different populations of the countries). R can calculate this for us using weighted.mean(lifeExp, pop). For simplicty I’ve used the regular mean in the above examples.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#statistics-revision",
    "href": "tidyverse.html#statistics-revision",
    "title": "17  Tidyverse",
    "section": "17.17 Statistics revision",
    "text": "17.17 Statistics revision\nIf you need to revise or learn about statistical concepts, the University Library’s “My Learning Essentials” team have produced a site Start to Finish:Statistics which covers important statistical concepts.\n\n\n\n\n\n\nChallenge 3\n\n\n\nFor each combination of continent and year, calculate the average life expectancy.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n\n\nSolution to Challenge 3\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#count-and-n",
    "href": "tidyverse.html#count-and-n",
    "title": "17  Tidyverse",
    "section": "17.18 count() and n()",
    "text": "17.18 count() and n()\nA very common operation is to count the number of observations for each group. The dplyr package comes with two related functions that help with this.\nIf we need to use the number of observations in calculations, the n() function is useful. For instance, if we wanted to get the standard error of the life expectancy per continent:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAlthough we could use the group_by(), n() and summarize() functions to calculate the number of observations in each group, dplyr provides the count() function which automatically groups the data, calculates the totals and then ungroups it.\nFor instance, if we wanted to check the number of countries included in the dataset for the year 2002, we can use:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can optionally sort the results in descending order by adding sort=TRUE:",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#equivalent-functions-in-base-r",
    "href": "tidyverse.html#equivalent-functions-in-base-r",
    "title": "17  Tidyverse",
    "section": "17.19 Equivalent functions in base R",
    "text": "17.19 Equivalent functions in base R\nIn this course we’ve taught the tidyverse. You are likely come across code written others in base R. You can find a guide to some base R functions and their tidyverse equivalents here, which may be useful when reading their code.",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "tidyverse.html#other-great-resources",
    "href": "tidyverse.html#other-great-resources",
    "title": "17  Tidyverse",
    "section": "17.20 Other great resources",
    "text": "17.20 Other great resources\n\nData Wrangling tutorial - an excellent four part tutorial covering selecting data, filtering data, summarising and transforming your data.\nR for Data Science\nData Wrangling Cheat sheet - you can also access this from the help menu in RStudio (in newer versions of RStudio it has been replaced with “Data Transformation with dplyr”)\nIntroduction to dplyr - this is the package vignette. It can be viewed within R using vignette(package=\"dplyr\", \"dplyr\")\nData wrangling with R and RStudio - 55 minute webinar from RStudio",
    "crumbs": [
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Tidyverse</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html",
    "href": "exercise_tidyverse.html",
    "title": "18  R Tidyverse Exercise",
    "section": "",
    "text": "18.1 Load Libraries\nLoad the tidyverse packages\nlibrary(tidyverse)\n# library(tidylog)",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#untidy-data",
    "href": "exercise_tidyverse.html#untidy-data",
    "title": "18  R Tidyverse Exercise",
    "section": "18.2 Untidy data",
    "text": "18.2 Untidy data\nLet’s use the World Health Organization TB data set from the tidyr package\n\nwho &lt;- tidyr::who\ndim(who)\n\n[1] 7240   60\n\nhead(who[,1:6] %&gt;% filter(!is.na(new_sp_m014)))\n\n# A tibble: 6 × 6\n  country     iso2  iso3   year new_sp_m014 new_sp_m1524\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1 Afghanistan AF    AFG    1997           0           10\n2 Afghanistan AF    AFG    1998          30          129\n3 Afghanistan AF    AFG    1999           8           55\n4 Afghanistan AF    AFG    2000          52          228\n5 Afghanistan AF    AFG    2001         129          379\n6 Afghanistan AF    AFG    2002          90          476\n\n\nSee the help page for who for more information about this data set.\nIn particular, note this description:\n“The data uses the original codes given by the World Health Organization. The column names for columns five through 60 are made by combining new_ to a code for method of diagnosis (rel = relapse, sn = negative pulmonary smear, sp = positive pulmonary smear, ep = extrapulmonary) to a code for gender (f = female, m = male) to a code for age group (014 = 0-14 yrs of age, 1524 = 15-24 years of age, 2534 = 25 to 34 years of age, 3544 = 35 to 44 years of age, 4554 = 45 to 54 years of age, 5564 = 55 to 64 years of age, 65 = 65 years of age or older).”\nSo new_sp_m014 represents the counts of new TB cases detected by a positive pulmonary smear in males in the 0-14 age group.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#tidy-data",
    "href": "exercise_tidyverse.html#tidy-data",
    "title": "18  R Tidyverse Exercise",
    "section": "18.3 Tidy data",
    "text": "18.3 Tidy data\nTidy data: Have each variable in a column.\nQuestion: Are these data tidy?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nNo these data are not tidy because aspects of the data that should be variables are encoded in the name of the variables.\nThese aspects are\n\ntest type.\nsex of the subjects.\nage range of the subjects.\n\n\n\n\nQuestion: How would we make these data tidy?\nConsider this portion of the data:\n\nhead(who[,1:5] %&gt;% filter(!is.na(new_sp_m014) & new_sp_m014&gt;0), 1)\n\n# A tibble: 1 × 5\n  country     iso2  iso3   year new_sp_m014\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;\n1 Afghanistan AF    AFG    1998          30\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nWe would replace the new_sp_m014 with the following four columns:\ntype  sex   age   n\nsp    m     014  30\nThis would place each variable in its own column.",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#gather",
    "href": "exercise_tidyverse.html#gather",
    "title": "18  R Tidyverse Exercise",
    "section": "18.4 Gather",
    "text": "18.4 Gather\n\nstocks &lt;- tibble(\n  time = as.Date('2009-01-01') + 0:9,\n  X = rnorm(10, 0, 1),\n  Y = rnorm(10, 0, 2),\n  Z = rnorm(10, 0, 4)\n)\n\nhead(stocks)\n\n# A tibble: 6 × 4\n  time             X      Y      Z\n  &lt;date&gt;       &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 2009-01-01  0.136   0.244  -2.83\n2 2009-01-02  1.35   -2.27    2.19\n3 2009-01-03  0.0874 -0.246  -6.22\n4 2009-01-04 -0.323  -1.24   -2.89\n5 2009-01-05  0.140  -0.539 -11.4 \n6 2009-01-06  1.02   -2.06   -2.91\n\nstocks %&gt;% gather(\"stock\", \"price\", -time) %&gt;% head()\n\n# A tibble: 6 × 3\n  time       stock   price\n  &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;\n1 2009-01-01 X      0.136 \n2 2009-01-02 X      1.35  \n3 2009-01-03 X      0.0874\n4 2009-01-04 X     -0.323 \n5 2009-01-05 X      0.140 \n6 2009-01-06 X      1.02",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#pivot_longer",
    "href": "exercise_tidyverse.html#pivot_longer",
    "title": "18  R Tidyverse Exercise",
    "section": "18.5 Pivot_longer",
    "text": "18.5 Pivot_longer\n\nstocks %&gt;% pivot_longer(c(X,Y,Z), names_to= \"stock\", values_to = \"price\") %&gt;% \n  head()\n\n# A tibble: 6 × 3\n  time       stock  price\n  &lt;date&gt;     &lt;chr&gt;  &lt;dbl&gt;\n1 2009-01-01 X      0.136\n2 2009-01-01 Y      0.244\n3 2009-01-01 Z     -2.83 \n4 2009-01-02 X      1.35 \n5 2009-01-02 Y     -2.27 \n6 2009-01-02 Z      2.19",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#who-tb-data",
    "href": "exercise_tidyverse.html#who-tb-data",
    "title": "18  R Tidyverse Exercise",
    "section": "18.6 WHO TB data",
    "text": "18.6 WHO TB data\nQuestion: How would we convert this to tidy form?\n\nhead(who[,1:6] %&gt;% filter(!is.na(new_sp_m014)))\n\n# A tibble: 6 × 6\n  country     iso2  iso3   year new_sp_m014 new_sp_m1524\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n1 Afghanistan AF    AFG    1997           0           10\n2 Afghanistan AF    AFG    1998          30          129\n3 Afghanistan AF    AFG    1999           8           55\n4 Afghanistan AF    AFG    2000          52          228\n5 Afghanistan AF    AFG    2001         129          379\n6 Afghanistan AF    AFG    2002          90          476\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nwho.long &lt;- who %&gt;% pivot_longer(starts_with(\"new\"), names_to = \"demo\", values_to = \"n\") %&gt;%  filter(!is.na(n))\nhead(who.long)\n\n# A tibble: 6 × 6\n  country     iso2  iso3   year demo             n\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;\n1 Afghanistan AF    AFG    1997 new_sp_m014      0\n2 Afghanistan AF    AFG    1997 new_sp_m1524    10\n3 Afghanistan AF    AFG    1997 new_sp_m2534     6\n4 Afghanistan AF    AFG    1997 new_sp_m3544     3\n5 Afghanistan AF    AFG    1997 new_sp_m4554     5\n6 Afghanistan AF    AFG    1997 new_sp_m5564     2\n\n\n\n\n\nQuestion: How would we split demo into variables?\n\nhead(who.long)\n\n# A tibble: 6 × 6\n  country     iso2  iso3   year demo             n\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;\n1 Afghanistan AF    AFG    1997 new_sp_m014      0\n2 Afghanistan AF    AFG    1997 new_sp_m1524    10\n3 Afghanistan AF    AFG    1997 new_sp_m2534     6\n4 Afghanistan AF    AFG    1997 new_sp_m3544     3\n5 Afghanistan AF    AFG    1997 new_sp_m4554     5\n6 Afghanistan AF    AFG    1997 new_sp_m5564     2\n\n\nLook at the variable naming scheme:\n\nnames(who) %&gt;% grep(\"m014\",., value=TRUE)\n\n[1] \"new_sp_m014\" \"new_sn_m014\" \"new_ep_m014\" \"newrel_m014\"\n\n\nQuestion: How should we adjust the demo strings so as to be able to easily split all of them into the desired variables?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nwho.long &lt;- who.long %&gt;%  \n  mutate(demo = str_replace(demo, \"newrel\", \"new_rel\"))\ngrep(\"m014\",who.long$demo, value=TRUE) %&gt;%  unique()\n\n[1] \"new_sp_m014\"  \"new_sn_m014\"  \"new_ep_m014\"  \"new_rel_m014\"\n\n\n\n\n\nQuestion: After adjusting the demo strings, how would we then separate them into the desired variables?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nwho.long &lt;- who.long %&gt;% \n  separate(demo, into = c(\"new\", \"type\", \"sexagerange\"), sep=\"_\") %&gt;% \n  separate(sexagerange, into=c(\"sex\",\"age_range\"), sep=1) %&gt;%\n  select(-new)\nhead(who.long)\n\n# A tibble: 6 × 8\n  country     iso2  iso3   year type  sex   age_range     n\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n1 Afghanistan AF    AFG    1997 sp    m     014           0\n2 Afghanistan AF    AFG    1997 sp    m     1524         10\n3 Afghanistan AF    AFG    1997 sp    m     2534          6\n4 Afghanistan AF    AFG    1997 sp    m     3544          3\n5 Afghanistan AF    AFG    1997 sp    m     4554          5\n6 Afghanistan AF    AFG    1997 sp    m     5564          2",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#conclusion",
    "href": "exercise_tidyverse.html#conclusion",
    "title": "18  R Tidyverse Exercise",
    "section": "18.7 Conclusion",
    "text": "18.7 Conclusion\nNow our untidy data are tidy.\n\nhead(who.long)\n\n# A tibble: 6 × 8\n  country     iso2  iso3   year type  sex   age_range     n\n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n1 Afghanistan AF    AFG    1997 sp    m     014           0\n2 Afghanistan AF    AFG    1997 sp    m     1524         10\n3 Afghanistan AF    AFG    1997 sp    m     2534          6\n4 Afghanistan AF    AFG    1997 sp    m     3544          3\n5 Afghanistan AF    AFG    1997 sp    m     4554          5\n6 Afghanistan AF    AFG    1997 sp    m     5564          2",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "exercise_tidyverse.html#acknowledgment",
    "href": "exercise_tidyverse.html#acknowledgment",
    "title": "18  R Tidyverse Exercise",
    "section": "18.8 Acknowledgment",
    "text": "18.8 Acknowledgment\nThis exercise was modeled, in part, on this exercise:\nhttps://people.duke.edu/\\~ccc14/cfar-data-workshop-2018/CFAR_R_Workshop_2018_Exercisees.html",
    "crumbs": [
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>R Tidyverse Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html",
    "href": "recoding_reshaping_interactive.html",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "",
    "text": "19.1 Key points\nHere are some key points regarding recoding and reshaping data in R:",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#key-points",
    "href": "recoding_reshaping_interactive.html#key-points",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "",
    "text": "Count the number of times ID2 is duplicated\n\nsum(duplicated(b$ID2))\n\nList all rows with a duplicated c1 value\n\nf %&gt;% group_by(c1) %&gt;% filter(n()&gt;1)\n\nRecode data using left_join\nPivot data from long to wide\n\npivot_wider\n\nPivot data from wide to long\n\npivot_longer\n\nUseful table commands\n\ntable()\naddmargins(table())\nprop.table(table(), margin)",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#load-libraries",
    "href": "recoding_reshaping_interactive.html#load-libraries",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.2 Load Libraries",
    "text": "19.2 Load Libraries\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#project-1-data",
    "href": "recoding_reshaping_interactive.html#project-1-data",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.3 Project 1 Data",
    "text": "19.3 Project 1 Data\nIn the ds data frame we have the synthetic yet realistic data we will be using in Project 1.\nIn the dd data frame we have the corresponding data dictionary.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-1-duplicated-values",
    "href": "recoding_reshaping_interactive.html#exercise-1-duplicated-values",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.4 Exercise 1: duplicated values",
    "text": "19.4 Exercise 1: duplicated values\nSkill: Checking for duplicated IDs\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCheck if there are any duplicated sample_id’s using the duplicated command. If so, count how many duplicated sample_id’s there are.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nConstruct a table of the number of times each sample_id is duplicated:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nNote that it is important to be aware of missing IDs. So when constructing tables of counts using the table command, the useNA argument controls if the table includes counts of NA values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nHow many sample_id’s are NA’s?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCheck if there are any duplicated subject_ids\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nWe can check if there are any duplicated subject_id’s by counting how many duplicates there are.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#checking-for-duplicates",
    "href": "recoding_reshaping_interactive.html#checking-for-duplicates",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.5 Checking for duplicates",
    "text": "19.5 Checking for duplicates\nHow do we return every row that contains a duplicate?\nThis approach only does not return every row that contains a duplicated ID:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#counting-the-number-of-occurences-of-the-id",
    "href": "recoding_reshaping_interactive.html#counting-the-number-of-occurences-of-the-id",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.6 Counting the number of occurences of the ID",
    "text": "19.6 Counting the number of occurences of the ID\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#count-sample_id-duplicates",
    "href": "recoding_reshaping_interactive.html#count-sample_id-duplicates",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.7 Count sample_id duplicates",
    "text": "19.7 Count sample_id duplicates\nUsing Tidyverse commands, count how many times each sample_id occcurs in the ds data frame, reporting the counts in descending order, from highest to lowest.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#checking-for-duplicates-1",
    "href": "recoding_reshaping_interactive.html#checking-for-duplicates-1",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.8 Checking for duplicates",
    "text": "19.8 Checking for duplicates\nHere we list all of the rows containing a duplicated ‘ID’ value using functions from the ‘tidyverse’ package:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n19.8.1 How to list all duplicates\nUse Tidyverse commands to list (1) all duplicates for sample_id and (2) all duplicates for subject_id. Sort the results by the ID.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n19.8.2 Sample ID\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n19.8.3 Subject ID\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-2-reshaping-data",
    "href": "recoding_reshaping_interactive.html#exercise-2-reshaping-data",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.9 Exercise 2: Reshaping data",
    "text": "19.9 Exercise 2: Reshaping data\nSkill: Reshaping data\nSelect only three columns “sample_id”, “Sample_trimester”, “Gestationalage_sample”, and then reshape from ‘long’ format to ‘wide’ format using pivot_wider, taking time as the “Sample_trimester”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n19.9.1 Comment\nView b2 via the View(b2) command in RStudio - it nicely put all the different gestational age observations into one list for each sample_id x Sample_trimester combination.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-3-aggregating-data",
    "href": "recoding_reshaping_interactive.html#exercise-3-aggregating-data",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.10 Exercise 3: Aggregating data",
    "text": "19.10 Exercise 3: Aggregating data\nSkill: Aggregating data\nMake a table showing the proportion of blacks and whites that are controls and cases.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n19.10.1 Comment:\nThe margin parameter of the prop.table command has to be specified in order to get the desired answer: “1 indicates rows, 2 indicates columns.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nConstruct more readable tables with labels using xtabs\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n19.10.2 xtabs table with labels\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCreate a count cross table using Tidyverse commands\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nCreate a proportion cross table using Tidyverse commands\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-4-summarizing-within-groups",
    "href": "recoding_reshaping_interactive.html#exercise-4-summarizing-within-groups",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.11 Exercise 4: Summarizing within groups",
    "text": "19.11 Exercise 4: Summarizing within groups\nSkill: Summarizing within groups\nApply the summary command to the “Gestationalage_sample” within each “Sample_trimester” group.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote: With split(x, f), any missing values in f are dropped together with the corresponding values of x.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-5-recoding-data",
    "href": "recoding_reshaping_interactive.html#exercise-5-recoding-data",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.12 Exercise 5: Recoding data",
    "text": "19.12 Exercise 5: Recoding data\nApproach 1\n\nImplement our dictionaries using look-up tables\n\nUse a named vector.\n\n\nSkill:: Recoding IDs using a dictionary\nCreate a new subject ID column named “subjectID” where you have used the DictPer named vector to recode the original “subject_id” IDs into integer IDs.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#recoding-data",
    "href": "recoding_reshaping_interactive.html#recoding-data",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.13 Recoding data",
    "text": "19.13 Recoding data\nApproach 2\n\nImplement our dictionaries using left joins\n\n\n19.13.1 Comment\nI usually prefer to use a merge command like left_join to merge in the new IDs into my data frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-6-filtering-rows",
    "href": "recoding_reshaping_interactive.html#exercise-6-filtering-rows",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.14 Exercise 6: Filtering rows",
    "text": "19.14 Exercise 6: Filtering rows\nSkill: Filtering rows.\nCreate a data frame tri1 containing the records for Trimester 1, and a second data frame tri2 containing the records for Trimester 2.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "recoding_reshaping_interactive.html#exercise-7",
    "href": "recoding_reshaping_interactive.html#exercise-7",
    "title": "19  R Recoding Reshaping Exercise",
    "section": "19.15 Exercise 7",
    "text": "19.15 Exercise 7\nSkill: Selecting columns\nUpdate tri1 and tri2 to only contain the three columns “sample_id”, “Sample_trimester”, “Gestationalage_sample”\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>R Recoding Reshaping Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html",
    "href": "merging_exercise.html",
    "title": "20  R Merging Exercise",
    "section": "",
    "text": "20.1 Merging Best Practice",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#merging-best-practice",
    "href": "merging_exercise.html#merging-best-practice",
    "title": "20  R Merging Exercise",
    "section": "",
    "text": "Always be careful when merging.\n\nAlways check for duplicated IDs before doing the merge.\n\nAlways check that your ID columns do not contain any missing values.\nCheck that the values in the ID columns (e.g., the keys) match.\n\nCan use an anti_join to check this.\n\n\nInconsistencies in the values of the keys can be hard to fix.\n\nAlways check the dimensions, before and after the merge, to make sure the merged object has the expected number of rows and columns.\n\nAlways explicitly name the keys you are merging on.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#load-libraries",
    "href": "merging_exercise.html#load-libraries",
    "title": "20  R Merging Exercise",
    "section": "20.2 Load Libraries",
    "text": "20.2 Load Libraries\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#input-data",
    "href": "merging_exercise.html#input-data",
    "title": "20  R Merging Exercise",
    "section": "20.3 Input data",
    "text": "20.3 Input data\nLet’s load the synthetic simulated Project 1 data and associated data dictionary:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#select-a-subset-of-subject-level-fields",
    "href": "merging_exercise.html#select-a-subset-of-subject-level-fields",
    "title": "20  R Merging Exercise",
    "section": "20.4 Select a subset of subject-level fields",
    "text": "20.4 Select a subset of subject-level fields\nSet up a data frame ‘a’ that has these subject-level fields: “subject_id” “maternal_age_delivery” “case_control_status” “prepregnancy_BMI”\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#unique-records",
    "href": "merging_exercise.html#unique-records",
    "title": "20  R Merging Exercise",
    "section": "20.5 Unique records",
    "text": "20.5 Unique records\nThe data were given to us in a way that repeated subject-level information, once for each sample from each individual subject.\nFrom your data frame ‘a’ select only the unique records, creating data frame b.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n20.5.1 Comment\nIt is better to apply unique to the whole data frame, not just to the subject_id column, as that ensures that you are selecting whole records that are unique across all of their columns.\nNote that the dplyr R package provides the distinct command, which keeps only unique/distinct rows from a data frame. It is faster than the unique command.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#check-that-the-subject_ids-are-now-not-duplicated",
    "href": "merging_exercise.html#check-that-the-subject_ids-are-now-not-duplicated",
    "title": "20  R Merging Exercise",
    "section": "20.6 Check that the subject_id’s are now not duplicated",
    "text": "20.6 Check that the subject_id’s are now not duplicated\nAre the subject_id’s unique?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#create-random-integer-ids",
    "href": "merging_exercise.html#create-random-integer-ids",
    "title": "20  R Merging Exercise",
    "section": "20.7 Create random integer IDs",
    "text": "20.7 Create random integer IDs\nCreate a new column ID containing randomly chosen integer IDs; this is necessary to de-identify the data. To do this, use the sample command, sampling integers from 1 to the number of rows in data frame b.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#merge-in-new-phenotype-information",
    "href": "merging_exercise.html#merge-in-new-phenotype-information",
    "title": "20  R Merging Exercise",
    "section": "20.8 Merge in new phenotype information",
    "text": "20.8 Merge in new phenotype information\nThe PI has sent you new trait data for your subjects.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nCarefully merge this in using tidyverse commands.\nIf you notice any problems with this merge, prepare a report for the PI detailing what you noticed and what you’d like to ask the PI about.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#always-be-careful-when-merging.",
    "href": "merging_exercise.html#always-be-careful-when-merging.",
    "title": "20  R Merging Exercise",
    "section": "20.9 Always be careful when merging.",
    "text": "20.9 Always be careful when merging.\n\nAlways check for duplicated IDs before doing the merge.\nAlways check that your ID columns do not contain any missing values.\nCheck that the values in the ID columns (e.g., the keys) match.\n\nCan use an ‘anti_join’ to check this.\nInconsistencies in the values of the keys can be hard to fix.\n\nAlways check the dimensions to make sure the merged object has the expected number of rows and columns.\nAlways explicitly name the keys you are merging on.\n\nIf you don’t name them, then the join command will use all variables in common across x and y.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#merge-in-new-phenotype-information-1",
    "href": "merging_exercise.html#merge-in-new-phenotype-information-1",
    "title": "20  R Merging Exercise",
    "section": "20.10 Merge in new phenotype information",
    "text": "20.10 Merge in new phenotype information\nCarefully merge in the new data in using tidyverse commands. As this is subject-level information, it should be merged into the subject-level data frame b which was created above when from your data frame ‘a’ you selected only the unique records.\nIf you notice any problems with this merge, prepare a report for the PI detailing what you noticed and what you’d like to ask the PI about.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "merging_exercise.html#further-checks",
    "href": "merging_exercise.html#further-checks",
    "title": "20  R Merging Exercise",
    "section": "20.11 Further checks",
    "text": "20.11 Further checks\nWhen merging data based on an ID shared in common, it is not only important to check for duplicated IDs, but it is also important to check for overlap of the two ID sets.\nCheck if the set of subject_id IDs in your dataframe b fully overlaps the set of subject_id IDs in the new data set. If there is not full overlap, document which IDs do not overlap.\nHint: Use an anti_join.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nanti_join() return all rows from x without a match in y.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>R Merging Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html",
    "href": "R_graphics_exercises.html",
    "title": "21  R Graphics Exercise",
    "section": "",
    "text": "21.1 The Grammer of Graphics\nThis slide set by Garrick Aden-Buie provides a nice introduction to plotting with ggplot2:\nA Gentle Guide to the Grammer of Graphics with ggplot2\nSlides: https://gadenbuie.github.io/gentle-ggplot2\nSource: https://github.com/gadenbuie/gentle-ggplot2",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#load-libraries",
    "href": "R_graphics_exercises.html#load-libraries",
    "title": "21  R Graphics Exercise",
    "section": "21.2 Load Libraries",
    "text": "21.2 Load Libraries\n\nlibrary(tidyverse)\nlibrary(ggforce)\n# library(tidylog)\n# Set the default font to be a bit larger:\ntheme_set(theme_gray(base_size = 18))",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#exercise-1",
    "href": "R_graphics_exercises.html#exercise-1",
    "title": "21  R Graphics Exercise",
    "section": "21.3 Exercise 1",
    "text": "21.3 Exercise 1\nRead in and set up the data set b, a cleaned version of our simulated data set:\n\na &lt;- read.csv(\"data/study1.csv\")\na$ind &lt;- seq_along(a$t)\nb &lt;- a[-c(1001:1004),]\nb$g.f &lt;- factor(b$g)\nb$geno &lt;- paste(b$all1,b$all2,sep=\"/\")\n\nUsing ggplot and data set b, plot ind vs. t, coloring by case-control status (trait). What do you observe about the data?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nggplot(data=b, aes(x=ind, y=t, color=trait)) + \n   geom_point()",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#exercise-2",
    "href": "R_graphics_exercises.html#exercise-2",
    "title": "21  R Graphics Exercise",
    "section": "21.4 Exercise 2",
    "text": "21.4 Exercise 2\nUsing ggplot, plot ind vs. t, coloring by case-control status (trait) and faceting by geno. What do you observe about the data?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nggplot(data=b, aes(x=ind, y=t, color=trait)) + \n  geom_point() + \n  facet_grid(~ geno)",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#facetting",
    "href": "R_graphics_exercises.html#facetting",
    "title": "21  R Graphics Exercise",
    "section": "21.5 Facetting",
    "text": "21.5 Facetting\nFacetting can be done using the classic interface, where formula notation is used to indicate rows (before the ~) and columns (after the ~). According to the facet_grid documentation\n\n“the dot in the formula is used to indicate there should be no faceting on this dimension (either row or column)”\n\nSo this will facet in columns by geno:\nfacet_grid(~ geno)\nThis will facet in rows by geno:\nfacet_grid(geno ~ .)\nThe current recommended notation for facetting instead clearly names the rows and columns that you’d like to facet on.\nThis will facet in columns by geno:\nfacet_grid(cols = vars(geno))\nThis will facet in rows by geno:\nfacet_grid(rows = vars(geno))\nTry these various ways of facetting out.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\ng &lt;- ggplot(data=b, aes(x=ind, y=t, color=trait)) + \n  geom_point() \ng  + \n  facet_grid(. ~ geno)\n\n\n\n\n\n\n\n\n\ng + facet_grid(geno ~ .)\n\n\n\n\n\n\n\n\n\ng + facet_grid(cols = vars(geno))\n\n\n\n\n\n\n\n\n\ng + facet_grid(rows = vars(geno))",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#always-plot-your-data",
    "href": "R_graphics_exercises.html#always-plot-your-data",
    "title": "21  R Graphics Exercise",
    "section": "21.6 Always plot your data",
    "text": "21.6 Always plot your data\n\nlibrary(tidyverse)\nd &lt;- read_tsv(\"data/example.tsv\")\n\nNew names:\nRows: 142 Columns: 26\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \"\\t\" dbl\n(26): x...1, y...2, x...3, y...4, x...5, y...6, x...7, y...8, x...9, y.....\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `x` -&gt; `x...1`\n• `y` -&gt; `y...2`\n• `x` -&gt; `x...3`\n• `y` -&gt; `y...4`\n• `x` -&gt; `x...5`\n• `y` -&gt; `y...6`\n• `x` -&gt; `x...7`\n• `y` -&gt; `y...8`\n• `x` -&gt; `x...9`\n• `y` -&gt; `y...10`\n• `x` -&gt; `x...11`\n• `y` -&gt; `y...12`\n• `x` -&gt; `x...13`\n• `y` -&gt; `y...14`\n• `x` -&gt; `x...15`\n• `y` -&gt; `y...16`\n• `x` -&gt; `x...17`\n• `y` -&gt; `y...18`\n• `x` -&gt; `x...19`\n• `y` -&gt; `y...20`\n• `x` -&gt; `x...21`\n• `y` -&gt; `y...22`\n• `x` -&gt; `x...23`\n• `y` -&gt; `y...24`\n• `x` -&gt; `x...25`\n• `y` -&gt; `y...26`\n\nn1 &lt;- rep(c(\"x\",\"y\"), 13)\nn2 &lt;- c(\"\",\"\",rep(\"_\",24))\nn3 &lt;- c(\"\", \"\", c(sort(rep(c(1:12), 2))))\nnames(d) &lt;- paste0(n1,n2,n3)\nnames(d)\n\n [1] \"x\"    \"y\"    \"x_1\"  \"y_1\"  \"x_2\"  \"y_2\"  \"x_3\"  \"y_3\"  \"x_4\"  \"y_4\" \n[11] \"x_5\"  \"y_5\"  \"x_6\"  \"y_6\"  \"x_7\"  \"y_7\"  \"x_8\"  \"y_8\"  \"x_9\"  \"y_9\" \n[21] \"x_10\" \"y_10\" \"x_11\" \"y_11\" \"x_12\" \"y_12\"",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#similar-regression-lines",
    "href": "R_graphics_exercises.html#similar-regression-lines",
    "title": "21  R Graphics Exercise",
    "section": "21.7 Similar regression lines",
    "text": "21.7 Similar regression lines\nThese three data sets have very similar regression lines:\n\nsummary(lm(x ~ y, data=d)) %&gt;%  coef()\n\n               Estimate Std. Error    t value     Pr(&gt;|t|)\n(Intercept) 56.17563819 2.87986960 19.5063131 9.435087e-42\ny           -0.03991951 0.05250204 -0.7603419 4.483288e-01\n\nsummary(lm(x_1 ~ y_1, data=d)) %&gt;%  coef()\n\n               Estimate Std. Error    t value     Pr(&gt;|t|)\n(Intercept) 56.31108156 2.87906158 19.5588319 7.158847e-42\ny_1         -0.04269949 0.05249244 -0.8134407 4.173467e-01\n\nsummary(lm(x_3 ~ y_3, data=d)) %&gt;%  coef()\n\n               Estimate Std. Error    t value     Pr(&gt;|t|)\n(Intercept) 56.18271411 2.87924135 19.5130270 9.107718e-42\ny_3         -0.04012859 0.05249468 -0.7644316 4.458966e-01\n\n\n\nggplot(d,aes(x=x,y=y)) + geom_point() +\n  geom_smooth(method=\"lm\") + ggtitle(\"Linear regression of y ~ x\")\n\n\n\n\n\n\n\n\nNow try this:\nggplot(d,aes(x=x_1,y=y_1)) + geom_point() + \n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nggplot(d,aes(x=x_1,y=y_1)) + geom_point() + \n  geom_smooth(method=\"lm\") + ggtitle(\"Linear regression of y_1 ~ x_1\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nAnd now try this:\nggplot(d,aes(x=x_3,y=y_3)) + geom_point() + \n  geom_smooth(method=\"lm\")\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n21.7.1 Always plot your data!\n\nggplot(d,aes(x=x_3,y=y_3)) + geom_point() + \n  geom_smooth(method=\"lm\") + ggtitle(\"Linear regression of y_3 ~ x_3\")\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#always-plot-your-data-2",
    "href": "R_graphics_exercises.html#always-plot-your-data-2",
    "title": "21  R Graphics Exercise",
    "section": "21.8 Always plot your data",
    "text": "21.8 Always plot your data\n\nf &lt;- read_tsv(\"data/BoxPlots.tsv\")\n# Delete the first column\nf &lt;- f[,-1]\nhead(f)\n\n# A tibble: 6 × 5\n   left lines normal right split\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 -9.77 -9.77  -9.76 -9.76 -9.77\n2 -9.76 -9.74  -9.72 -9.05 -9.77\n3 -9.75 -9.77  -9.68 -8.51 -9.77\n4 -9.77 -9.77  -9.64 -8.24 -9.77\n5 -9.76 -9.77  -9.6  -8.82 -9.77\n6 -9.77 -9.76  -9.56 -8.07 -9.76\n\n\nStacking vectors concatenates multiple vectors into a single vector along with a factor indicating where each observation originated.\n\nhead(stack(f),2)\n\n     values  ind\n1 -9.769107 left\n2 -9.763145 left\n\n\nNow try this:\nggplot(stack(f), aes(x = ind, y = values)) +\n  geom_boxplot()\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n21.9 Identical box plots\nThese data have essentially identical box plots.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#identical-box-plots",
    "href": "R_graphics_exercises.html#identical-box-plots",
    "title": "21  R Graphics Exercise",
    "section": "21.9 Identical box plots",
    "text": "21.9 Identical box plots\nThese data have essentially identical box plots.",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#boxplots",
    "href": "R_graphics_exercises.html#boxplots",
    "title": "21  R Graphics Exercise",
    "section": "21.10 Boxplots",
    "text": "21.10 Boxplots\nWhile the box plots are identical, box plots may not tell the whole story.\nLet’s try violin plots instead:\nggplot(stack(f), aes(x = ind, y = values)) +\n  geom_violin()\nA violin plot is a mirrored density plot.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n21.11 Non-identical violin plots",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#non-identical-violin-plots",
    "href": "R_graphics_exercises.html#non-identical-violin-plots",
    "title": "21  R Graphics Exercise",
    "section": "21.11 Non-identical violin plots",
    "text": "21.11 Non-identical violin plots",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#sina-plots",
    "href": "R_graphics_exercises.html#sina-plots",
    "title": "21  R Graphics Exercise",
    "section": "21.12 Sina plots",
    "text": "21.12 Sina plots\nSidiropoulos N, Sohi SH, Pedersen TL, Porse BT, Winther O, Rapin N, Bagger FO. SinaPlot: An Enhanced Chart for Simple and Truthful Representation of Single Observations Over Multiple Classes. Journal of Computational and Graphical Statistics. Taylor & Francis; 2018 Jul 3;27(3):673–676. DOI: https://doi.org/10.1080/10618600.2017.1366914\nlibrary(ggforce)\nggplot(stack(f), aes(x = ind, y = values)) +\n   geom_violin() + geom_sina()\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n21.13 Sina plots",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#sina-plots-1",
    "href": "R_graphics_exercises.html#sina-plots-1",
    "title": "21  R Graphics Exercise",
    "section": "21.13 Sina plots",
    "text": "21.13 Sina plots",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#sina-plots-2",
    "href": "R_graphics_exercises.html#sina-plots-2",
    "title": "21  R Graphics Exercise",
    "section": "21.14 Sina plots",
    "text": "21.14 Sina plots\nmethod == \"counts\": The borders are defined by the number of samples that occupy the same bin.\nggplot(stack(f), aes(x = ind, y = values)) +\n   geom_violin() + geom_sina(method=\"count\")\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n21.15 Sina plots",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#sina-plots-3",
    "href": "R_graphics_exercises.html#sina-plots-3",
    "title": "21  R Graphics Exercise",
    "section": "21.15 Sina plots",
    "text": "21.15 Sina plots",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#raincloud-plots",
    "href": "R_graphics_exercises.html#raincloud-plots",
    "title": "21  R Graphics Exercise",
    "section": "21.16 Raincloud plots",
    "text": "21.16 Raincloud plots\nRaincloud plots can be created by using the geom_rain geometry from the ggrain R package.\n\n“These”raincloud plots” can visualize raw data, probability density, and key summary statistics such as median, mean, and relevant confidence intervals in an appealing and flexible format with minimal redundancy.”\n\nAllen M, Poggiali D, Whitaker K, Marshall TR, Van Langen J, Kievit RA. Raincloud plots: a multi-platform tool for robust data visualization. Wellcome Open Res. 2021 Jan 21;4:63. PMID: 31069261 PMCID: PMC6480976 DOI: https://doi.org/10.12688/wellcomeopenres.15191.2\nhttps://github.com/RainCloudPlots/RainCloudPlots\nTry it out.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nlibrary(ggrain)\n\nRegistered S3 methods overwritten by 'ggpp':\n  method                  from   \n  heightDetails.titleGrob ggplot2\n  widthDetails.titleGrob  ggplot2\n\nggplot(stack(f), aes(x = ind, y = values)) + geom_rain()",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#drawing-multiple-graphs",
    "href": "R_graphics_exercises.html#drawing-multiple-graphs",
    "title": "21  R Graphics Exercise",
    "section": "21.17 Drawing multiple graphs",
    "text": "21.17 Drawing multiple graphs\nSometimes we’d like to draw multiple plots, looping across variables. Doing this within an R Markdown or Quarto Markdown document using ggplot2 is tricky. See https://dplyr.tidyverse.org/articles/programming.html and https://r4ds.hadley.nz/functions.html#plot-functions for details.\nHere’s one way to do this - this example code will generate two scatter plots:\n\nx.names &lt;- c(\"x\",\"x_1\")\ny.names &lt;- c(\"y\", \"y_1\")\nfor (i in 1:2) {\n  x.nam &lt;- sym(x.names[i])\n  y.nam &lt;- sym(y.names[i])\n  print(ggplot(data=d, aes(x = {{ x.nam }}, \n                           y = {{ y.nam }})) + \n          geom_point())\n}",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#writing-ggplot-functions",
    "href": "R_graphics_exercises.html#writing-ggplot-functions",
    "title": "21  R Graphics Exercise",
    "section": "21.18 Writing ggplot functions",
    "text": "21.18 Writing ggplot functions\nSee https://r4ds.hadley.nz/functions.html#plot-functions\n\nlibrary(palmerpenguins)\n\nPlDensity &lt;- function(fill, ...) {\n  ggplot(penguins %&gt;% filter(!is.na(bill_length_mm)), \n         aes(bill_length_mm, fill = {{ fill }})) +\n    geom_density(alpha = 0.5) +\n    facet_wrap(vars(...))\n}\n\nExample from: https://twitter.com/yutannihilat_en/status/1574387230025875457?s=20&t=FLbwErwEKQKWtKIGufDLIQ\n\nPlDensity(species)\n\n\n\n\n\n\n\n\n\nPlDensity(island, sex) %&gt;% print() %&gt;% suppressWarnings()\n\n\n\n\n\n\n\n\n\nPlDensity(sex, island, year) %&gt;% print() %&gt;% suppressWarnings()",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#exercise-3",
    "href": "R_graphics_exercises.html#exercise-3",
    "title": "21  R Graphics Exercise",
    "section": "21.19 Exercise 3",
    "text": "21.19 Exercise 3\nConsider this example code:\n\nhistogram &lt;- function(df, var, binwidth) {\n  df |&gt; \n    ggplot(aes({{ var }})) + \n    geom_histogram(binwidth = binwidth)\n}\n\nFrom: https://twitter.com/hadleywickham/status/1574373127349575680?s=20&t=FLbwErwEKQKWtKIGufDLIQ\nWhen applied to the quantitative trait t from the data frame b, this generates this histogram:\n\nhistogram(b, t, 0.1)\n\n\n\n\n\n\n\n\n\n21.19.1 Exercise\nAfter reading the example above, extend the histogram function to allow facetting and use it to draw a histogram of the quantitative trait t facetted by geno using the data set b that we set up above.\n\n\n\n\n\n\nHints\n\n\n\n\nSee https://r4ds.hadley.nz/functions.html#plot-functions\nUse the { var } approach\n\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nHadley Wickham states:\nYou have to use the vars() syntax\nfoo &lt;- function(x) {\n  ggplot(mtcars) +\n    aes(x = mpg, y = disp) +\n    geom_point() +\n    facet_wrap(vars({{ x }}))\n}\nTweet: https://twitter.com/hadleywickham/status/1574380137524887554?s=20&t=FLbwErwEKQKWtKIGufDLIQ\n\nhistogram &lt;- function(df, var, binwidth, grp) {\n  df |&gt; \n    ggplot(aes({{ var }})) + \n    geom_histogram(binwidth = binwidth) +\n    facet_wrap(vars({{ grp }}))\n}\n\n\nhistogram(b, t, 0.1)\n\n\n\n\n\n\n\n\n\nhistogram(b, t, 0.1, geno)",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "R_graphics_exercises.html#source-of-data",
    "href": "R_graphics_exercises.html#source-of-data",
    "title": "21  R Graphics Exercise",
    "section": "21.20 Source of data",
    "text": "21.20 Source of data\nIllustrative data sets from https://www.research.autodesk.com/publications/same-stats-different-graphs/",
    "crumbs": [
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>R Graphics Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html",
    "href": "reorder_exercise.html",
    "title": "22  R Reordering Exercise",
    "section": "",
    "text": "22.1 Load Libraries\nlibrary(tidyverse)\nlibrary(tidylog)",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#create-some-example-data",
    "href": "reorder_exercise.html#create-some-example-data",
    "title": "22  R Reordering Exercise",
    "section": "22.2 Create some example data",
    "text": "22.2 Create some example data\nHere we set up a data dictionary dd and some corresponding data ds. However, it is better if the order of the rows in the data dictionary dd match the order of the columns in the data ds.\n\nset.seed(1562345)\n# Set up a data dictionary\ndd &lt;- data.frame(VARNAME = sample(letters, 26), TYPE = \"numeric\")\n# Set up data\nds &lt;- as.data.frame(t(dd %&gt;%\n    arrange(VARNAME)))\nnames(ds) &lt;- letters\nrownames(ds) &lt;- NULL\nds[1, ] &lt;- rnorm(26)\nds[2, ] &lt;- runif(26)\nds$ID &lt;- c(1, 2)\nds &lt;- ds %&gt;%\n    select(ID, everything())\n\nselect: columns reordered (ID, a, b, c, d, …)\n\n# Randomly rearrange the columns\nidx &lt;- sample(letters, 26)\nidx &lt;- c(\"ID\", idx)\nds &lt;- ds %&gt;%\n    select(all_of(idx))\n\nselect: columns reordered (ID, b, z, a, p, …)\n\ndd &lt;- bind_rows(dd, data.frame(VARNAME = \"ID\", TYPE = \"string\"))\ndim(dd)\n\n[1] 27  2\n\nhead(dd)\n\n  VARNAME    TYPE\n1       c numeric\n2       m numeric\n3       f numeric\n4       e numeric\n5       a numeric\n6       d numeric\n\ndim(ds)\n\n[1]  2 27\n\nhead(ds[1:3])\n\n  ID                 b                 z\n1  1  1.02333343074042  0.47956883003516\n2  2 0.858655267162248 0.136965574463829\n\nnames(ds)\n\n [1] \"ID\" \"b\"  \"z\"  \"a\"  \"p\"  \"f\"  \"u\"  \"m\"  \"q\"  \"n\"  \"d\"  \"o\"  \"s\"  \"k\"  \"e\" \n[16] \"x\"  \"c\"  \"h\"  \"i\"  \"g\"  \"j\"  \"r\"  \"t\"  \"y\"  \"l\"  \"w\"  \"v\"",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#task-reorder-rows-in-dd-in-the-order-of-dss-columns",
    "href": "reorder_exercise.html#task-reorder-rows-in-dd-in-the-order-of-dss-columns",
    "title": "22  R Reordering Exercise",
    "section": "22.3 Task: Reorder rows in dd in the order of ds’s columns",
    "text": "22.3 Task: Reorder rows in dd in the order of ds’s columns\n\ncolnames(ds)\n\n [1] \"ID\" \"b\"  \"z\"  \"a\"  \"p\"  \"f\"  \"u\"  \"m\"  \"q\"  \"n\"  \"d\"  \"o\"  \"s\"  \"k\"  \"e\" \n[16] \"x\"  \"c\"  \"h\"  \"i\"  \"g\"  \"j\"  \"r\"  \"t\"  \"y\"  \"l\"  \"w\"  \"v\" \n\ndd$VARNAME\n\n [1] \"c\"  \"m\"  \"f\"  \"e\"  \"a\"  \"d\"  \"v\"  \"h\"  \"k\"  \"t\"  \"p\"  \"j\"  \"l\"  \"x\"  \"w\" \n[16] \"y\"  \"b\"  \"o\"  \"s\"  \"r\"  \"i\"  \"z\"  \"u\"  \"n\"  \"g\"  \"q\"  \"ID\"\n\n\nThis assumes that every row of dd is in colnames(ds) and every colnames(ds) value is represented in dd. Perhaps that should be checked first.",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#assumption-check-question",
    "href": "reorder_exercise.html#assumption-check-question",
    "title": "22  R Reordering Exercise",
    "section": "22.4 Assumption Check Question",
    "text": "22.4 Assumption Check Question\nHow would you check that every variable listed in the data dictionary dd is named in colnames(ds) and every colnames(ds) value is represented in the data dictionary dd?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\ntable(dd$VARNAME %in% colnames(ds))\n\n\nTRUE \n  27 \n\ntable(colnames(ds) %in% dd$VARNAME)\n\n\nTRUE \n  27 \n\n\nNote that we should also check to see if the VARNAME’s are unique and the colnames of ds are unique.\n\nsum(duplicated(dd$VARNAME))\n\n[1] 0\n\nsum(duplicated(colnames(ds)))\n\n[1] 0",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#task-reorder-rows-in-dd-to-match-the-order-of-the-columns-in-ds",
    "href": "reorder_exercise.html#task-reorder-rows-in-dd-to-match-the-order-of-the-columns-in-ds",
    "title": "22  R Reordering Exercise",
    "section": "22.5 Task: Reorder rows in dd to match the order of the columns in ds",
    "text": "22.5 Task: Reorder rows in dd to match the order of the columns in ds\nTask: Reorder rows in the data dictionary dd to match the order of the columns in the data ds\n\nWhat are various ways you could rearrange the rows of a data frame?\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n# Assign VARNAME to be the rownames of dd\nrownames(dd) &lt;- dd$VARNAME\n# Rearrange by row names:\ndd2 &lt;- dd[colnames(ds), ]\n# Check if this worked:\nall.equal(dd2$VARNAME, colnames(ds))\n\n[1] TRUE\n\n\nWe can use match also:\n\n# match returns a vector of the positions of (first) matches of its first\n# argument in its second.\ndd3 &lt;- dd[match(colnames(ds), dd$VARNAME), ]\n# Check if this worked:\nall.equal(dd3$VARNAME, colnames(ds))\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#question-use-arrange",
    "href": "reorder_exercise.html#question-use-arrange",
    "title": "22  R Reordering Exercise",
    "section": "22.6 Question: use arrange?",
    "text": "22.6 Question: use arrange?\nQuestion: Is there a way to do this using arrange?\n\n\n\n\n\n\nExpand to see the first attempt\n\n\n\n\n\nThis does not work, because tidyverse wants to work on columns of data within dd:\n\ndd4 &lt;- dd %&gt;%\n    arrange(colnames(ds))\n# Check if this worked:\nall.equal(dd4$VARNAME, colnames(ds))\n\n[1] \"26 string mismatches\"",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#question-use-arrange-1",
    "href": "reorder_exercise.html#question-use-arrange-1",
    "title": "22  R Reordering Exercise",
    "section": "22.7 Question: use arrange?",
    "text": "22.7 Question: use arrange?\nQuestion: Is there a way to do this using arrange?\narrange() orders the rows of a data frame by the values of selected columns.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\ndd4 &lt;- dd %&gt;%\n    mutate(neworder = match(.$VARNAME, colnames(ds))) %&gt;%\n    arrange(neworder) %&gt;%\n    select(-neworder)\n\nmutate: new variable 'neworder' (integer) with 27 unique values and 0% NA\nselect: dropped one variable (neworder)\n\nall.equal(dd4$VARNAME, colnames(ds))\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#question-use-slice",
    "href": "reorder_exercise.html#question-use-slice",
    "title": "22  R Reordering Exercise",
    "section": "22.8 Question: use slice",
    "text": "22.8 Question: use slice\nQuestion: Is there a way to do this using the slice command?\nslice() lets you index rows by their (integer) locations.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\ndd6 &lt;- dd %&gt;%\n    slice(match(colnames(ds), .$VARNAME))\n\nslice: no rows removed\n\nall.equal(dd6$VARNAME, colnames(ds))\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#question-use-select",
    "href": "reorder_exercise.html#question-use-select",
    "title": "22  R Reordering Exercise",
    "section": "22.9 Question: use select?",
    "text": "22.9 Question: use select?\nQuestion: Is there a way to do this by transposing and then using select?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n# Transpose so rows become columns, and then we can use 'select' to rearrange\n# those columns, and then transpose back, and rename columns as needed.\ndd5 &lt;- dd %&gt;%\n    t() %&gt;%\n    as_tibble(.name_repair = \"unique\") %&gt;%\n    select(colnames(ds)) %&gt;%\n    t() %&gt;%\n    as.data.frame() %&gt;%\n    rename(VARNAME = \"V1\", TYPE = \"V2\")\n\nselect: columns reordered (ID, b, z, a, p, …)\nrename: renamed 2 variables (VARNAME, TYPE)\n\nall.equal(dd5$VARNAME, colnames(ds))\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "reorder_exercise.html#question-use-row-names",
    "href": "reorder_exercise.html#question-use-row-names",
    "title": "22  R Reordering Exercise",
    "section": "22.10 Question: use row names",
    "text": "22.10 Question: use row names\nQuestion: What about using row names?\n“While a tibble can have row names (e.g., when converting from a regular data frame), they are removed when subsetting with the [ operator. A warning will be raised when attempting to assign non-NULL row names to a tibble. Generally, it is best to avoid row names, because they are basically a character column with different semantics than every other column.”\nFrom: https://tibble.tidyverse.org/reference/rownames.html",
    "crumbs": [
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>R Reordering Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "",
    "text": "24 Exploratory Data Analysis",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#load-libraries",
    "href": "EDA.html#load-libraries",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.1 Load Libraries",
    "text": "24.1 Load Libraries\n\nlibrary(tidyverse)\nlibrary(tidylog)\nlibrary(DataExplorer)\nlibrary(GGally)",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#explore-project-1-data",
    "href": "EDA.html#explore-project-1-data",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.2 Explore Project 1 data",
    "text": "24.2 Explore Project 1 data\nLet’s explore the Project 1 data set:\n\nload(\"data/project1.RData\", verbose = TRUE)\n\nLoading objects:\n  ds\n  dd\n\n\n\nds = data set\ndd = data dictionary\n\nProject 1 Questions\n\nWhich of the measurements are sample-specific?\nWhich are subject-specific?\nHow to structure the data for sharing via dbGaP?",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#dimensions",
    "href": "EDA.html#dimensions",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.3 Dimensions",
    "text": "24.3 Dimensions\n\nWhat are the dimensions of our data?",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#dimensions-1",
    "href": "EDA.html#dimensions-1",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.4 Dimensions",
    "text": "24.4 Dimensions\nTask: Examine the dimensions of our data and data dictionary.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n24.4.1 Data ds\n\ndim(ds)\n\n[1] 191  24\n\nnames(ds)\n\n [1] \"sample_id\"                \"Sample_trimester\"        \n [3] \"Gestationalage_sample\"    \"subject_id\"              \n [5] \"strata\"                   \"race\"                    \n [7] \"maternal_age_delivery\"    \"case_control_status\"     \n [9] \"prepregnancy_weight\"      \"height\"                  \n[11] \"prepregnancy_BMI\"         \"gravidity\"               \n[13] \"parity\"                   \"gestationalage_delivery\" \n[15] \"average_SBP_lt20weeks\"    \"average_DBP_lt20weeks\"   \n[17] \"average_SBP_labor\"        \"average_DBP_labor\"       \n[19] \"smoke_lifetime\"           \"baby_birthweight\"        \n[21] \"baby_sex\"                 \"baby_birthweight_centile\"\n[23] \"baby_SGA\"                 \"placental_pathology\"     \n\n\n\n\n24.4.2 Data dictionay dd\n\ndim(dd)\n\n[1] 27  5\n\nnames(dd)\n\n[1] \"Original.Variable.Name\" \"R21.Variable.Name\"      \"Description\"           \n[4] \"Variable.Units\"         \"Variable.Coding\"",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#arrangement",
    "href": "EDA.html#arrangement",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.5 Arrangement",
    "text": "24.5 Arrangement\n\nHow are the data arranged?\n\nIs it in tidy format?\nIs it one row per sample or per subject?\nWere subjects sampled more than once?\n\n\n\n24.5.1 Samples or subjects\nIs it one row per sample or per subject?\nQuestion: How would you figure out the answer to this question?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nsum(duplicated(ds$sample_id))\n\n[1] 72\n\nlength(unique(ds$sample_id))\n\n[1] 119\n\nlength(unique(ds$subject_id))\n\n[1] 54\n\n\n\n\n\n\n\n24.5.2 Unique values\nTo figure out which phenotypes vary within subjects, it would be helpful to answer this question:\nQuestion: How can we figure out the number of unique values in each column of our ds data frame?\nA similar related question is: How would you count the number of subjects who have more than one distinct measure at each of the phenotypes?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nsapply(ds, function(x) {\n    length(unique(x))\n}) %&gt;%\n    sort(decreasing = TRUE) %&gt;%\n    kable()\n\n\n\n\n\nx\n\n\n\n\nGestationalage_sample\n189\n\n\nsample_id\n119\n\n\nsubject_id\n54\n\n\nmaternal_age_delivery\n54\n\n\nprepregnancy_BMI\n54\n\n\ngestationalage_delivery\n54\n\n\nbaby_birthweight_centile\n52\n\n\nprepregnancy_weight\n51\n\n\nheight\n42\n\n\nbaby_birthweight\n30\n\n\naverage_DBP_labor\n27\n\n\naverage_SBP_labor\n23\n\n\nstrata\n21\n\n\naverage_SBP_lt20weeks\n19\n\n\naverage_DBP_lt20weeks\n16\n\n\ngravidity\n5\n\n\nSample_trimester\n4\n\n\nparity\n4\n\n\nrace\n3\n\n\ncase_control_status\n2\n\n\nsmoke_lifetime\n2\n\n\nbaby_sex\n2\n\n\nplacental_pathology\n2\n\n\nbaby_SGA\n1\n\n\n\n\n\nThis can also be generated using the map function from the purrr R package.\n\nds %&gt;%\n    map(\\(x) length(unique(x))) %&gt;%\n    unlist() %&gt;%\n    sort(decreasing = TRUE) %&gt;%\n    kable()\n\n\n\n\n\nx\n\n\n\n\nGestationalage_sample\n189\n\n\nsample_id\n119\n\n\nsubject_id\n54\n\n\nmaternal_age_delivery\n54\n\n\nprepregnancy_BMI\n54\n\n\ngestationalage_delivery\n54\n\n\nbaby_birthweight_centile\n52\n\n\nprepregnancy_weight\n51\n\n\nheight\n42\n\n\nbaby_birthweight\n30\n\n\naverage_DBP_labor\n27\n\n\naverage_SBP_labor\n23\n\n\nstrata\n21\n\n\naverage_SBP_lt20weeks\n19\n\n\naverage_DBP_lt20weeks\n16\n\n\ngravidity\n5\n\n\nSample_trimester\n4\n\n\nparity\n4\n\n\nrace\n3\n\n\ncase_control_status\n2\n\n\nsmoke_lifetime\n2\n\n\nbaby_sex\n2\n\n\nplacental_pathology\n2\n\n\nbaby_SGA\n1\n\n\n\n\n\nSuppose we wanted to directly count the number of subjects who have more than one distinct measure at each of the phenotypes.\nOne approach for doing this would be to take the phenotype and group by subject_id and count distinct values within those subject-specific groups, and then add up the total number of subjects who have more than one distinct value.\n\nsubject.N &lt;- function(df.col, subj.ID) {\n    # Count distinct entries when grouped by subj.ID Input: df.col = a\n    # phenotype vector subj.ID = a vector of corresponding subject IDs\n    # Construct a dataframe containing the phenotype and subject IDS\n    df &lt;- bind_cols(df.col = df.col, subj.ID = subj.ID)\n    #\n    suppressMessages(df.n &lt;- df %&gt;%\n        group_by(subj.ID) %&gt;%\n        distinct() %&gt;%\n        mutate(n = n()) %&gt;%\n        select(subj.ID, n) %&gt;%\n        distinct())\n    # Count how many subj.ID's have more than one distinct value\n    sum(df.n$n &gt; 1)\n}\n\nsubj.ID &lt;- ds$subject_id\n# Apply our function using 'map'\nds %&gt;%\n    map(\\(x) subject.N(x, subj.ID)) %&gt;%\n    unlist() %&gt;%\n    sort(decreasing = TRUE)\n\n   Gestationalage_sample                sample_id         Sample_trimester \n                      47                       39                       34 \n                    race               subject_id                   strata \n                       1                        0                        0 \n   maternal_age_delivery      case_control_status      prepregnancy_weight \n                       0                        0                        0 \n                  height         prepregnancy_BMI                gravidity \n                       0                        0                        0 \n                  parity  gestationalage_delivery    average_SBP_lt20weeks \n                       0                        0                        0 \n   average_DBP_lt20weeks        average_SBP_labor        average_DBP_labor \n                       0                        0                        0 \n          smoke_lifetime         baby_birthweight                 baby_sex \n                       0                        0                        0 \nbaby_birthweight_centile                 baby_SGA      placental_pathology \n                       0                        0                        0 \n\n\nThe variables with a count of zero here are those where no more than 1 distinct value was observed for each subject. These are likely subject-level variables. Indeed, for the majority of these, the variable names are consistent with them being subject-level variables instead of variables that are measured every time a sample was taken.\n\n\n\n\n\n24.5.3 Subject-level data set\nTask: Construct a subject-level data set ds.subj\nHow would you construct a subject-level data set?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nWe need to drop the sample-specific measures, retaining only subject-level measures, and then select unique records:\n\nds.subj &lt;- ds %&gt;%\n    select(-sample_id, -Sample_trimester, -Gestationalage_sample) %&gt;%\n    distinct()\n\nselect: dropped 3 variables (sample_id, Sample_trimester, Gestationalage_sample)\ndistinct: removed 136 rows (71%), 55 rows remaining\n\n\nBut there is a duplicated record where race differs but all other attributes are identical, so we filter one of those two records out:\n\nsum(duplicated(ds.subj$subject_id))\n\n[1] 1\n\nds.subj %&gt;%\n    group_by(subject_id) %&gt;%\n    filter(n() &gt; 1)\n\ngroup_by: one grouping variable (subject_id)\nfilter (grouped): removed 53 rows (96%), 2 rows remaining (removed 53 groups, one group remaining)\n\n\n# A tibble: 2 × 21\n# Groups:   subject_id [1]\n  subject_id strata race  maternal_age_delivery case_control_status\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;                 &lt;dbl&gt;               &lt;dbl&gt;\n1 SUBJ20         35 W                      29.4                   1\n2 SUBJ20         35 White                  29.4                   1\n# ℹ 16 more variables: prepregnancy_weight &lt;dbl&gt;, height &lt;dbl&gt;,\n#   prepregnancy_BMI &lt;dbl&gt;, gravidity &lt;dbl&gt;, parity &lt;dbl&gt;,\n#   gestationalage_delivery &lt;dbl&gt;, average_SBP_lt20weeks &lt;dbl&gt;,\n#   average_DBP_lt20weeks &lt;dbl&gt;, average_SBP_labor &lt;dbl&gt;,\n#   average_DBP_labor &lt;dbl&gt;, smoke_lifetime &lt;chr&gt;, baby_birthweight &lt;dbl&gt;,\n#   baby_sex &lt;chr&gt;, baby_birthweight_centile &lt;dbl&gt;, baby_SGA &lt;chr&gt;,\n#   placental_pathology &lt;chr&gt;\n\nds.subj &lt;- ds.subj %&gt;%\n    filter(race != \"White\")\n\nfilter: removed one row (2%), 54 rows remaining\n\nsum(duplicated(ds.subj$subject_id))\n\n[1] 0",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#coding",
    "href": "EDA.html#coding",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.6 Coding",
    "text": "24.6 Coding\n\nHow are the data coded?\n\nAre they coded correctly?\nWhich are categorical and which are continuous?\nAre they coded consistently with the data dictionary?\nIs there a data dictionary?\nDo we need to skip rows when reading the data in?\n\n\n\n24.6.1 Recode for understandability\nUsing the subject-level data set ds.subj, let’s recode case_control_status from 0 and 1 into a new PE_status variable coded as control and case.\nFirst, look up the coding used for the case_control_status variable in the Data Dictionary dd:\n\ndd %&gt;%\n    filter(R21.Variable.Name == \"case_control_status\") %&gt;%\n    pull(Variable.Coding)\n\nfilter: removed 26 rows (96%), one row remaining\n\n\n[1] \"0: normotensive control; 1: preeclampsia case\"\n\n\nTask: Using the subject-level data set ds.subj, recode case_control_status from 0 and 1 into a new PE_status variable coded as control and case.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nSo the data dictionary gives the meaning of the 0 and 1 codes:\n“0: normotensive control; 1: preeclampsia case”\n\nds.subj$PE_status &lt;- factor(ds.subj$case_control_status)\nlevels(ds.subj$PE_status)\n\n[1] \"0\" \"1\"\n\nlevels(ds.subj$PE_status) &lt;- c(\"control\", \"case\")\n\n# Check that the recoding was correct:\nxtabs(~case_control_status + PE_status, data = ds.subj)\n\n                   PE_status\ncase_control_status control case\n                  0      26    0\n                  1       0   28\n\n\nRecoding could also be done using Tidyverse function:\n\nds.subj &lt;- ds.subj %&gt;%\n    mutate(PE_status = case_when(case_control_status == 0 ~ \"control\", case_control_status ==\n        1 ~ \"case\"))\n\nmutate: converted 'PE_status' from factor to character (0 new NA)\n\nxtabs(~case_control_status + PE_status, data = ds.subj)\n\n                   PE_status\ncase_control_status case control\n                  0    0      26\n                  1   28       0",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#missing-data",
    "href": "EDA.html#missing-data",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.7 Missing data",
    "text": "24.7 Missing data\n\nWhat is the pattern of missing data?\n\nHow are missing data coded?\nIs there a single missing data code?\n\n\nHere we could use plot_missing from the DataExplorer R package.\nhttps://boxuancui.github.io/DataExplorer/index.html\nTask: Try out plot_missing on the subject-level data set ds.subj.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nplot_missing(ds.subj)\n\n\n\n\n\n\n\n\nIt is kind of unusual to have no missing data in a real data set.\nTo see what the output might look like when there is some missing data, let’s introduce some using the createNAs function from this StackOverflow entry:\nhttps://stackoverflow.com/questions/39513837/add-exact-proportion-of-random-missing-values-to-data-frame\n\ncreateNAs &lt;- function(x, pctNA = 0.1) {\n    n &lt;- nrow(x)\n    p &lt;- ncol(x)\n    NAloc &lt;- rep(FALSE, n * p)\n    NAloc[sample.int(n * p, floor(n * p * pctNA))] &lt;- TRUE\n    x[matrix(NAloc, nrow = n, ncol = p)] &lt;- NA\n    return(x)\n}\n\ndf &lt;- ds.subj\ndf &lt;- createNAs(df)\ndf &lt;- data.frame(df)\nplot_missing(df)\n\n\n\n\n\n\n\n\n\nprofile_missing(df)\n\n                    feature num_missing pct_missing\n1                subject_id           8  0.14814815\n2                    strata           5  0.09259259\n3                      race           4  0.07407407\n4     maternal_age_delivery           5  0.09259259\n5       case_control_status           9  0.16666667\n6       prepregnancy_weight           5  0.09259259\n7                    height           5  0.09259259\n8          prepregnancy_BMI           4  0.07407407\n9                 gravidity           5  0.09259259\n10                   parity           5  0.09259259\n11  gestationalage_delivery           6  0.11111111\n12    average_SBP_lt20weeks           6  0.11111111\n13    average_DBP_lt20weeks           6  0.11111111\n14        average_SBP_labor           4  0.07407407\n15        average_DBP_labor           5  0.09259259\n16           smoke_lifetime           6  0.11111111\n17         baby_birthweight           2  0.03703704\n18                 baby_sex           4  0.07407407\n19 baby_birthweight_centile           5  0.09259259\n20                 baby_SGA           6  0.11111111\n21      placental_pathology           5  0.09259259\n22                PE_status           8  0.14814815\n\n\nWhen there is some missing data, in addition to applying plot_missing and profile_missing, you could also apply functions from the ‘VIM’ R package, which has a number of commands that are useful for visualizing missing data patterns.\nhttps://cran.r-project.org/web/packages/VIM/vignettes/VIM.html",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#distribution",
    "href": "EDA.html#distribution",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.8 Distribution",
    "text": "24.8 Distribution\n\nWhat is the distribution of each of our phenotypes?\n\nAre data skewed?\nWhat is the range of values?\nIs the range of values realistic?\n\n\nPotentially useful DataExplorer commands to use in this context include:\nplot_bar    Plot bar chart\nplot_density    Plot density estimates\nplot_histogram  Plot histogram\nplot_qq Plot QQ plot\nTask: Try out these commands.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nplot_bar(ds.subj)\n\n1 columns ignored with more than 50 categories.\nsubject_id: 54 categories\n\n\n\n\n\n\n\n\n\n\nplot_histogram(ds.subj)\n\n\n\n\n\n\n\n\n\nplot_density(ds.subj)\n\n\n\n\n\n\n\n\n\nplot_qq(ds.subj)",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#variation",
    "href": "EDA.html#variation",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.9 Variation",
    "text": "24.9 Variation\n\nHow do our data vary and co-vary?\n\nDo multiple measures agree with each other?\nAre there sex-specific or age-specific differences?\n\n\nTask: As it is of interest to examine how our traits vary by pre-eclampsia case/control status, we can explore this by using the by=\"PE_status\" argument within the DataExplorer commands to break down the plots drawn in the previous section by PE_status.\nAlso try creating boxplots using the plot_boxplot command.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n24.9.1 Bar plots\n\nplot_bar(ds.subj, by = \"PE_status\")\n\n1 columns ignored with more than 50 categories.\nsubject_id: 54 categories\n\n\n\n\n\n\n\n\n\n\n\n24.9.2 Box plots\n\nplot_boxplot(ds.subj, by = \"PE_status\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n24.9.3 QQ plots\n\nplot_qq(ds.subj, by = \"PE_status\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n24.9.4 Correlation\nFor plotting correlation matrices, DataExplorer provides the plot_correlation command.\nTask: Try plot_correlation out, on the subset of numeric columns.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nplot_correlation(ds.subj %&gt;%\n    select(where(is.numeric)))\n\nselect: dropped 7 variables (subject_id, race, smoke_lifetime, baby_sex,\nbaby_SGA, …)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n24.9.5 ggpairs\nUse ggpairs from the GGally R package.\n\n# To illustrate, let's just use three of the numeric traits:\nds1 &lt;- ds.subj[, c(15, 17, 19)]\nnames(ds1)\n\n[1] \"average_DBP_labor\"        \"baby_birthweight\"        \n[3] \"baby_birthweight_centile\"\n\n\nTask: Try it out - apply ggpairs to ds1.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nggpairs(ds1)\n\n\n\n\n\n\n\n\n\n\n\nTask: Redraw the ggpairs plot, using the mapping argument to color by PE_status.\nTo figure out how do this, look at the examples in the ?ggpairs function documentation.\n\n\n\n\n\n\nHint\n\n\n\nThis cannot be done using the ds1 object because that does not contain any PE_status information.\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nggpairs(ds.subj, columns = c(15, 17, 19), ggplot2::aes(color = PE_status))\n\n\n\n\n\n\n\n\n\n\n\n\n\n24.9.6 ggcorr\n\n\n\n\n\n\nNote\n\n\n\nThe ggcorr function from the GGally R package can also be used to make a correlation matrix plot.\n\nggcorr(ds1, label = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#dataexplorer",
    "href": "EDA.html#dataexplorer",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.10 DataExplorer",
    "text": "24.10 DataExplorer\nWe can quickly create a report using the create_report function from the DataExplorer R package\ncreate_report(ds.subj)\nSee\nhttps://boxuancui.github.io/DataExplorer/",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#datamaid",
    "href": "EDA.html#datamaid",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.11 dataMaid",
    "text": "24.11 dataMaid\nThe dataMaid R package can also be used to create an exporatory data analysis report.\nlibrary(dataMaid)\nmakeDataReport(ds.subj, output=\"html\")\nSee\nhttps://www.jstatsoft.org/article/view/v090i06",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "EDA.html#smarteda",
    "href": "EDA.html#smarteda",
    "title": "23  R Exploratory Data Analysis Exercise",
    "section": "24.12 SmartEDA",
    "text": "24.12 SmartEDA\nThe SmartEDA R package also has a command to create an exploratory data analysis report - this command is ExpReport.\nlibrary(SmartEDA)\nExpReport(ds.subj, op_file=\"SmartEDAReport.html\")\nExpReport(ds.subj, Target=\"PE_status\", Rc=\"control\", op_file=\"SmartEDAReportII.html\")\nFor more information, see https://cran.r-project.org/web/packages/SmartEDA/vignettes/SmartEDA.html",
    "crumbs": [
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>R Exploratory Data Analysis Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html",
    "href": "GRanges.html",
    "title": "24  GRanges Exercise",
    "section": "",
    "text": "24.1 Introductory Background\nAn Introduction to Bioconductor’s Packages for Working with Range Data\nhttps://github.com/vsbuffalo/genomicranges-intro/blob/master/notes.md",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#active-learning",
    "href": "GRanges.html#active-learning",
    "title": "24  GRanges Exercise",
    "section": "24.2 Active Learning",
    "text": "24.2 Active Learning\nWorking with genomics ranges\nhttps://carpentries-incubator.github.io/bioc-project/07-genomic-ranges.html",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#suggested-readings",
    "href": "GRanges.html#suggested-readings",
    "title": "24  GRanges Exercise",
    "section": "24.3 Suggested readings",
    "text": "24.3 Suggested readings\nIn “Bioinformatics Data Skills”, see Chapter 9 “Working with Range Data”\nBioinformatics Data Skills\nEditor: Vince Buffalo\nPublisher: O’Reilly\nWeb access: link\nHello Ranges: An Introduction to Analyzing Genomic Ranges in R.\nlink",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#install-the-needed-bioconductor-libraries-one-time-only",
    "href": "GRanges.html#install-the-needed-bioconductor-libraries-one-time-only",
    "title": "24  GRanges Exercise",
    "section": "24.4 Install the needed Bioconductor libraries (one time only)",
    "text": "24.4 Install the needed Bioconductor libraries (one time only)\nFirst, we need to figure out which genomic build was used in our data set. I usually do this by looking up the base pair positions of a couple of SNPs by hand in the ‘SNP’ data base. So if we go there and search for rs3800143, we end up on this web page:\nhttps://www.ncbi.nlm.nih.gov/snp/rs3800143#variant_details\nwhich shows a Build GRCh37.p13 position of 1942538 on chromosome 6. So it looks like Build GRCh37.p13 was used, which is also known as Build hg19.\nTo double check, we can check that the given position for rs10836914 matches the Build GRCh37.p13 position.\nSo to determine the gene boundaries in Build hg19, we need to download and install the TxDb.Hsapiens.UCSC.hg19.knownGene library from BioConductor.\nSo we search for it on BioConductor and that it can be installed by issuing these commands at the R prompt:\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"TxDb.Hsapiens.UCSC.hg19.knownGene\")\nYou will also need to install another library, org.Hs.eg.db:\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"org.Hs.eg.db\")",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#construct-the-gene-list",
    "href": "GRanges.html#construct-the-gene-list",
    "title": "24  GRanges Exercise",
    "section": "24.5 Construct the gene list",
    "text": "24.5 Construct the gene list\nUsing the annotation embedded in TxDb.Hsapiens.UCSC.hg19.knownGene, construct a GRangesList object that contains a list of all the genes.\nHint: Use transcriptsBy.\n\nlibrary(TxDb.Hsapiens.UCSC.hg19.knownGene)\ntxdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\nclass(txdb)\n\n[1] \"TxDb\"\nattr(,\"package\")\n[1] \"GenomicFeatures\"\n\n\nThe transcripts(txdb) is a GenomicRanges object:\n\ntranscripts(txdb)\n\nGRanges object with 82960 ranges and 2 metadata columns:\n                seqnames        ranges strand |     tx_id     tx_name\n                   &lt;Rle&gt;     &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n      [1]           chr1   11874-14409      + |         1  uc001aaa.3\n      [2]           chr1   11874-14409      + |         2  uc010nxq.1\n      [3]           chr1   11874-14409      + |         3  uc010nxr.1\n      [4]           chr1   69091-70008      + |         4  uc001aal.1\n      [5]           chr1 321084-321115      + |         5  uc001aaq.2\n      ...            ...           ...    ... .       ...         ...\n  [82956] chrUn_gl000237        1-2686      - |     82956  uc011mgu.1\n  [82957] chrUn_gl000241   20433-36875      - |     82957  uc011mgv.2\n  [82958] chrUn_gl000243   11501-11530      + |     82958  uc011mgw.1\n  [82959] chrUn_gl000243   13608-13637      + |     82959  uc022brq.1\n  [82960] chrUn_gl000247     5787-5816      - |     82960  uc022brr.1\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n\nWe now group the transcripts by gene, and so create a GRangesList object:\n\ntx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\ntx.by.gene\n\nGRangesList object of length 23459:\n$`1`\nGRanges object with 2 ranges and 2 metadata columns:\n      seqnames            ranges strand |     tx_id     tx_name\n         &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n  [1]    chr19 58858172-58864865      - |     70455  uc002qsd.4\n  [2]    chr19 58859832-58874214      - |     70456  uc002qsf.2\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`10`\nGRanges object with 1 range and 2 metadata columns:\n      seqnames            ranges strand |     tx_id     tx_name\n         &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n  [1]     chr8 18248755-18258723      + |     31944  uc003wyw.1\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`100`\nGRanges object with 1 range and 2 metadata columns:\n      seqnames            ranges strand |     tx_id     tx_name\n         &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n  [1]    chr20 43248163-43280376      - |     72132  uc002xmj.3\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n...\n&lt;23456 more elements&gt;\n\n\nThe names of the list elements are Entrez gene IDs.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#construct-a-grange-containing-our-top-snp",
    "href": "GRanges.html#construct-a-grange-containing-our-top-snp",
    "title": "24  GRanges Exercise",
    "section": "24.6 Construct a GRange containing our top SNP",
    "text": "24.6 Construct a GRange containing our top SNP\nConstruct a GRange containing the top SNP. Note that the chromosome name needs to be in the same style as is seen in tx.by.gene. That is, the chromosome name needs to be “chr6” instead of ‘6’.\n\ntop.snp &lt;- with(top.hits[1,], GRanges(seqnames=paste0(\"chr\",CHR), \n                   IRanges(start=BP, width=1), \n                   rsid=SNP, P=P)) \ntop.snp\n\nGRanges object with 1 range and 2 metadata columns:\n      seqnames    ranges strand |        rsid         P\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt; &lt;numeric&gt;\n  [1]     chr6   1942538      * |   rs3800143 4.608e-11\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#search-for-match",
    "href": "GRanges.html#search-for-match",
    "title": "24  GRanges Exercise",
    "section": "24.7 Search for match",
    "text": "24.7 Search for match\nNow use findOverlaps and subsetByOverlaps to find any genes that overlap our top SNP.\n\ntop.snp.overlaps &lt;- findOverlaps(tx.by.gene,top.snp)\ntop.snp.overlaps\n\nHits object with 1 hit and 0 metadata columns:\n      queryHits subjectHits\n      &lt;integer&gt;   &lt;integer&gt;\n  [1]      8841           1\n  -------\n  queryLength: 23459 / subjectLength: 1\n\nhits &lt;- subsetByOverlaps(tx.by.gene,top.snp)\nhits\n\nGRangesList object of length 1:\n$`2762`\nGRanges object with 2 ranges and 2 metadata columns:\n      seqnames          ranges strand |     tx_id     tx_name\n         &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n  [1]     chr6 1624035-2176225      - |     25755  uc021ykn.1\n  [2]     chr6 1624035-2245868      - |     25756  uc003mtq.3\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n\nSo our top SNP rs3800143 overlaps two transcripts in a single gene with the same start position of 1624035.\nHowever, the transcript name is not very human-readable, as it uses an Entrez Gene ID 2762.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#convert-entrez-gene-ids-to-gene-names",
    "href": "GRanges.html#convert-entrez-gene-ids-to-gene-names",
    "title": "24  GRanges Exercise",
    "section": "24.8 Convert Entrez Gene IDs to Gene Names",
    "text": "24.8 Convert Entrez Gene IDs to Gene Names\nConvert the integer Entrez Gene ID 2762 to a human-readable Gene Name.\nThis can be done using the org.Hs.eg.db R library.\nTo convert Entrez Gene IDs to Gene Names, we can use another R database:\n\nlibrary(org.Hs.eg.db)\ncolumns(org.Hs.eg.db)\n\n [1] \"ACCNUM\"       \"ALIAS\"        \"ENSEMBL\"      \"ENSEMBLPROT\"  \"ENSEMBLTRANS\"\n [6] \"ENTREZID\"     \"ENZYME\"       \"EVIDENCE\"     \"EVIDENCEALL\"  \"GENENAME\"    \n[11] \"GENETYPE\"     \"GO\"           \"GOALL\"        \"IPI\"          \"MAP\"         \n[16] \"OMIM\"         \"ONTOLOGY\"     \"ONTOLOGYALL\"  \"PATH\"         \"PFAM\"        \n[21] \"PMID\"         \"PROSITE\"      \"REFSEQ\"       \"SYMBOL\"       \"UCSCKG\"      \n[26] \"UNIPROT\"     \n\n\n\nnames(hits)\n\n[1] \"2762\"\n\ngene.name &lt;- select(org.Hs.eg.db, keys=names(hits), columns=c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"), keytype=\"ENTREZID\")\n\n'select()' returned 1:1 mapping between keys and columns\n\ngene.name\n\n  ENTREZID SYMBOL                    GENENAME\n1     2762   GMDS GDP-mannose 4,6-dehydratase\n\n\nSo our top SNP rs3800143 overlaps the gene with the Entrez Gene ID 2762, which is also known as GMDS (GDP-mannose 4,6-dehydratase).",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#question-1",
    "href": "GRanges.html#question-1",
    "title": "24  GRanges Exercise",
    "section": "24.9 Question 1",
    "text": "24.9 Question 1\nRead in the data:\n\nASSOC.file &lt;- \"data/trait.qassoc.gz\"\nb &lt;- read_table(ASSOC.file)\n\nWarning: Missing column names filled in: 'X10' [10]\n\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  CHR = col_double(),\n  SNP = col_character(),\n  BP = col_double(),\n  NMISS = col_double(),\n  BETA = col_double(),\n  SE = col_double(),\n  R2 = col_double(),\n  T = col_double(),\n  P = col_double(),\n  X10 = col_logical()\n)\n\nhead(b)\n\n# A tibble: 6 × 10\n    CHR SNP           BP NMISS     BETA     SE         R2      T     P X10  \n  &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;\n1     6 rs9392298 203878  1573  0.110   0.0984 0.000801    1.12  0.262 NA   \n2     6 rs9405486 204072  1569  0.118   0.0982 0.000913    1.20  0.232 NA   \n3     6 rs7762550 204909  1574  0.0384  0.0685 0.000199    0.560 0.576 NA   \n4     6 rs1418706 205878  1575 -0.00783 0.0717 0.00000757 -0.109 0.913 NA   \n5     6 rs6920539 206528  1574  0.119   0.0955 0.000984    1.24  0.214 NA   \n6     6 rs9502959 206599  1575 -0.0317  0.0538 0.000220   -0.589 0.556 NA   \n\n\nTask: Using GRanges and associated Bioconductor tools, figure out if our top SNP, as ranked by the P-value (column P) from data frame b lies within an intron or exon.\nFor this, the functions exonsBy and intronsByTranscript might be useful.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n24.10 Answer 1\nThe top SNP rs3800143 lies in an intron of GMDS (GDP-mannose 4,6-dehydratase), Gene ID: 2762.\nBuild hg19 (Human Feb. 2009 (GRCh37/hg19)) gene boundaries from UCSC Genes:\nGMDS (uc003mtq.3) - chr6:1624035-2245868 - Homo sapiens GDP-mannose 4,6-dehydratase (GMDS), transcript variant 1, mRNA.\n Does our top SNP overlap any exons?\n\ntop.snp &lt;- with(top.hits[1,], GRanges(seqnames=paste0(\"chr\",CHR), \n                   IRanges(start=BP, width=1), \n                   rsid=SNP, P=P)) \ntop.snp\n\nGRanges object with 1 range and 2 metadata columns:\n      seqnames    ranges strand |        rsid         P\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt; &lt;numeric&gt;\n  [1]     chr6   1942538      * |   rs3800143 4.608e-11\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\nexons.by.gene &lt;- exonsBy(txdb, \"gene\")\nexons.by.gene\n\nGRangesList object of length 23459:\n$`1`\nGRanges object with 15 ranges and 2 metadata columns:\n       seqnames            ranges strand |   exon_id   exon_name\n          &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n   [1]    chr19 58858172-58858395      - |    250809        &lt;NA&gt;\n   [2]    chr19 58858719-58859006      - |    250810        &lt;NA&gt;\n   [3]    chr19 58859832-58860494      - |    250811        &lt;NA&gt;\n   [4]    chr19 58860934-58862017      - |    250812        &lt;NA&gt;\n   [5]    chr19 58861736-58862017      - |    250813        &lt;NA&gt;\n   ...      ...               ...    ... .       ...         ...\n  [11]    chr19 58868951-58869015      - |    250821        &lt;NA&gt;\n  [12]    chr19 58869318-58869652      - |    250822        &lt;NA&gt;\n  [13]    chr19 58869855-58869951      - |    250823        &lt;NA&gt;\n  [14]    chr19 58870563-58870689      - |    250824        &lt;NA&gt;\n  [15]    chr19 58874043-58874214      - |    250825        &lt;NA&gt;\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`10`\nGRanges object with 2 ranges and 2 metadata columns:\n      seqnames            ranges strand |   exon_id   exon_name\n         &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n  [1]     chr8 18248755-18248855      + |    113603        &lt;NA&gt;\n  [2]     chr8 18257508-18258723      + |    113604        &lt;NA&gt;\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n...\n&lt;23457 more elements&gt;\n\ntop.snp.overlaps &lt;- findOverlaps(exons.by.gene,top.snp)\ntop.snp.overlaps\n\nHits object with 0 hits and 0 metadata columns:\n   queryHits subjectHits\n   &lt;integer&gt;   &lt;integer&gt;\n  -------\n  queryLength: 23459 / subjectLength: 1\n\nhits &lt;- subsetByOverlaps(exons.by.gene,top.snp)\nhits\n\nGRangesList object of length 0:\n&lt;0 elements&gt;\n\n\nFrom the output above, we find that our top SNP overlaps 0 sets of exons grouped by transcripts.\nDoes our top SNP overlap any introns?\n\nintrons.by.transcript &lt;- intronsByTranscript(txdb)\n\n\ntop.snp.overlaps &lt;- findOverlaps(introns.by.transcript,top.snp)\ntop.snp.overlaps\n\nHits object with 2 hits and 0 metadata columns:\n      queryHits subjectHits\n      &lt;integer&gt;   &lt;integer&gt;\n  [1]     25755           1\n  [2]     25756           1\n  -------\n  queryLength: 82960 / subjectLength: 1\n\nhits &lt;- subsetByOverlaps(introns.by.transcript,top.snp)\nhits\n\nGRangesList object of length 2:\n$`25755`\nGRanges object with 10 ranges and 0 metadata columns:\n       seqnames          ranges strand\n          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n   [1]     chr6 1624467-1624706      -\n   [2]     chr6 1624776-1726649      -\n   [3]     chr6 1726747-1742701      -\n   [4]     chr6 1742821-1930336      -\n   [5]     chr6 1930465-1960100      -\n   [6]     chr6 1960206-1961007      -\n   [7]     chr6 1961201-2116004      -\n   [8]     chr6 2116115-2117702      -\n   [9]     chr6 2117791-2124920      -\n  [10]     chr6 2124966-2176165      -\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`25756`\nGRanges object with 10 ranges and 0 metadata columns:\n       seqnames          ranges strand\n          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n   [1]     chr6 1624467-1624706      -\n   [2]     chr6 1624776-1726649      -\n   [3]     chr6 1726747-1742701      -\n   [4]     chr6 1742821-1930336      -\n   [5]     chr6 1930465-1960100      -\n   [6]     chr6 1960206-1961007      -\n   [7]     chr6 1961201-2116004      -\n   [8]     chr6 2116115-2117702      -\n   [9]     chr6 2117791-2124920      -\n  [10]     chr6 2124966-2245554      -\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n\nFrom the output above, we find that our top SNP overlaps 2 sets of introns grouped by transcripts.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#answer-1",
    "href": "GRanges.html#answer-1",
    "title": "24  GRanges Exercise",
    "section": "24.10 Answer 1",
    "text": "24.10 Answer 1\nThe top SNP rs3800143 lies in an intron of GMDS (GDP-mannose 4,6-dehydratase), Gene ID: 2762.\nBuild hg19 (Human Feb. 2009 (GRCh37/hg19)) gene boundaries from UCSC Genes:\nGMDS (uc003mtq.3) - chr6:1624035-2245868 - Homo sapiens GDP-mannose 4,6-dehydratase (GMDS), transcript variant 1, mRNA.\n Does our top SNP overlap any exons?\n\ntop.snp &lt;- with(top.hits[1,], GRanges(seqnames=paste0(\"chr\",CHR), \n                   IRanges(start=BP, width=1), \n                   rsid=SNP, P=P)) \ntop.snp\n\nGRanges object with 1 range and 2 metadata columns:\n      seqnames    ranges strand |        rsid         P\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt; &lt;numeric&gt;\n  [1]     chr6   1942538      * |   rs3800143 4.608e-11\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\nexons.by.gene &lt;- exonsBy(txdb, \"gene\")\nexons.by.gene\n\nGRangesList object of length 23459:\n$`1`\nGRanges object with 15 ranges and 2 metadata columns:\n       seqnames            ranges strand |   exon_id   exon_name\n          &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n   [1]    chr19 58858172-58858395      - |    250809        &lt;NA&gt;\n   [2]    chr19 58858719-58859006      - |    250810        &lt;NA&gt;\n   [3]    chr19 58859832-58860494      - |    250811        &lt;NA&gt;\n   [4]    chr19 58860934-58862017      - |    250812        &lt;NA&gt;\n   [5]    chr19 58861736-58862017      - |    250813        &lt;NA&gt;\n   ...      ...               ...    ... .       ...         ...\n  [11]    chr19 58868951-58869015      - |    250821        &lt;NA&gt;\n  [12]    chr19 58869318-58869652      - |    250822        &lt;NA&gt;\n  [13]    chr19 58869855-58869951      - |    250823        &lt;NA&gt;\n  [14]    chr19 58870563-58870689      - |    250824        &lt;NA&gt;\n  [15]    chr19 58874043-58874214      - |    250825        &lt;NA&gt;\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`10`\nGRanges object with 2 ranges and 2 metadata columns:\n      seqnames            ranges strand |   exon_id   exon_name\n         &lt;Rle&gt;         &lt;IRanges&gt;  &lt;Rle&gt; | &lt;integer&gt; &lt;character&gt;\n  [1]     chr8 18248755-18248855      + |    113603        &lt;NA&gt;\n  [2]     chr8 18257508-18258723      + |    113604        &lt;NA&gt;\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n...\n&lt;23457 more elements&gt;\n\ntop.snp.overlaps &lt;- findOverlaps(exons.by.gene,top.snp)\ntop.snp.overlaps\n\nHits object with 0 hits and 0 metadata columns:\n   queryHits subjectHits\n   &lt;integer&gt;   &lt;integer&gt;\n  -------\n  queryLength: 23459 / subjectLength: 1\n\nhits &lt;- subsetByOverlaps(exons.by.gene,top.snp)\nhits\n\nGRangesList object of length 0:\n&lt;0 elements&gt;\n\n\nFrom the output above, we find that our top SNP overlaps 0 sets of exons grouped by transcripts.\nDoes our top SNP overlap any introns?\n\nintrons.by.transcript &lt;- intronsByTranscript(txdb)\n\n\ntop.snp.overlaps &lt;- findOverlaps(introns.by.transcript,top.snp)\ntop.snp.overlaps\n\nHits object with 2 hits and 0 metadata columns:\n      queryHits subjectHits\n      &lt;integer&gt;   &lt;integer&gt;\n  [1]     25755           1\n  [2]     25756           1\n  -------\n  queryLength: 82960 / subjectLength: 1\n\nhits &lt;- subsetByOverlaps(introns.by.transcript,top.snp)\nhits\n\nGRangesList object of length 2:\n$`25755`\nGRanges object with 10 ranges and 0 metadata columns:\n       seqnames          ranges strand\n          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n   [1]     chr6 1624467-1624706      -\n   [2]     chr6 1624776-1726649      -\n   [3]     chr6 1726747-1742701      -\n   [4]     chr6 1742821-1930336      -\n   [5]     chr6 1930465-1960100      -\n   [6]     chr6 1960206-1961007      -\n   [7]     chr6 1961201-2116004      -\n   [8]     chr6 2116115-2117702      -\n   [9]     chr6 2117791-2124920      -\n  [10]     chr6 2124966-2176165      -\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n$`25756`\nGRanges object with 10 ranges and 0 metadata columns:\n       seqnames          ranges strand\n          &lt;Rle&gt;       &lt;IRanges&gt;  &lt;Rle&gt;\n   [1]     chr6 1624467-1624706      -\n   [2]     chr6 1624776-1726649      -\n   [3]     chr6 1726747-1742701      -\n   [4]     chr6 1742821-1930336      -\n   [5]     chr6 1930465-1960100      -\n   [6]     chr6 1960206-1961007      -\n   [7]     chr6 1961201-2116004      -\n   [8]     chr6 2116115-2117702      -\n   [9]     chr6 2117791-2124920      -\n  [10]     chr6 2124966-2245554      -\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n\n\nFrom the output above, we find that our top SNP overlaps 2 sets of introns grouped by transcripts.",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#question-2",
    "href": "GRanges.html#question-2",
    "title": "24  GRanges Exercise",
    "section": "24.11 Question 2",
    "text": "24.11 Question 2\nWhile we have figure out above which gene our top SNP is in, what we worked out above involves very specific code. Now let’s try to generalize what we did above:\nTask: Using GRanges and associated Bioconductor tools, write a function that takes as input a ranked list of the SNPS, and returns a nice table that lists the top N of these SNPs and any gene that they might be in, including the SNP position and the gene boundaries.\n# snp.list = the ranked list of the top SNPs\n# N = the number of top SNPs to annotate\nsnp.table &lt;- function(snp.list, N=15) {\n  \n}\nApply your snp.table function to the top 15 SNPs in our example data set.\n\n\n\n\n\n\nHint\n\n\n\nUse the subsetByOverlaps followed by the select(org.Hs.eg.db, ... approach described above in the Search for match and Convert Entrez Gene IDs to Gene Names sections above.\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n24.12 Answer 2\nIt is important to understand what the output of the findOverlaps function means.\ntop.snp.gene &lt;- findOverlaps(gene.bounds, top.snp)\ntop.snp.gene\nreturns:\nHits object with 10 hits and 0 metadata columns:\n       queryHits subjectHits\n       &lt;integer&gt;   &lt;integer&gt;\n   [1]      3269          13\n   [2]      8841           5\n   [3]      8841          11\n   [4]      8841           7\n   [5]      8841           6\n   [6]      8841           4\n   [7]      8841           1\n   [8]      8841           8\n   [9]     17049          14\n  [10]     18258           9\n  -------\n  queryLength: 23459 / subjectLength: 15\nHere, the ‘subjectHits’ is an index into top.snp and the queryHits is an index into gene.bounds.\nSo the first line indicates that the 13th SNP in top.snp overlaps the gene that is in the 3,269 slot of the gene.bounds object.\n\n# snp.list = the ranked list of the top SNPs\n# N = the number of top SNPs to annotate\nsnp.table &lt;- function(snp.list, N=15) {\n  require(org.Hs.eg.db)\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene)\n  txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\n  tx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\n  # Find the gene boundaries\n  gene.bounds &lt;- reduce(tx.by.gene)\n  # Set up a GRange with the first N top SNPs\n  top.snp &lt;- with(snp.list[1:N, ], GRanges(seqnames = paste0(\"chr\", CHR),\n                                          IRanges(start = BP, width = 1),\n                                          SNP = SNP, P = P))\n  # Find overlaps and hits\n  top.snp.gene &lt;- findOverlaps(gene.bounds, top.snp)\n  hits &lt;- subsetByOverlaps(gene.bounds, top.snp)\n  # The SNP hits\n  snp.info &lt;- data.frame(SNP.ID = subjectHits(top.snp.gene),\n                         SNP.chr = seqnames(top.snp[subjectHits(top.snp.gene)]),\n                         ranges(top.snp[subjectHits(top.snp.gene)]),\n                         mcols(top.snp[subjectHits(top.snp.gene)]))\n  # The Gene hits\n  gene.info &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                          seqnames(gene.bounds[queryHits(top.snp.gene)]),\n                          ranges(gene.bounds[queryHits(top.snp.gene)]))\n  # Reduce gene.info to distinct entries\n  gene.info &lt;- gene.info %&gt;% dplyr::select(-group, -group.1) %&gt;% distinct()\n  # Construct a key linking SNPs to Genes\n  key &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                    SNP.ID = subjectHits(top.snp.gene))\n  snp.gene &lt;- key %&gt;% left_join(gene.info, by = \"gene.ID\") %&gt;%\n    left_join(snp.info, by = \"SNP.ID\")\n  gene.name &lt;- select(org.Hs.eg.db, keys = names(hits),\n      columns = c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"), keytype = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% dplyr::rename(ENTREZID = group_name) %&gt;%\n    left_join(gene.name, by = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% arrange(P)\n  snp.gene &lt;- left_join(snp.list[1:N, ], snp.gene, by = c(\"SNP\"))\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::select(CHR, BP, SNP, P.x, SYMBOL, GENENAME, start.x, end.x, width.x)\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::rename(P = P.x, start = start.x, end = end.x, width = width.x)\n  return(snp.gene)\n}\n\n\n(t &lt;- snp.table(top.hits, 15)) %&gt;% kable(digits=15)\n\nWarning in .local(x, row.names, optional, ...): 'optional' argument was ignored\n\n\n'select()' returned 1:1 mapping between keys and columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHR\nBP\nSNP\nP\nSYMBOL\nGENENAME\nstart\nend\nwidth\n\n\n\n\n6\n1942538\nrs3800143\n4.608e-11\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n11\n4913057\nrs10836914\n1.295e-07\nNA\nNA\nNA\nNA\nNA\n\n\n11\n4913314\nrs12577475\n1.587e-07\nNA\nNA\nNA\nNA\nNA\n\n\n6\n1926650\nrs11242725\n3.785e-07\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1880964\nrs3800116\n1.475e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1915129\nrs3778552\n1.646e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1908210\nrs2875711\n2.550e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1955398\nrs9378664\n2.809e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n143144885\nrs926372\n5.704e-06\nHIVEP2\nHIVEP zinc finger 2\n143072604\n143266338\n193735\n\n\n11\n4912192\nrs10836912\n8.977e-06\nNA\nNA\nNA\nNA\nNA\n\n\n6\n1899671\nrs3800122\n1.022e-05\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n11\n4910224\nrs2570591\n1.656e-05\nNA\nNA\nNA\nNA\nNA\n\n\n11\n6340706\nrs1051992\n2.356e-05\nCAVIN3\ncaveolae associated protein 3\n6340176\n6341740\n1565\n\n\n6\n3317016\nrs4959804\n2.821e-05\nSLC22A23\nsolute carrier family 22 member 23\n3269207\n3456793\n187587\n\n\n11\n4915072\nrs1816448\n2.834e-05\nNA\nNA\nNA\nNA\nNA\n\n\n\n\ndim(t)\n\n[1] 15  9\n\n\nHere’s an alternate way to construct the SNP table which is an incomplete example because it doesn’t include the gene boundaries. However, it is simpler than the function above because it avoids the construction of a key and the left_joins used above by looping through each SNP, one by one:\n\nsnp.table2 &lt;- function(snp.list, N=15) {\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene)\n  require(org.Hs.eg.db)\n  \n  txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\n  tx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\n  gene.name &lt;- data.frame()\n  \n  for (i in 1:N) {\n    gene.name[i, 1] &lt;- snp.list[i,]$CHR\n    gene.name[i, 2] &lt;- snp.list[i,]$BP\n    gene.name[i, 3] &lt;- snp.list[i,]$SNP\n    gene.name[i, 4] &lt;- snp.list[i,]$P\n    top.snp &lt;- with(snp.list[i,], GRanges(seqnames=paste0(\"chr\", CHR), \n                                      IRanges(start=BP, width=1), \n                                      rsid=SNP, P=P))\n    hits &lt;- subsetByOverlaps(tx.by.gene, top.snp)\n    genename &lt;- select(org.Hs.eg.db, keys=names(hits), columns=c(\"SYMBOL\", \"GENENAME\"), keytype=\"ENTREZID\")\n    gene.name[i, 5] &lt;- ifelse(nrow(genename) == 0, NA, genename[[2]])\n    gene.name[i, 6] &lt;- ifelse(nrow(genename) == 0, NA, genename[[3]])\n  }\n  colnames(gene.name) &lt;- c(\"CHR\", \"BP\", \"SNP\", \"P\", \"Symbol\", \"Gene name\")\n  return(gene.name)\n}\n\n(t &lt;- snp.table2(top.hits, 15)) %&gt;% kable(digits=15)\n\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHR\nBP\nSNP\nP\nSymbol\nGene name\n\n\n\n\n6\n1942538\nrs3800143\n4.608e-11\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n11\n4913057\nrs10836914\n1.295e-07\nNA\nNA\n\n\n11\n4913314\nrs12577475\n1.587e-07\nNA\nNA\n\n\n6\n1926650\nrs11242725\n3.785e-07\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1880964\nrs3800116\n1.475e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1915129\nrs3778552\n1.646e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1908210\nrs2875711\n2.550e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1955398\nrs9378664\n2.809e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n143144885\nrs926372\n5.704e-06\nHIVEP2\nHIVEP zinc finger 2\n\n\n11\n4912192\nrs10836912\n8.977e-06\nNA\nNA\n\n\n6\n1899671\nrs3800122\n1.022e-05\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n11\n4910224\nrs2570591\n1.656e-05\nNA\nNA\n\n\n11\n6340706\nrs1051992\n2.356e-05\nCAVIN3\ncaveolae associated protein 3\n\n\n6\n3317016\nrs4959804\n2.821e-05\nSLC22A23\nsolute carrier family 22 member 23\n\n\n11\n4915072\nrs1816448\n2.834e-05\nNA\nNA\n\n\n\n\ndim(t)\n\n[1] 15  6",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#answer-2",
    "href": "GRanges.html#answer-2",
    "title": "24  GRanges Exercise",
    "section": "24.12 Answer 2",
    "text": "24.12 Answer 2\nIt is important to understand what the output of the findOverlaps function means.\ntop.snp.gene &lt;- findOverlaps(gene.bounds, top.snp)\ntop.snp.gene\nreturns:\nHits object with 10 hits and 0 metadata columns:\n       queryHits subjectHits\n       &lt;integer&gt;   &lt;integer&gt;\n   [1]      3269          13\n   [2]      8841           5\n   [3]      8841          11\n   [4]      8841           7\n   [5]      8841           6\n   [6]      8841           4\n   [7]      8841           1\n   [8]      8841           8\n   [9]     17049          14\n  [10]     18258           9\n  -------\n  queryLength: 23459 / subjectLength: 15\nHere, the ‘subjectHits’ is an index into top.snp and the queryHits is an index into gene.bounds.\nSo the first line indicates that the 13th SNP in top.snp overlaps the gene that is in the 3,269 slot of the gene.bounds object.\n\n# snp.list = the ranked list of the top SNPs\n# N = the number of top SNPs to annotate\nsnp.table &lt;- function(snp.list, N=15) {\n  require(org.Hs.eg.db)\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene)\n  txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\n  tx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\n  # Find the gene boundaries\n  gene.bounds &lt;- reduce(tx.by.gene)\n  # Set up a GRange with the first N top SNPs\n  top.snp &lt;- with(snp.list[1:N, ], GRanges(seqnames = paste0(\"chr\", CHR),\n                                          IRanges(start = BP, width = 1),\n                                          SNP = SNP, P = P))\n  # Find overlaps and hits\n  top.snp.gene &lt;- findOverlaps(gene.bounds, top.snp)\n  hits &lt;- subsetByOverlaps(gene.bounds, top.snp)\n  # The SNP hits\n  snp.info &lt;- data.frame(SNP.ID = subjectHits(top.snp.gene),\n                         SNP.chr = seqnames(top.snp[subjectHits(top.snp.gene)]),\n                         ranges(top.snp[subjectHits(top.snp.gene)]),\n                         mcols(top.snp[subjectHits(top.snp.gene)]))\n  # The Gene hits\n  gene.info &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                          seqnames(gene.bounds[queryHits(top.snp.gene)]),\n                          ranges(gene.bounds[queryHits(top.snp.gene)]))\n  # Reduce gene.info to distinct entries\n  gene.info &lt;- gene.info %&gt;% dplyr::select(-group, -group.1) %&gt;% distinct()\n  # Construct a key linking SNPs to Genes\n  key &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                    SNP.ID = subjectHits(top.snp.gene))\n  snp.gene &lt;- key %&gt;% left_join(gene.info, by = \"gene.ID\") %&gt;%\n    left_join(snp.info, by = \"SNP.ID\")\n  gene.name &lt;- select(org.Hs.eg.db, keys = names(hits),\n      columns = c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"), keytype = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% dplyr::rename(ENTREZID = group_name) %&gt;%\n    left_join(gene.name, by = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% arrange(P)\n  snp.gene &lt;- left_join(snp.list[1:N, ], snp.gene, by = c(\"SNP\"))\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::select(CHR, BP, SNP, P.x, SYMBOL, GENENAME, start.x, end.x, width.x)\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::rename(P = P.x, start = start.x, end = end.x, width = width.x)\n  return(snp.gene)\n}\n\n\n(t &lt;- snp.table(top.hits, 15)) %&gt;% kable(digits=15)\n\nWarning in .local(x, row.names, optional, ...): 'optional' argument was ignored\n\n\n'select()' returned 1:1 mapping between keys and columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHR\nBP\nSNP\nP\nSYMBOL\nGENENAME\nstart\nend\nwidth\n\n\n\n\n6\n1942538\nrs3800143\n4.608e-11\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n11\n4913057\nrs10836914\n1.295e-07\nNA\nNA\nNA\nNA\nNA\n\n\n11\n4913314\nrs12577475\n1.587e-07\nNA\nNA\nNA\nNA\nNA\n\n\n6\n1926650\nrs11242725\n3.785e-07\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1880964\nrs3800116\n1.475e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1915129\nrs3778552\n1.646e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1908210\nrs2875711\n2.550e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n1955398\nrs9378664\n2.809e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n6\n143144885\nrs926372\n5.704e-06\nHIVEP2\nHIVEP zinc finger 2\n143072604\n143266338\n193735\n\n\n11\n4912192\nrs10836912\n8.977e-06\nNA\nNA\nNA\nNA\nNA\n\n\n6\n1899671\nrs3800122\n1.022e-05\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\n\n\n11\n4910224\nrs2570591\n1.656e-05\nNA\nNA\nNA\nNA\nNA\n\n\n11\n6340706\nrs1051992\n2.356e-05\nCAVIN3\ncaveolae associated protein 3\n6340176\n6341740\n1565\n\n\n6\n3317016\nrs4959804\n2.821e-05\nSLC22A23\nsolute carrier family 22 member 23\n3269207\n3456793\n187587\n\n\n11\n4915072\nrs1816448\n2.834e-05\nNA\nNA\nNA\nNA\nNA\n\n\n\n\ndim(t)\n\n[1] 15  9\n\n\nHere’s an alternate way to construct the SNP table which is an incomplete example because it doesn’t include the gene boundaries. However, it is simpler than the function above because it avoids the construction of a key and the left_joins used above by looping through each SNP, one by one:\n\nsnp.table2 &lt;- function(snp.list, N=15) {\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene)\n  require(org.Hs.eg.db)\n  \n  txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\n  tx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\n  gene.name &lt;- data.frame()\n  \n  for (i in 1:N) {\n    gene.name[i, 1] &lt;- snp.list[i,]$CHR\n    gene.name[i, 2] &lt;- snp.list[i,]$BP\n    gene.name[i, 3] &lt;- snp.list[i,]$SNP\n    gene.name[i, 4] &lt;- snp.list[i,]$P\n    top.snp &lt;- with(snp.list[i,], GRanges(seqnames=paste0(\"chr\", CHR), \n                                      IRanges(start=BP, width=1), \n                                      rsid=SNP, P=P))\n    hits &lt;- subsetByOverlaps(tx.by.gene, top.snp)\n    genename &lt;- select(org.Hs.eg.db, keys=names(hits), columns=c(\"SYMBOL\", \"GENENAME\"), keytype=\"ENTREZID\")\n    gene.name[i, 5] &lt;- ifelse(nrow(genename) == 0, NA, genename[[2]])\n    gene.name[i, 6] &lt;- ifelse(nrow(genename) == 0, NA, genename[[3]])\n  }\n  colnames(gene.name) &lt;- c(\"CHR\", \"BP\", \"SNP\", \"P\", \"Symbol\", \"Gene name\")\n  return(gene.name)\n}\n\n(t &lt;- snp.table2(top.hits, 15)) %&gt;% kable(digits=15)\n\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHR\nBP\nSNP\nP\nSymbol\nGene name\n\n\n\n\n6\n1942538\nrs3800143\n4.608e-11\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n11\n4913057\nrs10836914\n1.295e-07\nNA\nNA\n\n\n11\n4913314\nrs12577475\n1.587e-07\nNA\nNA\n\n\n6\n1926650\nrs11242725\n3.785e-07\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1880964\nrs3800116\n1.475e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1915129\nrs3778552\n1.646e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1908210\nrs2875711\n2.550e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n1955398\nrs9378664\n2.809e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n6\n143144885\nrs926372\n5.704e-06\nHIVEP2\nHIVEP zinc finger 2\n\n\n11\n4912192\nrs10836912\n8.977e-06\nNA\nNA\n\n\n6\n1899671\nrs3800122\n1.022e-05\nGMDS\nGDP-mannose 4,6-dehydratase\n\n\n11\n4910224\nrs2570591\n1.656e-05\nNA\nNA\n\n\n11\n6340706\nrs1051992\n2.356e-05\nCAVIN3\ncaveolae associated protein 3\n\n\n6\n3317016\nrs4959804\n2.821e-05\nSLC22A23\nsolute carrier family 22 member 23\n\n\n11\n4915072\nrs1816448\n2.834e-05\nNA\nNA\n\n\n\n\ndim(t)\n\n[1] 15  6",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#question-3",
    "href": "GRanges.html#question-3",
    "title": "24  GRanges Exercise",
    "section": "24.13 Question 3",
    "text": "24.13 Question 3\nTask: Using GRanges and associated Bioconductor tools, write a function that takes as input a ranked list of the SNPS, and returns a nice table that lists the top N of these SNPs and the closest flanking genes on both sides, including the SNP position and the gene boundaries.\n# snp.list = the ranked list of the top SNPs\n# N = the number of top SNPs to annotate\nsnp.flank &lt;- function(snp.list, N=15) {\n \n}\nApply your snp.flank function to the top 15 SNPs in our example data set.\nNote that the purpose here is to think more about how to creatively use GRanges than to search for nice annotation packages.\n\n\n\n\n\n\nHint\n\n\n\nThe GenomicRanges package has a useful function nearest that can be used to find the nearest gene.\nNote that if we want to augment information about the nearest gene with the genes that precede and follow each top SNP, we could use functions like this:\ngenes &lt;- genes(txdb, columns = \"gene_id\")\nprecede(top.snp, genes)\nfollow(top.snp, genes)\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n24.14 Answer 3\nNote that we need to set up the txdb object within the function itself to avoid creating a dependence on the global txdb object. Although, it might be more efficient to create the txdb object once and pass it in via a function parameter instead of recreating it each time the function is called.\nHere we use require statements to indicate dependence on certain libraries having been loaded, but if this were part of an R package, we’d take care of library dependencies at the package level instead of inside of specific functions. Usually when writing functions, we assume that all of the required packages have been loaded, so we tend not to use the library or the require command within functions.\n\n# snp.list = the ranked list of the top SNPs\n# N = the number of top SNPs to annotate\nsnp.flank &lt;- function(snp.list, N=15) {\n  require(org.Hs.eg.db)\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene)\n  txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\n  tx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\n  # Find the gene boundaries\n  gene.bounds &lt;- reduce(tx.by.gene)\n  # Set up a GRange with the first N top SNPs\n  top.snp &lt;- with(snp.list[1:N, ], GRanges(seqnames = paste0(\"chr\", CHR),\n                                           IRanges(start = BP, width = 1),\n                                           SNP = SNP, P = P))\n  # Find overlaps and hits\n  top.snp.gene &lt;- findOverlaps(gene.bounds, top.snp)\n  hits &lt;- subsetByOverlaps(gene.bounds, top.snp)\n  # The SNP hits\n  snp.info &lt;- data.frame(SNP.ID = subjectHits(top.snp.gene),\n                         SNP.chr = seqnames(top.snp[subjectHits(top.snp.gene)]),\n                         ranges(top.snp[subjectHits(top.snp.gene)]),\n                         mcols(top.snp[subjectHits(top.snp.gene)]))\n  # The Gene hits\n  gene.info &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                          seqnames(gene.bounds[queryHits(top.snp.gene)]),\n                          ranges(gene.bounds[queryHits(top.snp.gene)]))\n  # Reduce gene.info to distinct entries\n  gene.info &lt;- gene.info %&gt;% dplyr::select(-group, -group.1) %&gt;% distinct()\n  # Construct a key linking SNPs to Genes\n  key &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                    SNP.ID = subjectHits(top.snp.gene))\n  snp.gene &lt;- key %&gt;% left_join(gene.info, by = \"gene.ID\") %&gt;%\n    left_join(snp.info, by = \"SNP.ID\")\n  gene.name &lt;- select(org.Hs.eg.db, keys = names(hits),\n        columns = c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"), keytype = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% dplyr::rename(ENTREZID = group_name) %&gt;%\n    left_join(gene.name, by = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% arrange(P)\n  snp.gene &lt;- left_join(snp.list[1:N, ], snp.gene, by = c(\"SNP\"))\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::select(CHR, BP, SNP, P.x, SYMBOL, GENENAME, start.x, end.x, width.x)\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::rename(P = P.x, start = start.x, end = end.x, width = width.x)\n  # Now find the nearest genes\n  genes &lt;- genes(txdb, columns = \"gene_id\")\n  # Find the Nearest gene\n  nearest_gene_index &lt;- nearest(top.snp, genes)\n  EntrezID &lt;- unlist(genes[nearest_gene_index]$gene_id)\n  lookup &lt;- select(org.Hs.eg.db, keys = EntrezID, keytype = \"ENTREZID\",\n                   columns = c(\"SYMBOL\", \"GENENAME\"))\n  symbol &lt;- lookup$SYMBOL\n  genename &lt;- lookup$GENENAME\n  nearest &lt;- bind_cols(SNP = mcols(top.snp)$SNP, EntrezID = EntrezID,\n                       symbol = symbol, genename = genename,\n                       start = unlist(start(gene.bounds[EntrezID, ])),\n                       end = unlist(end(gene.bounds[EntrezID, ])))\n  if (all.equal(mcols(top.snp)$SNP, nearest$SNP)) {\n    snp.gene$Nearest &lt;- nearest$symbol\n    snp.gene$N.GENENAME &lt;- nearest$genename\n    snp.gene$N.start &lt;- nearest$start\n    snp.gene$N.end &lt;- nearest$end\n  }\n  # Find the preceding genes\n  precede_gene_index &lt;- precede(top.snp, genes)\n  EntrezID &lt;- unlist(genes[precede_gene_index]$gene_id)\n  lookup &lt;- select(org.Hs.eg.db, keys = EntrezID, keytype = \"ENTREZID\",\n                   columns = c(\"SYMBOL\", \"GENENAME\"))\n  symbol &lt;- lookup$SYMBOL\n  genename &lt;- lookup$GENENAME\n  precede &lt;- bind_cols(SNP = mcols(top.snp)$SNP, EntrezID = EntrezID,\n                       symbol = symbol, genename = genename,\n                       start = unlist(start(gene.bounds[EntrezID, ])),\n                       end = unlist(end(gene.bounds[EntrezID, ])))\n  if (all.equal(mcols(top.snp)$SNP, precede$SNP)) {\n    snp.gene$Precede &lt;- precede$symbol\n    snp.gene$P.GENENAME &lt;- precede$genename\n    snp.gene$P.start &lt;- precede$start\n    snp.gene$P.end &lt;- precede$end\n  }\n  # Find the following genes\n  follow_gene_index &lt;- follow(top.snp, genes)\n  EntrezID &lt;- unlist(genes[follow_gene_index]$gene_id)\n  lookup &lt;- select(org.Hs.eg.db, keys = EntrezID, keytype = \"ENTREZID\",\n                   columns = c(\"SYMBOL\", \"GENENAME\"))\n  symbol &lt;- lookup$SYMBOL\n  genename &lt;- lookup$GENENAME\n  follow &lt;- bind_cols(SNP = mcols(top.snp)$SNP, EntrezID = EntrezID,\n                       symbol = symbol, genename = genename,\n                       start = unlist(start(gene.bounds[EntrezID, ])),\n                       end = unlist(end(gene.bounds[EntrezID, ])))\n  if (all.equal(mcols(top.snp)$SNP, follow$SNP)) {\n    snp.gene$Follow &lt;- follow$symbol\n    snp.gene$F.GENENAME &lt;- follow$genename\n    snp.gene$F.start &lt;- follow$start\n    snp.gene$F.end &lt;- follow$end\n  }\n  return(snp.gene)\n}\n\n\n(t &lt;- snp.flank(top.hits, 15)) %&gt;% kable(digits=15)\n\nWarning in .local(x, row.names, optional, ...): 'optional' argument was ignored\n\n\n'select()' returned 1:1 mapping between keys and columns\n\n\n  403 genes were dropped because they have exons located on both strands\n  of the same reference sequence or on more than one reference sequence,\n  so cannot be represented by a single genomic range.\n  Use 'single.strand.genes.only=FALSE' to get all the genes in a\n  GRangesList object, or use suppressMessages() to suppress this message.\n\n\n'select()' returned many:1 mapping between keys and columns\n'select()' returned many:1 mapping between keys and columns\n'select()' returned many:1 mapping between keys and columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHR\nBP\nSNP\nP\nSYMBOL\nGENENAME\nstart\nend\nwidth\nNearest\nN.GENENAME\nN.start\nN.end\nPrecede\nP.GENENAME\nP.start\nP.end\nFollow\nF.GENENAME\nF.start\nF.end\n\n\n\n\n6\n1942538\nrs3800143\n4.608e-11\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n11\n4913057\nrs10836914\n1.295e-07\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n11\n4913314\nrs12577475\n1.587e-07\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n6\n1926650\nrs11242725\n3.785e-07\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1880964\nrs3800116\n1.475e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1915129\nrs3778552\n1.646e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1908210\nrs2875711\n2.550e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1955398\nrs9378664\n2.809e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n143144885\nrs926372\n5.704e-06\nHIVEP2\nHIVEP zinc finger 2\n143072604\n143266338\n193735\nHIVEP2\nHIVEP zinc finger 2\n143072604\n143266338\nLOC153910\nuncharacterized LOC153910\n142847592\n142959026\nLINC01277\nlong intergenic non-protein coding RNA 1277\n143287559\n143358719\n\n\n11\n4912192\nrs10836912\n8.977e-06\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n6\n1899671\nrs3800122\n1.022e-05\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n11\n4910224\nrs2570591\n1.656e-05\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n11\n6340706\nrs1051992\n2.356e-05\nCAVIN3\ncaveolae associated protein 3\n6340176\n6341740\n1565\nCAVIN3\ncaveolae associated protein 3\n6340176\n6341740\nSMPD1\nsphingomyelin phosphodiesterase 1\n6411644\n6416228\nCCKBR\ncholecystokinin B receptor\n6280904\n6293357\n\n\n6\n3317016\nrs4959804\n2.821e-05\nSLC22A23\nsolute carrier family 22 member 23\n3269207\n3456793\n187587\nSLC22A23\nsolute carrier family 22 member 23\n3269207\n3456793\nTUBB2B\ntubulin beta 2B class IIb\n3224495\n3227968\nPSMG4\nproteasome assembly chaperone 4\n3259162\n3268300\n\n\n11\n4915072\nrs1816448\n2.834e-05\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n\n\ndim(t)\n\n[1] 15 21",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "GRanges.html#answer-3",
    "href": "GRanges.html#answer-3",
    "title": "24  GRanges Exercise",
    "section": "24.14 Answer 3",
    "text": "24.14 Answer 3\nNote that we need to set up the txdb object within the function itself to avoid creating a dependence on the global txdb object. Although, it might be more efficient to create the txdb object once and pass it in via a function parameter instead of recreating it each time the function is called.\nHere we use require statements to indicate dependence on certain libraries having been loaded, but if this were part of an R package, we’d take care of library dependencies at the package level instead of inside of specific functions. Usually when writing functions, we assume that all of the required packages have been loaded, so we tend not to use the library or the require command within functions.\n\n# snp.list = the ranked list of the top SNPs\n# N = the number of top SNPs to annotate\nsnp.flank &lt;- function(snp.list, N=15) {\n  require(org.Hs.eg.db)\n  require(TxDb.Hsapiens.UCSC.hg19.knownGene)\n  txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene\n  tx.by.gene &lt;- transcriptsBy(txdb, \"gene\")\n  # Find the gene boundaries\n  gene.bounds &lt;- reduce(tx.by.gene)\n  # Set up a GRange with the first N top SNPs\n  top.snp &lt;- with(snp.list[1:N, ], GRanges(seqnames = paste0(\"chr\", CHR),\n                                           IRanges(start = BP, width = 1),\n                                           SNP = SNP, P = P))\n  # Find overlaps and hits\n  top.snp.gene &lt;- findOverlaps(gene.bounds, top.snp)\n  hits &lt;- subsetByOverlaps(gene.bounds, top.snp)\n  # The SNP hits\n  snp.info &lt;- data.frame(SNP.ID = subjectHits(top.snp.gene),\n                         SNP.chr = seqnames(top.snp[subjectHits(top.snp.gene)]),\n                         ranges(top.snp[subjectHits(top.snp.gene)]),\n                         mcols(top.snp[subjectHits(top.snp.gene)]))\n  # The Gene hits\n  gene.info &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                          seqnames(gene.bounds[queryHits(top.snp.gene)]),\n                          ranges(gene.bounds[queryHits(top.snp.gene)]))\n  # Reduce gene.info to distinct entries\n  gene.info &lt;- gene.info %&gt;% dplyr::select(-group, -group.1) %&gt;% distinct()\n  # Construct a key linking SNPs to Genes\n  key &lt;- data.frame(gene.ID = queryHits(top.snp.gene),\n                    SNP.ID = subjectHits(top.snp.gene))\n  snp.gene &lt;- key %&gt;% left_join(gene.info, by = \"gene.ID\") %&gt;%\n    left_join(snp.info, by = \"SNP.ID\")\n  gene.name &lt;- select(org.Hs.eg.db, keys = names(hits),\n        columns = c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"), keytype = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% dplyr::rename(ENTREZID = group_name) %&gt;%\n    left_join(gene.name, by = \"ENTREZID\")\n  snp.gene &lt;- snp.gene %&gt;% arrange(P)\n  snp.gene &lt;- left_join(snp.list[1:N, ], snp.gene, by = c(\"SNP\"))\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::select(CHR, BP, SNP, P.x, SYMBOL, GENENAME, start.x, end.x, width.x)\n  snp.gene &lt;- snp.gene %&gt;%\n    dplyr::rename(P = P.x, start = start.x, end = end.x, width = width.x)\n  # Now find the nearest genes\n  genes &lt;- genes(txdb, columns = \"gene_id\")\n  # Find the Nearest gene\n  nearest_gene_index &lt;- nearest(top.snp, genes)\n  EntrezID &lt;- unlist(genes[nearest_gene_index]$gene_id)\n  lookup &lt;- select(org.Hs.eg.db, keys = EntrezID, keytype = \"ENTREZID\",\n                   columns = c(\"SYMBOL\", \"GENENAME\"))\n  symbol &lt;- lookup$SYMBOL\n  genename &lt;- lookup$GENENAME\n  nearest &lt;- bind_cols(SNP = mcols(top.snp)$SNP, EntrezID = EntrezID,\n                       symbol = symbol, genename = genename,\n                       start = unlist(start(gene.bounds[EntrezID, ])),\n                       end = unlist(end(gene.bounds[EntrezID, ])))\n  if (all.equal(mcols(top.snp)$SNP, nearest$SNP)) {\n    snp.gene$Nearest &lt;- nearest$symbol\n    snp.gene$N.GENENAME &lt;- nearest$genename\n    snp.gene$N.start &lt;- nearest$start\n    snp.gene$N.end &lt;- nearest$end\n  }\n  # Find the preceding genes\n  precede_gene_index &lt;- precede(top.snp, genes)\n  EntrezID &lt;- unlist(genes[precede_gene_index]$gene_id)\n  lookup &lt;- select(org.Hs.eg.db, keys = EntrezID, keytype = \"ENTREZID\",\n                   columns = c(\"SYMBOL\", \"GENENAME\"))\n  symbol &lt;- lookup$SYMBOL\n  genename &lt;- lookup$GENENAME\n  precede &lt;- bind_cols(SNP = mcols(top.snp)$SNP, EntrezID = EntrezID,\n                       symbol = symbol, genename = genename,\n                       start = unlist(start(gene.bounds[EntrezID, ])),\n                       end = unlist(end(gene.bounds[EntrezID, ])))\n  if (all.equal(mcols(top.snp)$SNP, precede$SNP)) {\n    snp.gene$Precede &lt;- precede$symbol\n    snp.gene$P.GENENAME &lt;- precede$genename\n    snp.gene$P.start &lt;- precede$start\n    snp.gene$P.end &lt;- precede$end\n  }\n  # Find the following genes\n  follow_gene_index &lt;- follow(top.snp, genes)\n  EntrezID &lt;- unlist(genes[follow_gene_index]$gene_id)\n  lookup &lt;- select(org.Hs.eg.db, keys = EntrezID, keytype = \"ENTREZID\",\n                   columns = c(\"SYMBOL\", \"GENENAME\"))\n  symbol &lt;- lookup$SYMBOL\n  genename &lt;- lookup$GENENAME\n  follow &lt;- bind_cols(SNP = mcols(top.snp)$SNP, EntrezID = EntrezID,\n                       symbol = symbol, genename = genename,\n                       start = unlist(start(gene.bounds[EntrezID, ])),\n                       end = unlist(end(gene.bounds[EntrezID, ])))\n  if (all.equal(mcols(top.snp)$SNP, follow$SNP)) {\n    snp.gene$Follow &lt;- follow$symbol\n    snp.gene$F.GENENAME &lt;- follow$genename\n    snp.gene$F.start &lt;- follow$start\n    snp.gene$F.end &lt;- follow$end\n  }\n  return(snp.gene)\n}\n\n\n(t &lt;- snp.flank(top.hits, 15)) %&gt;% kable(digits=15)\n\nWarning in .local(x, row.names, optional, ...): 'optional' argument was ignored\n\n\n'select()' returned 1:1 mapping between keys and columns\n\n\n  403 genes were dropped because they have exons located on both strands\n  of the same reference sequence or on more than one reference sequence,\n  so cannot be represented by a single genomic range.\n  Use 'single.strand.genes.only=FALSE' to get all the genes in a\n  GRangesList object, or use suppressMessages() to suppress this message.\n\n\n'select()' returned many:1 mapping between keys and columns\n'select()' returned many:1 mapping between keys and columns\n'select()' returned many:1 mapping between keys and columns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCHR\nBP\nSNP\nP\nSYMBOL\nGENENAME\nstart\nend\nwidth\nNearest\nN.GENENAME\nN.start\nN.end\nPrecede\nP.GENENAME\nP.start\nP.end\nFollow\nF.GENENAME\nF.start\nF.end\n\n\n\n\n6\n1942538\nrs3800143\n4.608e-11\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n11\n4913057\nrs10836914\n1.295e-07\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n11\n4913314\nrs12577475\n1.587e-07\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n6\n1926650\nrs11242725\n3.785e-07\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1880964\nrs3800116\n1.475e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1915129\nrs3778552\n1.646e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1908210\nrs2875711\n2.550e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n1955398\nrs9378664\n2.809e-06\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n6\n143144885\nrs926372\n5.704e-06\nHIVEP2\nHIVEP zinc finger 2\n143072604\n143266338\n193735\nHIVEP2\nHIVEP zinc finger 2\n143072604\n143266338\nLOC153910\nuncharacterized LOC153910\n142847592\n142959026\nLINC01277\nlong intergenic non-protein coding RNA 1277\n143287559\n143358719\n\n\n11\n4912192\nrs10836912\n8.977e-06\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n6\n1899671\nrs3800122\n1.022e-05\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\n621834\nGMDS\nGDP-mannose 4,6-dehydratase\n1624035\n2245868\nGMDS-DT\nGMDS divergent transcript\n2245987\n2481403\nFOXC1\nforkhead box C1\n1610681\n1614129\n\n\n11\n4910224\nrs2570591\n1.656e-05\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n11\n6340706\nrs1051992\n2.356e-05\nCAVIN3\ncaveolae associated protein 3\n6340176\n6341740\n1565\nCAVIN3\ncaveolae associated protein 3\n6340176\n6341740\nSMPD1\nsphingomyelin phosphodiesterase 1\n6411644\n6416228\nCCKBR\ncholecystokinin B receptor\n6280904\n6293357\n\n\n6\n3317016\nrs4959804\n2.821e-05\nSLC22A23\nsolute carrier family 22 member 23\n3269207\n3456793\n187587\nSLC22A23\nsolute carrier family 22 member 23\n3269207\n3456793\nTUBB2B\ntubulin beta 2B class IIb\n3224495\n3227968\nPSMG4\nproteasome assembly chaperone 4\n3259162\n3268300\n\n\n11\n4915072\nrs1816448\n2.834e-05\nNA\nNA\nNA\nNA\nNA\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\nOR51A7\nolfactory receptor family 51 subfamily A member 7\n4928600\n4929538\nOR51T1\nolfactory receptor family 51 subfamily T member 1\n4903049\n4904113\n\n\n\n\ndim(t)\n\n[1] 15 21",
    "crumbs": [
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>GRanges Exercise</span>"
    ]
  },
  {
    "objectID": "QC.html",
    "href": "QC.html",
    "title": "25  Data Cleaning Exercise",
    "section": "",
    "text": "25.1 Data cleaning principles\nData cleaning principles from Karl Broman’s slide set:\nhttps://kbroman.org/Talk_DataCleaning/data_cleaning.pdf",
    "crumbs": [
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Data Cleaning Exercise</span>"
    ]
  },
  {
    "objectID": "QC.html#dbgap-quality-control",
    "href": "QC.html#dbgap-quality-control",
    "title": "25  Data Cleaning Exercise",
    "section": "25.2 dbGaP quality control",
    "text": "25.2 dbGaP quality control\nAs described in:\nTryka KA, Hao L, Sturcke A, Jin Y, Wang ZY, Ziyabari L, Lee M, Popova N, Sharopova N, Kimura M, Feolo M. NCBI’s Database of Genotypes and Phenotypes: dbGaP. Nucleic Acids Research. 2014 Jan 1;42(D1):D975–D979. PMID: 24297256 PMCID: PMC3965052 DOI: https://doi.org/10.1093/nar/gkt1211\n\n“The Database of Genotypes and Phenotypes (dbGap, http://www.ncbi.nlm.nih.gov/gap) is a National Institutes of Health-sponsored repository charged to archive, curate and distribute information produced by studies investigating the interaction of genotype and phenotype.”\n\nUnder NIH data sharing guidelines, all properly consented large-scale genetic or ’omics studies must deposit their data in dbGaP. To so, one must closely follow the formatting requirements as described in the dbGaP Submission Guide:\nhttps://www.ncbi.nlm.nih.gov/gap/docs/submissionguide/\nThis involves setting up a data dictionary that follows dbGaP specifications:",
    "crumbs": [
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Data Cleaning Exercise</span>"
    ]
  },
  {
    "objectID": "QC.html#minimum-and-maximum-values-check",
    "href": "QC.html#minimum-and-maximum-values-check",
    "title": "25  Data Cleaning Exercise",
    "section": "25.3 Minimum and Maximum Values Check",
    "text": "25.3 Minimum and Maximum Values Check\n\n25.3.1 MIN, MAX check\nIn the data dictionary, for some variables, MIN and MAX values may be specified. For example, for age, it has a natural minimum of zero.\nMIN     The logical minimum value of the variable. If a separate code such as -1 is used for a missing field, this should not be considered as the MIN value.\nMAX     The logical maximum value for the variable. If a separate code such as 9999 is used for a missing field, this should not be considered as the MAX value.\nTask: Design and implement a check that the specified MIN and MAX values observed in the data are consistent with the values as specified in the data dictionary.\n\nsuppressMessages(library(tidyverse))\nlibrary(dbGaPCheckup)\n## Load DD.dict.I and DS.data.I\ndata(ExampleI)\n\nUsing DD.dict.I and DS.data.I, check the PERCEIVED_CONFLICT variable to see if all the values fall within the stated MIN and MAX values.\n\nDD.dict.I %&gt;% \n  filter(VARNAME==\"PERCEIVED_CONFLICT\") %&gt;% \n  select(VARNAME,MIN,MAX)\n\n# A tibble: 1 × 3\n  VARNAME              MIN   MAX\n  &lt;chr&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 PERCEIVED_CONFLICT     1    15\n\n\n\n\n25.3.2 Pseudo-code\n\n\n\n\n\n\nHint\n\n\n\nFirst try to write out an algorithm for this Minimum and Maximum Values Check in pseudo-code, outlining each step.\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nPossible steps:\n\nRead the vector of PERCEIVED_CONFLICT from DS.data.I\nRead the MIN and MAX values for PERCEIVED_CONFLICT from DD.dict.I\nCount and list any PERCEIVED_CONFLICT values that lie outside of the range [MIN, …, MAX].\n\n\n\n\n\n\n25.3.3 Implement MIN, MAX check in R\nImplement your algorithm in code.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n# Read the vector of `PERCEIVED_CONFLICT` from `DS.data.I`\ntrait &lt;- DS.data.I$PERCEIVED_CONFLICT\n# Read the `MIN` and `MAX` values for `PERCEIVED_CONFLICT` from `DD.dict.I`\nmin.val &lt;- DD.dict.I %&gt;% \n  filter(VARNAME==\"PERCEIVED_CONFLICT\") %&gt;% \n  pull(MIN)\nmax.val &lt;- DD.dict.I %&gt;% \n  filter(VARNAME==\"PERCEIVED_CONFLICT\") %&gt;%\n  pull(MAX)\n# List any `PERCEIVED_CONFLICT` values that lie outside of the range [`MIN`, ..., `MAX`].\ntrait[trait &lt; min.val | trait &gt; max.val] %&gt;%\n  unique() %&gt;%\n  sort()\n\n [1] 16 17 19 20 21 24 25 26 28 29 30\n\n# Count any `PERCEIVED_CONFLICT` values that lie outside of the range [`MIN`, ..., `MAX`].\ntrait[trait &lt; min.val | trait &gt; max.val] %&gt;%\n  length()\n\n[1] 44\n\n\nThese results are consistent with those returned by the minmax_check function from the dbGaPCheckup R package:\n\ndetails &lt;- minmax_check(DD.dict.I, DS.data.I, non.NA.missing.codes=c(-9999, -4444))$Information\n\n$Message\n[1] \"ERROR: some variables have values outside of the MIN to MAX range.\"\n\n$Information\n# A tibble: 1 × 5\n  Trait              Check ListedMin ListedMax OutOfRangeValues \n  &lt;chr&gt;              &lt;lgl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;list&gt;           \n1 PERCEIVED_CONFLICT FALSE         1        15 &lt;tibble [11 × 1]&gt;\n\ndf.tmp &lt;- details[[1]]$OutOfRangeValues[[1]] \ndf.tmp[order(df.tmp$PERCEIVED_CONFLICT),]\n\n# A tibble: 11 × 1\n   PERCEIVED_CONFLICT\n                &lt;int&gt;\n 1                 16\n 2                 17\n 3                 19\n 4                 20\n 5                 21\n 6                 24\n 7                 25\n 8                 26\n 9                 28\n10                 29\n11                 30\n\n\n\n\n\n\n\n25.3.4 Make your check more robust\nAfter implementing your algorithm in R code, think about it a bit further - is it robust to the situation where only one of the MIN and MAX values is specified and the other is missing? Is it robust to the situation where both MIN and MAX are missing?\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n# List any `PERCEIVED_CONFLICT` values that lie outside of the range [`MIN`, ..., `MAX`].\ntrait[trait &lt; min.val | trait &gt; max.val] %&gt;% \n  unique() %&gt;% \n  sort()\n\n [1] 16 17 19 20 21 24 25 26 28 29 30\n\n\nThe code proposed here is not robust to MIN or MAX being NA because, for example, if MIN is NA and MAX is 15, in some situations the logical indexing into the trait vector used of trait &lt; min.val | trait &gt; max.val would return NA instead of TRUE or FALSE as intended.\n\n# MIN=NA, MAX=15\n16 &lt; NA | 16 &gt; 15\n\n[1] TRUE\n\n# MIN=1, MAX=NA\n16 &lt; 1 | 16 &gt; NA\n\n[1] NA\n\n# MIN=NA, MAX=NA\n16 &lt; NA | 16 &gt; NA\n\n[1] NA\n\n\nThis are possible steps toward writing a more robust check:\n\nvals.low &lt;- NA\nvals.high &lt;- NA\nif (!is.na(min.val)) {\n  vals.low &lt;- trait[trait &lt; min.val]\n}\nif (!is.na(max.val)) {\n  vals.high &lt;- trait[trait &gt; max.val]\n}\n\nvals.OutOfRange &lt;- c(vals.low,vals.high)\nvals.OutOfRange %&gt;% \n  na.omit() %&gt;% \n  unique() %&gt;% \n  sort()\n\n [1] 16 17 19 20 21 24 25 26 28 29 30\n\n\nBut what would the above code return if both MIN and MAX were NA?\nIf we look at the minmax_check code by typing minmax_check at the R prompt, we see that it uses a which when it tries to find the out-of-range values:\nflagged &lt;- dataset_na[which(dataset_na[, ind] &lt; \n   range_dictionary[1] | dataset_na[, ind] &gt; \n   range_dictionary[2]), , drop = FALSE]\nWhy is this robust to either one or both of MIN and MAX being missing?\n\n\n\n\n\n25.3.5 Check the PREGNANT variable\nNow apply your MIN and MAX checking algorithm to the PREGNANT variable.\n\nDD.dict.I %&gt;% \n  filter(VARNAME==\"PREGNANT\") %&gt;%\n  select(VARNAME,MIN,MAX)\n\n# A tibble: 1 × 3\n  VARNAME    MIN   MAX\n  &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 PREGNANT     0     1\n\n\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n# Read the vector of `PREGNANT` from `DS.data.I`\ntrait &lt;- DS.data.I$PREGNANT\n# Read the `MIN` and `MAX` values for `PREGNANT` from `DD.dict.I`\nmin.val &lt;- DD.dict.I %&gt;% \n  filter(VARNAME==\"PREGNANT\") %&gt;% \n  pull(MIN)\nmax.val &lt;- DD.dict.I %&gt;% \n  filter(VARNAME==\"PREGNANT\") %&gt;%\n  pull(MAX)\n# List any `PREGNANT` values that lie outside of the range [`MIN`, ..., `MAX`].\ntrait[trait &lt; min.val | trait &gt; max.val] %&gt;%\n  unique() %&gt;%\n  sort()\n\n[1] -9999 -4444\n\n# Count any `PREGNANT` values that lie outside of the range [`MIN`, ..., `MAX`].\ntrait[trait &lt; min.val | trait &gt; max.val] %&gt;%\n  length()\n\n[1] 53\n\n\nThese out-of-range values of -9999 and -4444 look kind of strange and are unexpected given the first two entries of the VALUES column of the data dictionary for this variable:\n\nDD.dict.I[which(DD.dict.I==\"PREGNANT\"),c(1,17,18)]\n\n# A tibble: 1 × 3\n  VARNAME  VALUES ...18\n  &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;\n1 PREGNANT 0=no   1=yes\n\n\nBased on this, we’d expect to see only 0 and 1 values in the PREGNANT variable.\nWhat’s going on?\n\n\n\n\n\n25.3.6 Handle missing values\nIf we further check the data dictionary for the PREGNANT variable, we see that the out-of-range values we observed in our check above are actually missing value codes and so should not be flagged as being out of range.\n\nDD.dict.I[which(DD.dict.I==\"PREGNANT\"),c(1,19,20)]\n\n# A tibble: 1 × 3\n  VARNAME  ...19               ...20                                            \n  &lt;chr&gt;    &lt;chr&gt;               &lt;chr&gt;                                            \n1 PREGNANT -9999=missing value -4444=not applicable, participant assigned male …\n\n\nExtend your algorithm to handle missing value codes. To do this first outline your approach in pseudo-code.\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\nPossible steps:\n\nRead the vector of PREGNANT from DS.data.I\nRead the MIN and MAX values for PREGNANT from DD.dict.I\nHave the user provide a list of missing value codes\nRecode any PREGNANT value that matches one of the missing value codes to the standard NA R missing value code.\nCount and list any non-missing PREGNANT values that lie outside of the range [MIN, …, MAX].\n\nThis is essentially the approach used in the minmax_check function of the dbGaPCheckup R package.\n\n# Without missing value codes specified\ndetails &lt;- minmax_check(DD.dict.I, DS.data.I)$Information\n\n$Message\n[1] \"ERROR: some variables have values outside of the MIN to MAX range.\"\n\n$Information\n# A tibble: 2 × 5\n  Trait              Check ListedMin ListedMax OutOfRangeValues\n  &lt;chr&gt;              &lt;lgl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;list&gt;          \n1 PREGNANT           FALSE         0         1 &lt;int [2]&gt;       \n2 PERCEIVED_CONFLICT FALSE         1        15 &lt;int [11]&gt;      \n\ndetails[[1]]$OutOfRangeValues\n\n[[1]]\n[1] -4444 -9999\n\n[[2]]\n [1] 25 24 16 28 17 21 30 19 26 20 29\n\n# With missing value codes specified\n# PREGNANT is no longer flagged as having out of range values.\ndetails &lt;- minmax_check(DD.dict.I, DS.data.I, non.NA.missing.codes=c(-9999, -4444))$Information\n\n$Message\n[1] \"ERROR: some variables have values outside of the MIN to MAX range.\"\n\n$Information\n# A tibble: 1 × 5\n  Trait              Check ListedMin ListedMax OutOfRangeValues \n  &lt;chr&gt;              &lt;lgl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;list&gt;           \n1 PERCEIVED_CONFLICT FALSE         1        15 &lt;tibble [11 × 1]&gt;\n\n\nIf we examine the minmax_check code by typing minmax_check without parentheses at the R prompt, we see that this is how the missing value recoding step is done:\nfor (value in na.omit(non.NA.missing.codes)) {\n    dataset_na &lt;- dataset_na %&gt;% mutate(across(everything(), \n        ~na_if(.x, value)))\n}",
    "crumbs": [
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Data Cleaning Exercise</span>"
    ]
  },
  {
    "objectID": "QC.html#references-and-resources",
    "href": "QC.html#references-and-resources",
    "title": "25  Data Cleaning Exercise",
    "section": "25.4 References and Resources",
    "text": "25.4 References and Resources\n\nHeinsberg LW, Weeks DE. dbGaPCheckup: pre-submission checks of dbGaP-formatted subject phenotype files. BMC Bioinformatics. 2023 Mar 3;24(1):77. PMID: 36869285 PMCID: PMC9985192 DOI: https://doi.org/10.1186/s12859-023-05200-8\nTryka KA, Hao L, Sturcke A, Jin Y, Wang ZY, Ziyabari L, Lee M, Popova N, Sharopova N, Kimura M, Feolo M. NCBI’s Database of Genotypes and Phenotypes: dbGaP. Nucleic Acids Research. 2014 Jan 1;42(D1):D975–D979. PMID: 24297256 PMCID: PMC3965052 DOI: https://doi.org/10.1093/nar/gkt1211\n\ndbGaPCheckup: https://lwheinsberg.github.io/dbGaPCheckup/index.html\nNCBI’s GaPTools: https://github.com/ncbi/gaptools",
    "crumbs": [
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Data Cleaning Exercise</span>"
    ]
  },
  {
    "objectID": "R_questions.html",
    "href": "R_questions.html",
    "title": "26  Questions about R",
    "section": "",
    "text": "26.1 Adding a new column to a data frame\nWhich of these is an incorrect way to add a new column to a data frame in R?**",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Questions about R</span>"
    ]
  },
  {
    "objectID": "R_questions.html#adding-a-new-column-to-a-data-frame",
    "href": "R_questions.html#adding-a-new-column-to-a-data-frame",
    "title": "26  Questions about R",
    "section": "",
    "text": "df &lt;- cbind(df, new_column3 = c(1, 2, 3, 4)) new_column(df) &lt;- c(1, 2, 3, 4) df$new_column &lt;- c(1, 2, 3, 4) df[, 'new_column'] &lt;- c(1, 2, 3, 4)",
    "crumbs": [
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Questions about R</span>"
    ]
  },
  {
    "objectID": "R_gotchas.html",
    "href": "R_gotchas.html",
    "title": "27  R gotchas",
    "section": "",
    "text": "27.1 Mis-counting\nThis example is modeled on this Mastodon post:\nhttps://fediscience.org/@thadryanjs/111188342897535820\n(df &lt;- data.frame(a=c(1,1,1,2), b=c(1,1,NA,2)))\n\n  a  b\n1 1  1\n2 1  1\n3 1 NA\n4 2  2\n\n# How many times is 1 in column a\nnrow(df[df$a == 1,])\n\n[1] 3\n\n# How many times is 1 in column b\nnrow(df[df$b == 1,])\n\n[1] 3\nAs there are only two 1’s in column b, this answer of 3 is incorrect.\nWhat’s going on here?\nWhat’s a correct way to count the number 1’s in each of these two columns?",
    "crumbs": [
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>R gotchas</span>"
    ]
  },
  {
    "objectID": "R_gotchas.html#mis-counting",
    "href": "R_gotchas.html#mis-counting",
    "title": "27  R gotchas",
    "section": "",
    "text": "Expand to see solution\n\n\n\n\n\nThis doesn’t work because of the NA causes this to return three rows:\n\ndf[df$b == 1,]\n\n    a  b\n1   1  1\n2   1  1\nNA NA NA\n\n\nUsing a data.table instead of a data.frame would work:\n\nlibrary(data.table)\n(dt &lt;- data.table(a=c(1,1,1,2), b=c(1,1,NA,2)))\n\n       a     b\n   &lt;num&gt; &lt;num&gt;\n1:     1     1\n2:     1     1\n3:     1    NA\n4:     2     2\n\n# How many times is 1 in column a\nnrow(dt[df$a == 1,])\n\n[1] 3\n\n# How many times is 1 in column b\nnrow(dt[df$b == 1,])\n\n[1] 2\n\n\nCounting it more directly is another possibility:\n\nsum(df$b==1, na.rm = TRUE)\n\n[1] 2\n\n\nTidyverse commands also gives the correct answer:\n\nsuppressMessages(library(tidyverse))\ndf %&gt;% filter(b == 1) %&gt;% nrow()\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>R gotchas</span>"
    ]
  },
  {
    "objectID": "R_gotchas.html#are-there-any-rs-in-the-vector-letters",
    "href": "R_gotchas.html#are-there-any-rs-in-the-vector-letters",
    "title": "27  R gotchas",
    "section": "27.2 Are there any r’s in the vector LETTERS?",
    "text": "27.2 Are there any r’s in the vector LETTERS?\nI used ‘which’ to determine there were zero copies of the target in the vector of interest, but then testing whether the answer returned by ‘which’ is zero is tricky.\nSee discussion on Mastodon here:\nhttps://fediscience.org/@StatGenDan/111052432535136731\n\n# LETTERS contains the uppercase letters\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\n# This returns a vector of length zero:\nwhich(LETTERS == \"r\")\n\ninteger(0)\n\n# Testing if it is equal to the integer zero does not work\n0 == which(LETTERS == \"r\")\n\nlogical(0)\n\n# Testing if it is equal to the integer one does not work\n1 == which(LETTERS == \"r\")\n\nlogical(0)\n\n\nSo what is more correct way to test if there are any r is present in the LETTERS vector?\nThomas Lumley commented:\n\n“In general, there are functions in R that return a length-1 answer (any, length, sum, min,…) and there are functions that return a variable-length answer (==, which, +, -,…). You have a length-1 question: are there any ’r’s? You need a function with a fixed length-1 return value.”\n\nhttps://fediscience.org/@tslumley/111053882380113100\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\n# Number of r's in LETTERS\nlength(which(LETTERS == \"r\"))\n\n[1] 0\n\n# Number of r's in LETTERS\nsum(LETTERS=='r')\n\n[1] 0\n\n# Is r present in LETTERS?\nany(LETTERS=='r')\n\n[1] FALSE",
    "crumbs": [
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>R gotchas</span>"
    ]
  },
  {
    "objectID": "R_gotchas.html#strange-r-behavior",
    "href": "R_gotchas.html#strange-r-behavior",
    "title": "27  R gotchas",
    "section": "27.3 Strange R behavior",
    "text": "27.3 Strange R behavior\nJune Choe shared this on Mastodon\nhttps://fosstodon.org/@yjunechoe/111026163637396686\nA student in my intro #rstats class taught me something new today (by way of a cryptic “bug”).\nSuppose you’re asked why this {purrr} code that should return the mean of each list element is not working as expected.\nmap(list(x=1:3, y=4:6), mean)\n#&gt; $x\n#&gt; [1] 1\n#&gt; \n#&gt; $y\n#&gt; [1] 4\nWhat do you think is the simplest explanation for this behavior (in terms of the mistake that the student could’ve made)? It’s not so obvious - there are multiple R “quirks” cascading!\n\n\n\n\n\n\nExpand to see solution\n\n\n\n\n\n\nlibrary(purrr)\nset.seed(123)\nmean &lt;- mean(sample(2, 10, replace=TRUE))\nmean\n\n[1] 1.4\n\n# These means are correct\nmean(1:3)\n\n[1] 2\n\nmean(4:6)\n\n[1] 5\n\n# These means are correct:\nlapply(list(x=1:3, y=4:6), mean)\n\n$x\n[1] 2\n\n$y\n[1] 5\n\n# But these means are incorrect:\nmap(list(x=1:3, y=4:6), mean)\n\n$x\n[1] 1\n\n$y\n[1] 4\n\n\nWhy are the means computed using the map function from the purrr package incorrect?\nIt is not applying the mean function, but rather it is applying the mean variable, which has a value of 1.4.\nAs the map documentation states, while the map command is typically used to apply a function in its .f argument, the .f argument can also accept an integer - when it does so, it is interpreted as follows:\n\nA string, integer, or list, e.g. \"idx\", 1, or list(\"idx\", 1) which are shorthand for pluck(x, \"idx\"), pluck(x, 1), and pluck(x, \"idx\", 1) respectively.\n\nSo when we map using the mean variable, it is used as an index to pluck elements out of the list - during the double to integer conversion, it is rounded down to 1, so it plucks the first element of each list.\n\nmap(list(x=1:3, y=4:6), 1.4)\n\n$x\n[1] 1\n\n$y\n[1] 4\n\nmap(list(x=1:3, y=4:6), 1)\n\n$x\n[1] 1\n\n$y\n[1] 4\n\n\nMoral: Be careful to avoid using existing R function names, like mean, as the names of your variables.\nRelevant discussion can be found in\nhttps://adv-r.hadley.nz/functions.html#functions-versus-variables\nwhere it is stated:\n\n“For the record, using the same name for different things is confusing and best avoided!”",
    "crumbs": [
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>R gotchas</span>"
    ]
  },
  {
    "objectID": "Basic_Unix_commands.html",
    "href": "Basic_Unix_commands.html",
    "title": "28  Basic Shell Commands",
    "section": "",
    "text": "28.1 Acknowledgment and License\nThis chapter is a derivative of the Basic Shell Commands cheat sheet from the DEPRECATED-boot-camps/shell/shell_cheatsheet.md file created by Software Carpentry and is used under the Creative Commons - Attribution license CC BY 3.0\nMinor section numbering and formatting changes were made here.\nThis chapter is licensed under the CC BY 3.0 license by Daniel E. Weeks.",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Basic Shell Commands</span>"
    ]
  },
  {
    "objectID": "Basic_Unix_commands.html#shell-basics",
    "href": "Basic_Unix_commands.html#shell-basics",
    "title": "28  Basic Shell Commands",
    "section": "28.2 Shell Basics:",
    "text": "28.2 Shell Basics:\n\n\n\n\n\n\n\nCommand\nDefinition\n\n\n\n\n.\na single period refers to the current directory\n\n\n..\na double period refers to the directory immediately above the current directory\n\n\n~\nrefers to your home directory. Note: this command does NOT work on Windows machines (Mac and Linux are okay)\n\n\ncd ./dirname\nchanges the current directory to the directory dirname\n\n\nls -F\ntells you what files and directories are in the current directory\n\n\npwd\ntells you what directory you are in (pwd stands for print working directory)\n\n\nhistory\nlists previous commands you have entered. history | less lets you page through the list.\n\n\nman cmd\ndisplays the manual page for a command.",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Basic Shell Commands</span>"
    ]
  },
  {
    "objectID": "Basic_Unix_commands.html#creating-things",
    "href": "Basic_Unix_commands.html#creating-things",
    "title": "28  Basic Shell Commands",
    "section": "28.3 Creating Things:",
    "text": "28.3 Creating Things:\n\n28.3.1 How to create new files and directories..\n\n\n\n\n\n\n\nCommand\nDefinition\n\n\n\n\nmkdir ./dirname\nmakes a new directory called dirname below the current directory. Note: Windows users will need to use \\ instead of / for the path separator\n\n\nnano filename\nif filename does not exist, nano creates it and opens the nano text editor. If the file exists, nano opens it. Note: (i) You can use a different text editor if you like. In gnome Linux, gedit works really well too. (ii) nano (or gedit) create text files. It doesn’t matter what the file extension is (or if there is one)\n\n\n\n\n\n28.3.2 How to delete files and directories…\n\n28.3.2.1 Remember that deleting is forever. There is NO going back\n\n\n\n\n\n\n\nCommand\nDefinition\n\n\n\n\nrm ./filename\ndeletes a file called filename from the current directory\n\n\nrmdir ./dirname\ndeletes the directory dirname from the current directory. Note: dirname must be empty for rmdir to run.\n\n\n\n\n\n\n28.3.3 How to copy and rename files and directories…\n\n\n\n\n\n\n\nCommand\nDefinition\n\n\n\n\nmv tmp/filename .\nmoves the file filename from the directory tmp to the current directory. Note: (i) the original filename in tmp is deleted. (ii) mv can also be used to rename files (e.g., mv filename newname\n\n\ncp tmp/filename .\ncopies the file filename from the directory tmp to the current directory. Note: (i) the original file is still there",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Basic Shell Commands</span>"
    ]
  },
  {
    "objectID": "Basic_Unix_commands.html#pipes-and-filters",
    "href": "Basic_Unix_commands.html#pipes-and-filters",
    "title": "28  Basic Shell Commands",
    "section": "28.4 Pipes and Filters",
    "text": "28.4 Pipes and Filters\n\n28.4.1 How to use wildcards to match filenames…\nWildcards are a shell feature that makes the command line much more powerful than any GUI file managers. Wildcards are particularly useful when you are looking for directories, files, or file content that can vary along a given dimension. These wildcards can be used with any command that accepts file names or text strings as arguments.\n\n28.4.1.1 Table of commonly used wildcards\n\n\n\n\n\n\n\nWildcard\nMatches\n\n\n\n\n*\nzero or more characters\n\n\n?\nexactly one character\n\n\n[abcde]\nexactly one of the characters listed\n\n\n[a-e]\nexactly one character in the given range\n\n\n[!abcde]\nany character not listed\n\n\n[!a-e]\nany character that is not in the given range\n\n\n{software,carpentry}\nexactly one entire word from the options given\n\n\n\nSee the cheatsheet on regular expressions on the second page of this PDF cheatsheet for more “wildcard” shortcuts.\n\n\n\n28.4.2 How to redirect to a file and get input from a file …\nRedirection operators can be used to redirect the output from a program from the display screen to a file where it is saved (or many other places too, like your printer or to another program where it can be used as input).\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\n&gt;\nwrite stdout to a new file; overwrites any file with that name (e.g., ls *.md &gt; mardkownfiles.txt)\n\n\n&gt;&gt;\nappend stdout to a previously existing file; if the file does not exist, it is created (e.g., ls *.md &gt;&gt; markdownfiles.txt)\n\n\n&lt;\nassigns the information in a file to a variable, loop, etc (e.g., n &lt; markdownfiles.md)\n\n\n\n\n28.4.2.1 How to use the output of one command as the input to another with a pipe…\nA special kind of redirection is called a pipe and is denoted by |.\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\n|\nOutput from one command line program can be used as input to another one (e.g. ls *.md | head gives you the first 5 *.md files in your directory)\n\n\n\n\n28.4.2.1.1 Example:\nls *.md | head | sed -i `s/markdown/software/g`\nchanges all the instances of the word markdown to software in the first 5 *.md files in your current directory.",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Basic Shell Commands</span>"
    ]
  },
  {
    "objectID": "Basic_Unix_commands.html#how-to-repeat-operations-using-a-loop",
    "href": "Basic_Unix_commands.html#how-to-repeat-operations-using-a-loop",
    "title": "28  Basic Shell Commands",
    "section": "28.5 How to repeat operations using a loop…",
    "text": "28.5 How to repeat operations using a loop…\nLoops assign a value in a list or counter to a variable that takes on a different value each time through the loop. There are 2 primary kinds of loops: for loops and while loops.\n\n28.5.1 For loop\nFor loops loop through variables in a list\nfor varname in list\ndo\n    command1 $varname\n    command2 $varname\ndone\nwhere,\n\nfor, in, do, and done are keywords\nlist contains a list of values separated by spaces. e.g. list can be replaced by 1 2 3 4 5 6 or by Bob Mary Sue Greg. list can also be a variable:\nvarname is assigned a value without using a $ and the value is retrieved using $varname\n\n–\nlist[0]=Sam\nlist[1]=Lynne\nlist[2]=Dhavide\nlist[3]=Trevor\n.\n.\n.\nlist[n]=Mark\nwhich is referenced in the loop by:\nfor varname in ${list[@]}\ndo\n    command1 $varname\n    command2 $varname\ndone\nNote: Bash is zero indexed, so counting always starts at 0, not 1.\n\n\n28.5.2 While Loop\nWhile loops loop through the commands until a condition is met. For example\nCOUNTER=0\nwhile [ ${COUNTER} -lt 10 ]; do\n    command 1\n    command 2\n    COUNTER=`expr ${COUNTER} + 1` \ndone\ncontinues the loop as long as the value in the variable COUNTER is less than 10 (incremented by 1 on each iteration of the loop).\n\nwhile, do, and done are keywords\n\n\n28.5.2.1 Commonly used conditional operators\n\n\n\nOperator\nDefinition\n\n\n\n\n-eq\nis equal to\n\n\n-ne\nis not equal to\n\n\n-gt\ngreater than\n\n\n-ge\ngreater than or equal to\n\n\n-lt\nless than\n\n\n-le\nless than or equal to\n\n\n\nUse man bash or man test to learn about other operators you can use.",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Basic Shell Commands</span>"
    ]
  },
  {
    "objectID": "Basic_Unix_commands.html#finding-things",
    "href": "Basic_Unix_commands.html#finding-things",
    "title": "28  Basic Shell Commands",
    "section": "28.6 Finding Things",
    "text": "28.6 Finding Things\n\n28.6.1 How to select lines matching patterns in text files…\nTo find information within files, you use a command called grep.\n\n\n\n\n\n\n\nExample command\nDescription\n\n\n\n\ngrep [options] day haiku.txt\nfinds every instance of the string day in the file haiku.txt and pipes it to standard output\n\n\n\n\n28.6.1.1 Commonly used grep options\n\n\n\n\n\n\n\n\ngrep options\n\n\n\n\n-E\ntells grep you will be using a regular expression. Enclose the regular expression in quotes. Note: the power of grep comes from using regular expressions. Please see the regular expressions sheet for examples\n\n\n-i\nmakes matching case-insensitive\n\n\n-n\nlimits the number of lines that match to the first n matches\n\n\n-v\nshows lines that do not match the pattern (inverts the match)\n\n\n-w\noutputs instances where the pattern is a whole word\n\n\n\n\n\n\n28.6.2 How to find files with certain properties…\nTo find file and directory names, you use a command called find\n\n\n\n\n\n\n\nExample command\nDescription\n\n\n\n\nfind . -type d\nfind recursively descends the directory tree for each path listed to match the expression given in the command line with file or directory names in the search path\n\n\n\n\n28.6.2.1 Commonly used find options\n\n\n\n\n\n\n\n\nfind options\n\n\n\n\n-type [df]\nd lists directories; f lists files\n\n\n-maxdepth n\nfind automatically searches subdirectories. If you don’t want that, specify the number of levels below the working directory you would like to search\n\n\n-mindepth n\nstarts find’s search n levels below the working directory",
    "crumbs": [
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Basic Shell Commands</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "29  Summary",
    "section": "",
    "text": "In summary, this book is a work in progress.",
    "crumbs": [
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html",
    "href": "TechnicalDetails.html",
    "title": "Appendix A — Technical Details",
    "section": "",
    "text": "A.1 Quarto\nThis book was build using Quarto.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#quarto",
    "href": "TechnicalDetails.html#quarto",
    "title": "Appendix A — Technical Details",
    "section": "",
    "text": "A.1.1 Callout blocks\nTo hide a solution that then can be clicked to view, we use a .callout-tip collapse=\"true\" callout block.\nHere are some examples from the Quarto documentation:\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n\n\n\n\n\n\n\n\nThis is Important\n\n\n\nDanger, callouts will really improve your writing.\n\n\n\n\n\n\n\n\nTip With Title\n\n\n\nThis is an example of a callout with a title.\n\n\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘collapsed’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default.\n\n\n\n\n\nA.1.2 Adding a chapter\nTo add a new chapter to the book, make a Quarto file containing the chapter text and code. It should have only one top-level header at the beginning which will be the title of the chapter.\nThen add it to the list of chapters in the _quarto.yml file.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#previewing-the-book",
    "href": "TechnicalDetails.html#previewing-the-book",
    "title": "Appendix A — Technical Details",
    "section": "A.2 Previewing the book",
    "text": "A.2 Previewing the book\nType quarto preview in the Terminal window.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#deploying-the-book-to-github-pages",
    "href": "TechnicalDetails.html#deploying-the-book-to-github-pages",
    "title": "Appendix A — Technical Details",
    "section": "A.3 Deploying the book to GitHub Pages",
    "text": "A.3 Deploying the book to GitHub Pages\nType quarto publish in the Terminal window.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#deploying-the-book-to-netlify",
    "href": "TechnicalDetails.html#deploying-the-book-to-netlify",
    "title": "Appendix A — Technical Details",
    "section": "A.4 Deploying the book to Netlify",
    "text": "A.4 Deploying the book to Netlify\nType quarto publish netlify in the Terminal window.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#multiple-choice-questions",
    "href": "TechnicalDetails.html#multiple-choice-questions",
    "title": "Appendix A — Technical Details",
    "section": "A.5 Multiple choice questions",
    "text": "A.5 Multiple choice questions\nTo create multiple choice questions, use functions from the webexercises R package.\nThe multiple choice question below is created by the inline R code\nr longmcq(opts_ci)\nWhat is true about a 95% confidence interval of the mean?\n\nopts_ci &lt;- c(\n  answer = \"If you repeated the process many times, 95% of intervals calculated in this way contain the true mean\",\n  \"There is a 95% probability that the true mean lies within this range\",\n  \"Approximately 95% of the data fall within this range\"\n)\n\n\n If you repeated the process many times, 95% of intervals calculated in this way contain the true mean There is a 95% probability that the true mean lies within this range Approximately 95% of the data fall within this range",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#webr-r-in-the-browser",
    "href": "TechnicalDetails.html#webr-r-in-the-browser",
    "title": "Appendix A — Technical Details",
    "section": "A.6 WebR: R in the browser",
    "text": "A.6 WebR: R in the browser\nThis Quarto book uses this WebR Quarto extension\nhttps://github.com/coatless/quarto-webr\nWebR makes installs a version of R that runs within the browser, and the Quarto extension makes it interactively available in webr-r chunks.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo get this to work, the _quarto.yml had to be modified.\nWe added a ‘resources’ directive to copy over the java script files, which places them next to the ‘index.html’ file during deployment of the book:\nproject:\n  type: book\n  resources: \n    - \"webr-serviceworker.js\"\n    - \"webr-worker.js\" \nWe also enabled the webr filter:\nfilters:\n    - webr",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "TechnicalDetails.html#embedpdf-quarto-extension",
    "href": "TechnicalDetails.html#embedpdf-quarto-extension",
    "title": "Appendix A — Technical Details",
    "section": "A.7 embedpdf Quarto extension",
    "text": "A.7 embedpdf Quarto extension\nThis book uses the embedpdf Quarto extension from https://github.com/jmgirard/embedpdf, which was installed via this command:\nquarto add jmgirard/embedpdf\nTo embed a PDF, use code like this:\n{{&lt; pdf dummy.pdf width=100% height=800 &gt;}}\nHowever, the PDF embedding done this way did not work in Chrome.\nExample:\nUnable to display PDF file. Download instead.\nSo instead we used an iframe, which works on Chrome, Firefox, and Safari:\n &lt;iframe width=\"100%\" height=\"800\" src=\"pdfs/GitHubIntro.pdf\"&gt;\nNote that for iframe embedding of Panopto video from the University of Pittsburgh, one needs to use a credentialless iframe.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Technical Details</span>"
    ]
  },
  {
    "objectID": "webR_test.html",
    "href": "webR_test.html",
    "title": "Appendix B — WebR - R in the web browser",
    "section": "",
    "text": "B.1 Link: WebR and quarto-webr.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>WebR - R in the web browser</span>"
    ]
  },
  {
    "objectID": "JSLinux.html",
    "href": "JSLinux.html",
    "title": "Appendix C — JSLinux terminal",
    "section": "",
    "text": "C.1 Interactive Linux terminal\nHere is an interactive Linux terminal (x86 Alpine Linux 3.12.0) created by the JSLinux project.\nYou can upload files to it by clicking the arrow below the terminal window.\nThis virtual Unix machine has a throttled very slow connection to the internet, so to install files and programs, it is better to download them to your computer outside of the browser, and then use the upload button to upload them onto this virtual machine.\nFor example, the 32-bit version of PLINK2 can be installed in this manner:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>JSLinux terminal</span>"
    ]
  },
  {
    "objectID": "JSLinux.html#interactive-linux-terminal",
    "href": "JSLinux.html#interactive-linux-terminal",
    "title": "Appendix C — JSLinux terminal",
    "section": "",
    "text": "Download the Linux 32-bit PLINK2 zip file from https://www.cog-genomics.org/plink/2.0/\nUnzip the downloaded file.\nUse the upload arrow here below the terminal window to upload the plink2 binary.\nMake the plink2 binary executable via this Unix command: chmod +x plink2\nRun PLINK2 via this Unix command: ./plink2",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>JSLinux terminal</span>"
    ]
  },
  {
    "objectID": "webLinux.html",
    "href": "webLinux.html",
    "title": "Appendix D — webLinux terminal",
    "section": "",
    "text": "D.1 Interactive Linux terminal\nHere is an interactive Linux terminal created by the webLinux project. The source code for this project can be found at https://github.com/remisharrock/sysbuild.\nFor simplicity, switch the left panel to ‘File Browser’ mode.\nClick on the “&lt;” icon in the upper right hand corner of the terminal window for a simpler interface.\nClick on the expansion arrows icon in the upper right of the terminal window to enter full screen mode. When you return from it, you can re-open the terminal window by clicking in the right margin of the window.\nTo copy text into a text file in the Terminal window, open it in the File Browser window, and then edit it in the Code window. Then click the ‘Save it’ button to save your changes to the text file in the webLinux file system.\nLink to full screen version",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>webLinux terminal</span>"
    ]
  },
  {
    "objectID": "webLinux.html#weblinux-license",
    "href": "webLinux.html#weblinux-license",
    "title": "Appendix D — webLinux terminal",
    "section": "D.2 webLinux License",
    "text": "D.2 webLinux License\nThe webLinux object https://remisharrock.github.io/sysbuild/ used here was released under the following license terms:\nCopyright © 2016-2019 Rémi SHARROCK - Telecom ParisTech - IMT France\nVersion 0.0.1\nAll Rights Reserved.\nThis project’s original source code (“CODE”) is provided and licensed under the “Angrave Open Relicense (Illinois-Version)” license: The CODE is licensed under the University of Illinois/NCSA Open Source License. The CODE may be re-licensed under an open source license that is approved and recognized by the Open Source Initiative.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.\n\nD.2.1 Acknowledgement\nLawrence Angrave, University of Illinois and UIUC students with their original project.\n\n\nD.2.2 Copyrights and Licenses for Third Party Software\nThis project contains code written by third parties. Such software will have its own individual LICENSE.TXT or LICENSE file in the directory in which it appears. This file will describe the copyrights, license, and restrictions which apply to that code.\nThe disclaimer of warranty in the University of Illinois Open Source License applies to all code in this project, and nothing in any of the other licenses gives permission to use the names of the development team or the University of Illinois to endorse or promote products derived from this Software.\nThe following pieces of software have additional or alternate copyrights, licenses, and/or restrictions: * The jor1k virtual machine is distributed under the terms of the Simplified BSD License and is Copyright (c) 2014, Sebastian Macke. * Bootstrap is released under the MIT license and is Copyright (c) 2011-2015 Twitter, Inc. * Ace (Ajax.org Cloud9 Editor) is BSD licenced and is Copyright (c) 2010, Ajax.org B.V.\n\n\nD.2.3 Copyrights and Licenses for Third Party Content and Creative Works\n\nThe “Linux in a browser” logo, used as the website favicon (favicon.ico) is Copyright (c) 2014 Neelabh Gupta, and is based on the following works:\n\nThe Linux Tux logo by Larry Ewing (lewing@isc.tamu.edu) and The GIMP.\nThe “Google Chrome illustration logo in a browser window” image found here.\n\n\n\n\nD.2.4 The University of Illinois/NCSA Open Source License is reproduced below\n\nAll rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.\nNeither the names of the University of Illinois, nor the names of its contributors may be used to endorse or promote products derived from this Software without specific prior written permission.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>webLinux terminal</span>"
    ]
  }
]