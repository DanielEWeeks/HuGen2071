---
editor: 
  mode: source  
---

# R Factors Exercise

## Ackowledgements

This chapter is a slightly modified version of the

[Understanding Factors](https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html)

chapter from 

[Programming with R](https://swcarpentry.github.io/r-novice-inflammation/) 

by

software carpentry

which is made available under the Creative Commons Attribution license 4.0 [link](https://creativecommons.org/licenses/by/4.0/).

This chapter is made available according to the same license.

## Objectives
-   Understand how to represent categorical data in R.
-   Know the difference between ordered and unordered factors.
-   Be aware of some of the problems encountered when using factors.


## Questions
-   How is categorical data represented in R?
-   How do I work with factors?

## Factors

Factors are used to represent categorical data. Factors can be ordered or unordered and are an important class for statistical analysis and for plotting.

Factors are stored as integers, and have labels associated with these unique integers. While factors look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings.

Once created, factors can only contain a pre-defined set values, known as *levels*. By default, R always sorts*levels*in alphabetical order. For instance, if you have a factor with 2 levels:

::: callout
## The `factor()` Command

The `factor()` command is used to create and modify factors in R:

```{webr-r}
sex <- factor(c("male", "female", "female", "male"))
sex
```
:::

R will assign `1` to the level `"female"` and `2` to the level `"male"` (because `f` comes before `m`, even though the first element in this vector is `"male"`). You can check this by using the function `levels()`, and check the number of levels using `nlevels()`:

```{webr-r}
sex
levels(sex)
nlevels(sex)
```

Sometimes, the order of the factors does not matter, other times you might want to specify the order because it is meaningful (e.g., "low", "medium", "high") or it is required by particular type of analysis. Additionally, specifying the order of the levels allows us to compare levels:

```{webr-r}
food <- factor(c("low", "high", "medium", "high", "low", "medium", "high"))
food
levels(food)
food <- factor(food, levels = c("low", "medium", "high"))
levels(food)
min(food) # doesn't work
```

```{web-r}
food <- factor(food, levels = c("low", "medium", "high"), ordered = TRUE)
food
levels(food)
min(food) # works!
```

In R's memory, these factors are represented by numbers (1, 2, 3). They are better than using simple integer labels because factors are self describing: `"low"`, `"medium"`, and `"high"`" is more descriptive than `1`, `2`, `3`. Which is low? You wouldn't be able to tell with just integer data. Factors have this information built in. It is particularly helpful when there are many levels (like the subjects in our example data set).

:::: challenge
## Challenge: Representing Data in R

You have a vector representing levels of exercise undertaken by 5 subjects

**"L", "N", "N", "I", "L"** ; N=none, L=light, I=intense

What is the best way to represent this in R?

a.  `exercise <- c("L", "N", "N", "I", "L")`

b.  `exercise <- factor(c("L", "N", "N", "I", "L"), ordered = TRUE)`

c.  `exercise < -factor(c("L", "N", "N", "I", "L"), levels = c("N", "L", "I"), ordered = FALSE)`

d.  `exercise <- factor(c("L", "N", "N", "I", "L"), levels = c("N", "L", "I"), ordered = TRUE)`

::: {.callout-tip collapse="true"}
### Solution
Correct solution is **d.**

``` r
exercise <- factor(c("L", "N", "N", "I", "L"), levels = c("N", "L", "I"), ordered = TRUE)
```

We only expect three categories ("N", "L", "I"). We can order these from least intense to most intense, so let's use `ordered`.
:::
::::

### Converting Factors

Converting from a factor to a number can cause problems:

```{webr-r}
f <- factor(c(3.4, 1.2, 5))
f
as.numeric(f)
```

This does not behave as expected (and there is no warning).

The recommended way is to use the integer vector to index the factor levels:

```{webr-r}
levels(f)[f]
```

This returns a character vector, the `as.numeric()` function is still required to convert the values to the proper type (numeric).

```{webr-r}
g <- levels(f)[f]
g
g <- as.numeric(g)
g
```

### Using Factors

Lets load our example data to see the use of factors:

```{webr-r}
# Download the sample.csv data file within the WebR environment
root_srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/"
download.file(paste0(root_srcfile,"data/sample.csv"),
              "sample.csv")
dat <- read.csv(file = 'sample.csv', stringsAsFactors = TRUE)
dim(dat)
```

::: callout
## Default Behavior

`stringsAsFactors = TRUE` was the default behavior for R prior to version 4.0. We are using it here to override the default behaviour for R version 4.0 which is `stringsAsFactors = FALSE`. It is included here for clarity.
:::

```{webr-r}
str(dat)
```

Notice the first 3 columns have been converted to factors. These values were text in the data file so R automatically interpreted them as categorical variables.

```{webr-r}
summary(dat)
```

Notice the `summary()` function handles factors differently to numbers (and strings), the occurrence counts for each value is often more useful information.

::: callout
## The `summary()` Function

The `summary()` function is a great way of spotting errors in your data (look at the `dat$Gender` column). It's also a great way for spotting missing data.
:::

:::: challenge
## Challenge: Reordering Factors

The function `table()` tabulates observations and can be used to create bar plots quickly. For instance:

```{webr-r}
table(dat$Group)
barplot(table(dat$Group))
```

Use the `factor()` command to modify the column `dat$Group` so that the *control* group is plotted last.

::: {.callout-tip collapse="true"}
### Solution

```{webr-r}
dat$Group <- factor(dat$Group, levels = c("Treatment1", "Treatment2", "Control"))
barplot(table(dat$Group))
```
:::
::::

### Removing Levels from a Factor

Some of the Gender values in our dataset have been coded incorrectly. Let's remove levels from this factor.

```{webr-r}
barplot(table(dat$Gender))
```

Values should have been recorded as lowercase 'm' and 'f'. We should correct this.

```{webr-r}
dat$Gender[dat$Gender == 'M'] <- 'm'
barplot(table(dat$Group))
```

::::: challenge
## Challenge: Updating Factors

```{webr-r}
plot(x = dat$Gender, y = dat$BloodPressure)
```

Why does this plot show 4 levels?

::: hint
How many levels does `dat$Gender` have?
:::

::: {.callout-tip collapse="true"}
### Solution
`dat$Gender` has 4 levels, so the plot shows 4 levels.
:::
:::::

We need to tell R that "M" is no longer a valid value for this column. We use the `droplevels()` function to remove extra levels.

```{webr-r}
dat$Gender <- droplevels(dat$Gender)
plot(x = dat$Gender, y = dat$BloodPressure)
```

::: callout
## Adjusting Factor Levels

Adjusting the `levels()` of a factor provides a useful shortcut for reassigning values in this case.

```{webr-r}
levels(dat$Gender)
levels(dat$Gender)[1] <- 'f'
levels(dat$Gender)
plot(x = dat$Gender, y = dat$BloodPressure)
```
:::

::: keypoints
-   Factors are used to represent categorical data.
-   Factors can be *ordered* or *unordered*.
-   Some R functions have special methods for handling factors.
:::
