---
editor: 
  mode: source  
---

# R Merging Exercise

```{r,echo=FALSE,message=FALSE,warning=FALSE}
require(knitr)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
```

## Load Libraries

```{r load_libraries,message=FALSE}
library(tidyverse)
library(tidylog)
```

## Input data

Let's load the synthetic simulated Project 1 data and associated data dictionary:

```{r}
load("data/project1.RData", verbose = TRUE)
```

## Select a subset of subject-level fields

Set up a data frame 'a' that has these subject-level fields: "subject_id" "maternal_age_delivery" "case_control_status"\
"prepregnancy_BMI"

```{r}
a <- ds %>% select("subject_id", "maternal_age_delivery",    "case_control_status",     
 "prepregnancy_BMI") %>% 
  arrange(subject_id)
head(a,10)
tail(a)
```

## Unique records

The data were given to us in a way that repeated subject-level information, once for each sample from each individual subject.

From your data frame 'a' select only the unique records, creating data frame `b`.

::: {.callout-tip collapse="true"}
## Expand to see solution

```{r}
b <- unique(a)
head(b)

b1 <- a %>% distinct()

all.equal(b,b1)
all.equal(b,b1, check.attributes=FALSE)
head(rownames(b))
head(rownames(b1))
# Reset row names
rownames(b) <- NULL
rownames(b1) <- NULL
all.equal(b,b1)
```

### Comment

It is better to apply `unique` to the whole data frame, not just to the `subject_id` column, as that ensures that you are selecting whole records that are unique across all of their columns.

```{r}
(ex1 <- data.frame(ID=c(1,1,1,2),trait=c(10, 9, 9, 11)))
unique(ex1)

ex1 %>% distinct()
```
:::

## Check that the `subject_id`'s are now not duplicated

Are the `subject_id`'s unique?

::: {.callout-tip collapse="true"}
## Expand to see solution

```{r}
sum(duplicated(b$subject_id))
b %>%  group_by(subject_id) %>% filter(n()>1)
```
:::

## Create random integer IDs

Create a new column `ID` containing randomly chosen integer IDs; this is necessary to de-identify the data. To do this, use the `sample` command, sampling integers from 1 to the number of rows in data frame `b`.

::: {.callout-tip collapse="true"}
## Expand to see solution

```{r}
set.seed(10234)
b$ID <- sample(c(1:nrow(b)), replace = FALSE)
head(b %>% select(subject_id, ID))
sum(duplicated(b$ID))
```
:::

## Merge in new phenotype information

The PI has sent you new trait data for your subjects.

```{r}
new <- read_tsv("data/newtrait.tsv")
head(new)
dim(new)
dim(b)
```

Carefully merge this in using tidyverse commands.

If you notice any problems with this merge, prepare a report for the PI detailing what you noticed and what you'd like to ask the PI about.

## Always be careful when merging.

-   *Always check for duplicated IDs* before doing the merge.
-   Always check that your ID columns do not contain any missing values.
-   Check that the values in the ID columns (e.g., the keys) match.
    -   Can use an 'anti_join' to check this.
    -   Inconsistencies in the values of the keys can be hard to fix.
-   *Always check the dimensions* to make sure the merged object has the expected number of rows and columns.
-   Always explicitly name the keys you are merging on.
    -   If you don't name them, then the join command will use all variables in common across `x` and `y`.

## Merge in new phenotype information

Carefully merge in the new data in using tidyverse commands.

If you notice any problems with this merge, prepare a report for the PI detailing what you noticed and what you'd like to ask the PI about.

::: {.callout-tip collapse="true"}
## Expand to see solution

```{r}
# Check for duplicated IDs
sum(duplicated(b$subject_id))
sum(duplicated(new$subject_id))

# Which one is duplicated
new %>% group_by(subject_id) %>% mutate(n=n()) %>% filter(n>1)

# Check for missing IDs
sum(is.na(b$subject_id))
sum(is.na(new$subject_id))

# Check the dimensions
dim(b)
dim(new)
b2 <- left_join(b, new, by="subject_id")
head(b2)
dim(b2)
b3 <- full_join(b, new, by="subject_id")
dim(b3)
```

anti_join() return all rows from x without a match in y.

```{r}
anti_join(b, new, by="subject_id")
anti_join(new, b, by="subject_id")
```
:::
