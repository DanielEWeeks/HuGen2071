---
editor: 
  mode: source  
---  

# R Basics Group Exercise

## Question: Recycling in a dataframe

Suppose you have a dataframe `df` with three columns, `A`, `B`, and `C`, as follows:

```{r}
df <- data.frame(
A = c(1, 2, 3, 4),
B = c(5, 6, 7, 8),
C = c(9, 10, 11, 12)
)
df
```

Now, you want to insert a shorter vector `D` into the `df` dataframe:

```{r}
df$D <- c(13,14)
```

What will be the `D` column of `df` after the operation?

```{r, echo=FALSE}
library(webexercises)
choices = c(
"c(13, 14, NA, NA)",
"c(13, 14, 11, 12)",
answer = "c(13, 14, 13, 14)",
"c(13, 14)"
)
```

`r longmcq(choices)`

Please select the correct option.

## Exercise 1: recycling

This exercise should help answer this question: 'In what type of situations would "recycling" be useful?'

First, let's set up the data frame `a`

```{r}
a <- data.frame(n = 1:4)
dim(a)
a
```

Use recycling to insert into the data frame `a` a column named `rowNum1` that contains a 1 in even rows and a 2 in odd rows.

::: callout-warning
If the following WebR chunk is working properly, you should see an editor window below the `Run code` tab displaying this line of R code: `(a <- data.frame(n = 1:4))`.
:::

```{webr-r}
(a <- data.frame(n = 1:4))
# Edit/add R code here
```

::: callout-tip
### Tip

The R command

```         
a$rowNum1 <- NA
```

would insert a new row into the data frame `a` full of `NA` values.
:::

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
a$rowNum1 <- c(1,2)
a
```
:::

## Question: Vector addition and recycling

Suppose you have two vectors in R:

Vector A: c(1, 2, 3)\
Vector B: c(4, 5)

If you perform the operation A + B, what will be the result of vector recycling?

```{r,echo=FALSE}
library(webexercises)
choices <- c( 
"c(5, 7, 3)",
"c(5, 7, 8)",
answer = "c(5, 7, 7)",
"c(5, 5, 3)")
```

`r longmcq(choices)`

Please select the correct option.

## Exercise 2: vector addition

Use vector addition to construct a vector of length 4 that contains a 1 in even positions and a 2 in odd positions. Then insert this vector into the data frame `a` into a column named `rowNum6`.

```{webr-r}
# Edit/add code here
```

::: callout-tip
### Tip

What vector could you add to this vector so the sum is the vector (1, 2, 1, 2)?

```{r}
rep(1, 4)
```
:::

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
r1 <- rep(1, times = 4)
r2 <- rep(c(0,1), times = 2)
r1
r2
r1 + r2
a$rowNum6 <- r1 + r2
a
```
:::

## Exercise 3: `for` loops

Loops allow you to repeat actions on each item from a vector of items.

Here is an example `for` loop, iterating through the values of `i` from 1 to 3:

```{r}
for (i in 1:3) {
  print(paste("i =",i))
}
```

This does the same thing as this repetitive code:

```{r}
i.vector <- c(1,2,3)
i <- i.vector[1]
print(paste("i =",i))
i <- i.vector[2]
print(paste("i =",i))
i <- i.vector[3]
print(paste("i =",i))
```

Use a `for` loop to insert into the data frame `a` a column named `rowNum2` that contains a 1 in even rows and a 2 in odd rows.

```{webr-r}
# Edit/add code here
```

::: callout-tip
### Tip

Think about how as `i` increments from 1 to `nrow(a)`, how could we map that sequence (e.g. 1, 2, 3, 4) to the desired sequence of 1, 2, 1, 2.
:::

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
# Set value that we want to iterate 1, 2, 1, 2, ...
j <- 1
# Initialize rowNum2 to all missing values
a$rowNum2 <- NA  
# Start the for loop, looping over the number of rows in a
for (i in c(1:nrow(a))) {
   # Assign value j to row i
   a$rowNum2[i] <- j
   # Increment j
   j <- j + 1
   # If j is greater than 2, set it back to 1
   if (j > 2) {
     j <- 1
   }
}
a
```
:::

## Exercise 4: `while` loops

Here's an example `while` loop:

```{r}
i <- 1
while (i < 4) {
  print(paste("i =",i))
  i <- i + 1
}
```

Use a `while` loop to insert into the data frame `a` a column named `rowNum3` that contains a 1 in even rows and a 2 in odd rows.

```{webr-r}
# Edit/add code here
```

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
a$rowNum3 = NA
i <- 1 #set index
while(i <= nrow(a)){ #set conditions for while loop

  if ((i %% 2)) { #if statement for when "i" is odd
    a$rowNum3[i] <- 1
  }
  else #else statement for when "i" is even
    a$rowNum3[i] <- 2
  
  i <- i + 1 #counter for "i", increments by 1 with each loop iteration
} 
a
```
:::

## Exercise 5: `repeat` loops

Here's an example `repeat` loop:

```{r}
i <- 1
repeat {
  print(paste("i =",i))
  i <- i + 1
  if (i > 3) break
}
```

Use a `repeat` loop to insert into the data frame `a` a column named `rowNum4` that contains a 1 in even rows and a 2 in odd rows.

```{webr-r}
# Edit/add code here
```

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
a$rowNum4 <- NA
i <- 1 #set index
repeat { 

  if ((i %% 2)) { #if statement for when "i" is odd
    a$rowNum4[i] <- 1
  }
  else #else statement for when "i" is even
    a$rowNum4[i] <- 2
  
  i <- i + 1 #counter for "i", increments by 1 with each loop iteration
  if (i > nrow(a)) {
    break
  }
} 
a
```
:::

## Exercise 6: using the `rep` function

Use the `rep` command to insert into the data frame `a` a column named `rowNum5` that contains a 1 in even rows and a 2 in odd rows.

```{webr-r}
# Edit/add code here
```

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
# This will only work correctly if nrow(a) is even
a$rowNum5 <- rep(c(1,2), nrow(a)/2)
a
```
:::

## Exercise 7

List all even rows of the data frame `a`.

List rows 3 and 4 of the data frame `a`.

```{webr-r}
# Edit/add code here
```

::: {.callout-tip collapse="true"}
### Expand to see the answer

```{r}
# All even rows
a[a$rowNum1==2,]
# All odd rows
a[a$rowNum1==1,]
```
:::

## Exercise 8

::: callout-note
Learning objective: Learn how to alter the options of an R command to achieve your goals.
:::

This exercise should help answer this question: "When reading a file, will missing data be automatically represented as NA values, or does that need to be coded/manually curated?"

The tab-delimited file in `testdata.txt` contains the following data:

```         
1       1       1
2       2       2
3       NA      99
4       4       4
```

Your collaborator who gave you these data informed you that in this file `99` stands for a missing value, as does `NA`.

However if we use the `read.table` command with its default options to read this in, we fail to accomplish the desired task, as `99` is not reading as a missing value:

```{r}
infile <- "data/testdata.txt"
# Adjust the read.table options to read the file correctly as desired.
b <- read.table(infile)
b
str(b)
```

Use the `read.table` command to read this file in while automatically setting both the 'NA" and the `99` to `NA`. This can be done by adjusting the various options of the `read.table` command.

```{webr-r}
dir.create("data")
infile <- "data/testdata.txt"
srcfile <- "https://raw.githubusercontent.com/DanielEWeeks/HuGen2071/main/data/testdata.txt"
download.file(srcfile, infile)
# Adjust the read.table options to read the file correctly as desired.
b <- read.table(infile)
b
```

::: callout-tip
### Tip

Read the help page for the `read.table` command
:::

::: {.callout-tip collapse="true"}
### Expand to see the answer

To read this in properly, we have to let 'read.table' know that there is no header and that which values should be mapped to the missing NA value:

```{r}
b <- read.table(infile, header = FALSE, na.strings = c("NA","99"))
b
str(b)
summary(b)
```
:::
